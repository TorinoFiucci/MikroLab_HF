
Jordan_Levente_ELMHX3_HF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005560  08005560  00006560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005604  08005604  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005604  08005604  00007060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005604  08005604  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005604  08005604  00006604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005608  08005608  00006608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800560c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  20000060  0800566c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  0800566c  0000778c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eec6  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254b  00000000  00000000  00015f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000184a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afb  00000000  00000000  00019298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f3c  00000000  00000000  00019d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121d5  00000000  00000000  0001cccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac146  00000000  00000000  0002eea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dafea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003674  00000000  00000000  000db030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000de6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005548 	.word	0x08005548

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08005548 	.word	0x08005548

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <backlight_init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  * the configuration information for TIM1.
  * @retval None
  */
void backlight_init(TIM_HandleTypeDef *htim)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a05      	ldr	r2, [pc, #20]	@ (8000264 <backlight_init+0x24>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d104      	bne.n	800025c <backlight_init+0x1c>
  {
    // Start PWM on TIM1 Channel 1
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2100      	movs	r1, #0
 8000256:	0018      	movs	r0, r3
 8000258:	f003 f978 	bl	800354c <HAL_TIM_PWM_Start>
  }
}
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40012c00 	.word	0x40012c00

08000268 <backlight_set_brightness>:
  * the configuration information for TIM1.
  * @param  percentage: Brightness level from 0 (off) to 100 (full brightness).
  * @retval None
  */
void backlight_set_brightness(TIM_HandleTypeDef *htim, uint8_t percentage)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	000a      	movs	r2, r1
 8000272:	1cfb      	adds	r3, r7, #3
 8000274:	701a      	strb	r2, [r3, #0]
  if (htim->Instance == TIM1)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a11      	ldr	r2, [pc, #68]	@ (80002c0 <backlight_set_brightness+0x58>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d11a      	bne.n	80002b6 <backlight_set_brightness+0x4e>
  {
    uint32_t pulse_value = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
    uint32_t period_value = __HAL_TIM_GET_AUTORELOAD(htim); // Get the Period (ARR value)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800028a:	60bb      	str	r3, [r7, #8]

    if (percentage > 100)
 800028c:	1cfb      	adds	r3, r7, #3
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b64      	cmp	r3, #100	@ 0x64
 8000292:	d902      	bls.n	800029a <backlight_set_brightness+0x32>
    {
      percentage = 100;
 8000294:	1cfb      	adds	r3, r7, #3
 8000296:	2264      	movs	r2, #100	@ 0x64
 8000298:	701a      	strb	r2, [r3, #0]

    // Calculate pulse value based on percentage of the period
    // Note: period_value is ARR, so for 100% duty cycle, CCR should be ARR+1 if period is ARR.
    // However, it's common to set CCR from 0 to ARR.
    // If period is 65535, then pulse = (65535 * percentage) / 100
    pulse_value = (period_value * percentage) / 100;
 800029a:	1cfb      	adds	r3, r7, #3
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	4353      	muls	r3, r2
 80002a2:	2164      	movs	r1, #100	@ 0x64
 80002a4:	0018      	movs	r0, r3
 80002a6:	f7ff ff3f 	bl	8000128 <__udivsi3>
 80002aa:	0003      	movs	r3, r0
 80002ac:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, pulse_value);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b004      	add	sp, #16
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			@ (mov r8, r8)
 80002c0:	40012c00 	.word	0x40012c00

080002c4 <LCD_Buffer_Init>:
#define SCREEN_PAGES (SCREEN_HEIGHT / 8)

// screen_buffer[lap_száma][x_koordináta]
static uint8_t screen_buffer[SCREEN_PAGES][SCREEN_WIDTH];

void LCD_Buffer_Init() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	memset(screen_buffer, 0x00, sizeof(screen_buffer));
 80002c8:	2380      	movs	r3, #128	@ 0x80
 80002ca:	00da      	lsls	r2, r3, #3
 80002cc:	4b03      	ldr	r3, [pc, #12]	@ (80002dc <LCD_Buffer_Init+0x18>)
 80002ce:	2100      	movs	r1, #0
 80002d0:	0018      	movs	r0, r3
 80002d2:	f004 fcbf 	bl	8004c54 <memset>
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000007c 	.word	0x2000007c

080002e0 <LCD_Set_Pixel>:

void LCD_Set_Pixel(uint8_t x, uint8_t y, uint8_t color) {
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0004      	movs	r4, r0
 80002e8:	0008      	movs	r0, r1
 80002ea:	0011      	movs	r1, r2
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	1c22      	adds	r2, r4, #0
 80002f0:	701a      	strb	r2, [r3, #0]
 80002f2:	1dbb      	adds	r3, r7, #6
 80002f4:	1c02      	adds	r2, r0, #0
 80002f6:	701a      	strb	r2, [r3, #0]
 80002f8:	1d7b      	adds	r3, r7, #5
 80002fa:	1c0a      	adds	r2, r1, #0
 80002fc:	701a      	strb	r2, [r3, #0]

	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) {
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	b25b      	sxtb	r3, r3
 8000304:	2b00      	cmp	r3, #0
 8000306:	db50      	blt.n	80003aa <LCD_Set_Pixel+0xca>
 8000308:	1dbb      	adds	r3, r7, #6
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b3f      	cmp	r3, #63	@ 0x3f
 800030e:	d84c      	bhi.n	80003aa <LCD_Set_Pixel+0xca>
		return; // Koordinátán kívül
	}

	uint8_t page = y / 8;
 8000310:	200f      	movs	r0, #15
 8000312:	183b      	adds	r3, r7, r0
 8000314:	1dba      	adds	r2, r7, #6
 8000316:	7812      	ldrb	r2, [r2, #0]
 8000318:	08d2      	lsrs	r2, r2, #3
 800031a:	701a      	strb	r2, [r3, #0]
	uint8_t bit_position = y % 8;
 800031c:	240e      	movs	r4, #14
 800031e:	193b      	adds	r3, r7, r4
 8000320:	1dba      	adds	r2, r7, #6
 8000322:	7812      	ldrb	r2, [r2, #0]
 8000324:	2107      	movs	r1, #7
 8000326:	400a      	ands	r2, r1
 8000328:	701a      	strb	r2, [r3, #0]

	if (color) {
 800032a:	1d7b      	adds	r3, r7, #5
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d01b      	beq.n	800036a <LCD_Set_Pixel+0x8a>
		screen_buffer[page][x] |= (1 << bit_position);  // Pixel bekapcsolása
 8000332:	183b      	adds	r3, r7, r0
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	1dfb      	adds	r3, r7, #7
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	491e      	ldr	r1, [pc, #120]	@ (80003b4 <LCD_Set_Pixel+0xd4>)
 800033c:	01d2      	lsls	r2, r2, #7
 800033e:	188a      	adds	r2, r1, r2
 8000340:	5cd3      	ldrb	r3, [r2, r3]
 8000342:	b25a      	sxtb	r2, r3
 8000344:	193b      	adds	r3, r7, r4
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2101      	movs	r1, #1
 800034a:	4099      	lsls	r1, r3
 800034c:	000b      	movs	r3, r1
 800034e:	b25b      	sxtb	r3, r3
 8000350:	4313      	orrs	r3, r2
 8000352:	b259      	sxtb	r1, r3
 8000354:	183b      	adds	r3, r7, r0
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b2c8      	uxtb	r0, r1
 800035e:	4915      	ldr	r1, [pc, #84]	@ (80003b4 <LCD_Set_Pixel+0xd4>)
 8000360:	01d2      	lsls	r2, r2, #7
 8000362:	188a      	adds	r2, r1, r2
 8000364:	1c01      	adds	r1, r0, #0
 8000366:	54d1      	strb	r1, [r2, r3]
 8000368:	e020      	b.n	80003ac <LCD_Set_Pixel+0xcc>
	} else {
		screen_buffer[page][x] &= ~(1 << bit_position); // Pixel kikapcsolása
 800036a:	200f      	movs	r0, #15
 800036c:	183b      	adds	r3, r7, r0
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	490f      	ldr	r1, [pc, #60]	@ (80003b4 <LCD_Set_Pixel+0xd4>)
 8000376:	01d2      	lsls	r2, r2, #7
 8000378:	188a      	adds	r2, r1, r2
 800037a:	5cd3      	ldrb	r3, [r2, r3]
 800037c:	b25b      	sxtb	r3, r3
 800037e:	220e      	movs	r2, #14
 8000380:	18ba      	adds	r2, r7, r2
 8000382:	7812      	ldrb	r2, [r2, #0]
 8000384:	2101      	movs	r1, #1
 8000386:	4091      	lsls	r1, r2
 8000388:	000a      	movs	r2, r1
 800038a:	b252      	sxtb	r2, r2
 800038c:	43d2      	mvns	r2, r2
 800038e:	b252      	sxtb	r2, r2
 8000390:	4013      	ands	r3, r2
 8000392:	b259      	sxtb	r1, r3
 8000394:	183b      	adds	r3, r7, r0
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b2c8      	uxtb	r0, r1
 800039e:	4905      	ldr	r1, [pc, #20]	@ (80003b4 <LCD_Set_Pixel+0xd4>)
 80003a0:	01d2      	lsls	r2, r2, #7
 80003a2:	188a      	adds	r2, r1, r2
 80003a4:	1c01      	adds	r1, r0, #0
 80003a6:	54d1      	strb	r1, [r2, r3]
 80003a8:	e000      	b.n	80003ac <LCD_Set_Pixel+0xcc>
		return; // Koordinátán kívül
 80003aa:	46c0      	nop			@ (mov r8, r8)
	}
}
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b005      	add	sp, #20
 80003b0:	bd90      	pop	{r4, r7, pc}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	2000007c 	.word	0x2000007c

080003b8 <LCD_Refresh_Display>:

void LCD_Refresh_Display() {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
	uint8_t page, col_on_chip;

	for (page = 0; page < SCREEN_PAGES; page++) {
 80003be:	1dfb      	adds	r3, r7, #7
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
 80003c4:	e06f      	b.n	80004a6 <LCD_Refresh_Display+0xee>
		// Bal oldali chip (CS1)
		HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, GPIO_PIN_RESET); // CS1 aktív
 80003c6:	4b45      	ldr	r3, [pc, #276]	@ (80004dc <LCD_Refresh_Display+0x124>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	2101      	movs	r1, #1
 80003cc:	0018      	movs	r0, r3
 80003ce:	f002 f9e9 	bl	80027a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, GPIO_PIN_SET);   // CS2 inaktív
 80003d2:	4b42      	ldr	r3, [pc, #264]	@ (80004dc <LCD_Refresh_Display+0x124>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	2102      	movs	r1, #2
 80003d8:	0018      	movs	r0, r3
 80003da:	f002 f9e3 	bl	80027a4 <HAL_GPIO_WritePin>

		Set_Page(page);  // CS1-re
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 f9e8 	bl	80007b8 <Set_Page>
		Set_Coloumn(0);  // CS1-re
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f941 	bl	8000670 <Set_Coloumn>

		HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, GPIO_PIN_SET); // Adat mód
 80003ee:	2380      	movs	r3, #128	@ 0x80
 80003f0:	015b      	lsls	r3, r3, #5
 80003f2:	483a      	ldr	r0, [pc, #232]	@ (80004dc <LCD_Refresh_Display+0x124>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	0019      	movs	r1, r3
 80003f8:	f002 f9d4 	bl	80027a4 <HAL_GPIO_WritePin>

		for (col_on_chip = 0; col_on_chip < 64; col_on_chip++) { // CS1 64 oszlopa
 80003fc:	1dbb      	adds	r3, r7, #6
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	e011      	b.n	8000428 <LCD_Refresh_Display+0x70>
			Write_Data_Bits(screen_buffer[page][col_on_chip]);
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	781a      	ldrb	r2, [r3, #0]
 8000408:	1dbb      	adds	r3, r7, #6
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4934      	ldr	r1, [pc, #208]	@ (80004e0 <LCD_Refresh_Display+0x128>)
 800040e:	01d2      	lsls	r2, r2, #7
 8000410:	188a      	adds	r2, r1, r2
 8000412:	5cd3      	ldrb	r3, [r2, r3]
 8000414:	0018      	movs	r0, r3
 8000416:	f000 faa1 	bl	800095c <Write_Data_Bits>
			E_Pulse();
 800041a:	f000 fa4b 	bl	80008b4 <E_Pulse>
		for (col_on_chip = 0; col_on_chip < 64; col_on_chip++) { // CS1 64 oszlopa
 800041e:	1dbb      	adds	r3, r7, #6
 8000420:	781a      	ldrb	r2, [r3, #0]
 8000422:	1dbb      	adds	r3, r7, #6
 8000424:	3201      	adds	r2, #1
 8000426:	701a      	strb	r2, [r3, #0]
 8000428:	1dbb      	adds	r3, r7, #6
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b3f      	cmp	r3, #63	@ 0x3f
 800042e:	d9e9      	bls.n	8000404 <LCD_Refresh_Display+0x4c>
		}

		// Jobb oldali chip (CS2)
		HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, GPIO_PIN_SET);   // CS1 inaktív
 8000430:	4b2a      	ldr	r3, [pc, #168]	@ (80004dc <LCD_Refresh_Display+0x124>)
 8000432:	2201      	movs	r2, #1
 8000434:	2101      	movs	r1, #1
 8000436:	0018      	movs	r0, r3
 8000438:	f002 f9b4 	bl	80027a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, GPIO_PIN_RESET); // CS2 aktív
 800043c:	4b27      	ldr	r3, [pc, #156]	@ (80004dc <LCD_Refresh_Display+0x124>)
 800043e:	2200      	movs	r2, #0
 8000440:	2102      	movs	r1, #2
 8000442:	0018      	movs	r0, r3
 8000444:	f002 f9ae 	bl	80027a4 <HAL_GPIO_WritePin>

		Set_Page(page);  // CS2-re
 8000448:	1dfb      	adds	r3, r7, #7
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	0018      	movs	r0, r3
 800044e:	f000 f9b3 	bl	80007b8 <Set_Page>
		Set_Coloumn(0);  // CS2-re
 8000452:	2000      	movs	r0, #0
 8000454:	f000 f90c 	bl	8000670 <Set_Coloumn>

		HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, GPIO_PIN_SET); // Adat mód
 8000458:	2380      	movs	r3, #128	@ 0x80
 800045a:	015b      	lsls	r3, r3, #5
 800045c:	481f      	ldr	r0, [pc, #124]	@ (80004dc <LCD_Refresh_Display+0x124>)
 800045e:	2201      	movs	r2, #1
 8000460:	0019      	movs	r1, r3
 8000462:	f002 f99f 	bl	80027a4 <HAL_GPIO_WritePin>

		for (col_on_chip = 0; col_on_chip < 64; col_on_chip++) { // CS2 64 oszlopa
 8000466:	1dbb      	adds	r3, r7, #6
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
 800046c:	e012      	b.n	8000494 <LCD_Refresh_Display+0xdc>
			// A puffer 64-127. oszlopait olvassuk ki a jobb oldali chip számára
			Write_Data_Bits(screen_buffer[page][col_on_chip + 64]);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	1dbb      	adds	r3, r7, #6
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3340      	adds	r3, #64	@ 0x40
 8000478:	4919      	ldr	r1, [pc, #100]	@ (80004e0 <LCD_Refresh_Display+0x128>)
 800047a:	01d2      	lsls	r2, r2, #7
 800047c:	188a      	adds	r2, r1, r2
 800047e:	5cd3      	ldrb	r3, [r2, r3]
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fa6b 	bl	800095c <Write_Data_Bits>
			E_Pulse();
 8000486:	f000 fa15 	bl	80008b4 <E_Pulse>
		for (col_on_chip = 0; col_on_chip < 64; col_on_chip++) { // CS2 64 oszlopa
 800048a:	1dbb      	adds	r3, r7, #6
 800048c:	781a      	ldrb	r2, [r3, #0]
 800048e:	1dbb      	adds	r3, r7, #6
 8000490:	3201      	adds	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
 8000494:	1dbb      	adds	r3, r7, #6
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b3f      	cmp	r3, #63	@ 0x3f
 800049a:	d9e8      	bls.n	800046e <LCD_Refresh_Display+0xb6>
	for (page = 0; page < SCREEN_PAGES; page++) {
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	3201      	adds	r2, #1
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b07      	cmp	r3, #7
 80004ac:	d98b      	bls.n	80003c6 <LCD_Refresh_Display+0xe>
		}
	}

	HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, GPIO_PIN_SET);
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <LCD_Refresh_Display+0x124>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	2101      	movs	r1, #1
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 f975 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, GPIO_PIN_SET);
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <LCD_Refresh_Display+0x124>)
 80004bc:	2201      	movs	r2, #1
 80004be:	2102      	movs	r1, #2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 f96f 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, GPIO_PIN_RESET); // Vissza parancs módba
 80004c6:	2380      	movs	r3, #128	@ 0x80
 80004c8:	015b      	lsls	r3, r3, #5
 80004ca:	4804      	ldr	r0, [pc, #16]	@ (80004dc <LCD_Refresh_Display+0x124>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	0019      	movs	r1, r3
 80004d0:	f002 f968 	bl	80027a4 <HAL_GPIO_WritePin>
}
 80004d4:	46c0      	nop			@ (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	48000400 	.word	0x48000400
 80004e0:	2000007c 	.word	0x2000007c

080004e4 <Display_On>:


void Display_On(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(_RST_LCD_GPIO_Port, _RST_LCD_Pin, SET);
 80004e8:	4b35      	ldr	r3, [pc, #212]	@ (80005c0 <Display_On+0xdc>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	2104      	movs	r1, #4
 80004ee:	0018      	movs	r0, r3
 80004f0:	f002 f958 	bl	80027a4 <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, RESET);
 80004f4:	4b32      	ldr	r3, [pc, #200]	@ (80005c0 <Display_On+0xdc>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	2101      	movs	r1, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 f952 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, RESET);
 8000500:	4b2f      	ldr	r3, [pc, #188]	@ (80005c0 <Display_On+0xdc>)
 8000502:	2200      	movs	r2, #0
 8000504:	2102      	movs	r1, #2
 8000506:	0018      	movs	r0, r3
 8000508:	f002 f94c 	bl	80027a4 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f001 f881 	bl	8001614 <HAL_Delay>

	HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, RESET);
 8000512:	2380      	movs	r3, #128	@ 0x80
 8000514:	015b      	lsls	r3, r3, #5
 8000516:	482a      	ldr	r0, [pc, #168]	@ (80005c0 <Display_On+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	0019      	movs	r1, r3
 800051c:	f002 f942 	bl	80027a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Dir_R_W_LCD_GPIO_Port, Dir_R_W_LCD_Pin, RESET);
 8000520:	2390      	movs	r3, #144	@ 0x90
 8000522:	05db      	lsls	r3, r3, #23
 8000524:	2200      	movs	r2, #0
 8000526:	2110      	movs	r1, #16
 8000528:	0018      	movs	r0, r3
 800052a:	f002 f93b 	bl	80027a4 <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, RESET);
 800052e:	2380      	movs	r3, #128	@ 0x80
 8000530:	011b      	lsls	r3, r3, #4
 8000532:	4823      	ldr	r0, [pc, #140]	@ (80005c0 <Display_On+0xdc>)
 8000534:	2200      	movs	r2, #0
 8000536:	0019      	movs	r1, r3
 8000538:	f002 f934 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, RESET);
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	00db      	lsls	r3, r3, #3
 8000540:	481f      	ldr	r0, [pc, #124]	@ (80005c0 <Display_On+0xdc>)
 8000542:	2200      	movs	r2, #0
 8000544:	0019      	movs	r1, r3
 8000546:	f002 f92d 	bl	80027a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, SET);
 800054a:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <Display_On+0xdc>)
 800054c:	2201      	movs	r2, #1
 800054e:	2120      	movs	r1, #32
 8000550:	0018      	movs	r0, r3
 8000552:	f002 f927 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, SET);
 8000556:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <Display_On+0xdc>)
 8000558:	2201      	movs	r2, #1
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	0018      	movs	r0, r3
 800055e:	f002 f921 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, SET);
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <Display_On+0xdc>)
 8000564:	2201      	movs	r2, #1
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	0018      	movs	r0, r3
 800056a:	f002 f91b 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, SET);
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	4813      	ldr	r0, [pc, #76]	@ (80005c0 <Display_On+0xdc>)
 8000574:	2201      	movs	r2, #1
 8000576:	0019      	movs	r1, r3
 8000578:	f002 f914 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, SET);
 800057c:	2380      	movs	r3, #128	@ 0x80
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	480f      	ldr	r0, [pc, #60]	@ (80005c0 <Display_On+0xdc>)
 8000582:	2201      	movs	r2, #1
 8000584:	0019      	movs	r1, r3
 8000586:	f002 f90d 	bl	80027a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, SET);
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <Display_On+0xdc>)
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	0018      	movs	r0, r3
 8000592:	f002 f907 	bl	80027a4 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f001 f83c 	bl	8001614 <HAL_Delay>

	E_Pulse();
 800059c:	f000 f98a 	bl	80008b4 <E_Pulse>

	HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, SET);
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <Display_On+0xdc>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	2101      	movs	r1, #1
 80005a6:	0018      	movs	r0, r3
 80005a8:	f002 f8fc 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, SET);
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <Display_On+0xdc>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	2102      	movs	r1, #2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 f8f6 	bl	80027a4 <HAL_GPIO_WritePin>

}
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	48000400 	.word	0x48000400

080005c4 <Clear_Display>:
	HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, GPIO_PIN_SET);
}

void Clear_Display()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, GPIO_PIN_RESET);
 80005ca:	4b28      	ldr	r3, [pc, #160]	@ (800066c <Clear_Display+0xa8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f002 f8e7 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, GPIO_PIN_RESET);
 80005d6:	4b25      	ldr	r3, [pc, #148]	@ (800066c <Clear_Display+0xa8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	0018      	movs	r0, r3
 80005de:	f002 f8e1 	bl	80027a4 <HAL_GPIO_WritePin>

	for (uint8_t page = 0; page < 8; page++)
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e025      	b.n	8000636 <Clear_Display+0x72>
	{
		Set_Page(page);
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 f8e2 	bl	80007b8 <Set_Page>
		Set_Coloumn(0);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 f83b 	bl	8000670 <Set_Coloumn>


		HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, GPIO_PIN_SET);
 80005fa:	2380      	movs	r3, #128	@ 0x80
 80005fc:	015b      	lsls	r3, r3, #5
 80005fe:	481b      	ldr	r0, [pc, #108]	@ (800066c <Clear_Display+0xa8>)
 8000600:	2201      	movs	r2, #1
 8000602:	0019      	movs	r1, r3
 8000604:	f002 f8ce 	bl	80027a4 <HAL_GPIO_WritePin>

		for (uint8_t col = 0; col < 64; col++)
 8000608:	1dbb      	adds	r3, r7, #6
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e009      	b.n	8000624 <Clear_Display+0x60>
		{
			Write_Data_Bits(0x00);
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f9a3 	bl	800095c <Write_Data_Bits>
			E_Pulse();
 8000616:	f000 f94d 	bl	80008b4 <E_Pulse>
		for (uint8_t col = 0; col < 64; col++)
 800061a:	1dbb      	adds	r3, r7, #6
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	1dbb      	adds	r3, r7, #6
 8000620:	3201      	adds	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	1dbb      	adds	r3, r7, #6
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b3f      	cmp	r3, #63	@ 0x3f
 800062a:	d9f1      	bls.n	8000610 <Clear_Display+0x4c>
	for (uint8_t page = 0; page < 8; page++)
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781a      	ldrb	r2, [r3, #0]
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	3201      	adds	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b07      	cmp	r3, #7
 800063c:	d9d5      	bls.n	80005ea <Clear_Display+0x26>

		}
	}


	Set_Page(0);
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f8ba 	bl	80007b8 <Set_Page>
	Set_Coloumn(0);
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f813 	bl	8000670 <Set_Coloumn>


	HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, GPIO_PIN_SET);
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <Clear_Display+0xa8>)
 800064c:	2201      	movs	r2, #1
 800064e:	2101      	movs	r1, #1
 8000650:	0018      	movs	r0, r3
 8000652:	f002 f8a7 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, GPIO_PIN_SET);
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <Clear_Display+0xa8>)
 8000658:	2201      	movs	r2, #1
 800065a:	2102      	movs	r1, #2
 800065c:	0018      	movs	r0, r3
 800065e:	f002 f8a1 	bl	80027a4 <HAL_GPIO_WritePin>
}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	48000400 	.word	0x48000400

08000670 <Set_Coloumn>:


int Set_Coloumn(uint8_t Y_address){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	0002      	movs	r2, r0
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	701a      	strb	r2, [r3, #0]

	if(Y_address < 0 || Y_address >= 64){
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b3f      	cmp	r3, #63	@ 0x3f
 8000682:	d901      	bls.n	8000688 <Set_Coloumn+0x18>
		return 0;
 8000684:	2300      	movs	r3, #0
 8000686:	e091      	b.n	80007ac <Set_Coloumn+0x13c>
	}

	HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, RESET);
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	4849      	ldr	r0, [pc, #292]	@ (80007b4 <Set_Coloumn+0x144>)
 800068e:	2200      	movs	r2, #0
 8000690:	0019      	movs	r1, r3
 8000692:	f002 f887 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, SET);
 8000696:	2380      	movs	r3, #128	@ 0x80
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	4846      	ldr	r0, [pc, #280]	@ (80007b4 <Set_Coloumn+0x144>)
 800069c:	2201      	movs	r2, #1
 800069e:	0019      	movs	r1, r3
 80006a0:	f002 f880 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, RESET);
 80006a4:	2380      	movs	r3, #128	@ 0x80
 80006a6:	015b      	lsls	r3, r3, #5
 80006a8:	4842      	ldr	r0, [pc, #264]	@ (80007b4 <Set_Coloumn+0x144>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	0019      	movs	r1, r3
 80006ae:	f002 f879 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dir_R_W_LCD_GPIO_Port, Dir_R_W_LCD_Pin, RESET);
 80006b2:	2390      	movs	r3, #144	@ 0x90
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	0018      	movs	r0, r3
 80006bc:	f002 f872 	bl	80027a4 <HAL_GPIO_WritePin>


	if(Y_address & 0b00000001){
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4013      	ands	r3, r2
 80006c8:	d006      	beq.n	80006d8 <Set_Coloumn+0x68>
		HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, SET);
 80006ca:	4b3a      	ldr	r3, [pc, #232]	@ (80007b4 <Set_Coloumn+0x144>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 f867 	bl	80027a4 <HAL_GPIO_WritePin>
 80006d6:	e005      	b.n	80006e4 <Set_Coloumn+0x74>
	}
	else{
		HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, RESET);
 80006d8:	4b36      	ldr	r3, [pc, #216]	@ (80007b4 <Set_Coloumn+0x144>)
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 f860 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(Y_address & 0b00000010){
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2202      	movs	r2, #2
 80006ea:	4013      	ands	r3, r2
 80006ec:	d006      	beq.n	80006fc <Set_Coloumn+0x8c>
		HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, SET);
 80006ee:	4b31      	ldr	r3, [pc, #196]	@ (80007b4 <Set_Coloumn+0x144>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	2120      	movs	r1, #32
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 f855 	bl	80027a4 <HAL_GPIO_WritePin>
 80006fa:	e005      	b.n	8000708 <Set_Coloumn+0x98>
	}
	else{
		HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, RESET);
 80006fc:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <Set_Coloumn+0x144>)
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	0018      	movs	r0, r3
 8000704:	f002 f84e 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(Y_address & 0b00000100){
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2204      	movs	r2, #4
 800070e:	4013      	ands	r3, r2
 8000710:	d006      	beq.n	8000720 <Set_Coloumn+0xb0>
		HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, SET);
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <Set_Coloumn+0x144>)
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	@ 0x40
 8000718:	0018      	movs	r0, r3
 800071a:	f002 f843 	bl	80027a4 <HAL_GPIO_WritePin>
 800071e:	e005      	b.n	800072c <Set_Coloumn+0xbc>
	}
	else{
		HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, RESET);
 8000720:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <Set_Coloumn+0x144>)
 8000722:	2200      	movs	r2, #0
 8000724:	2140      	movs	r1, #64	@ 0x40
 8000726:	0018      	movs	r0, r3
 8000728:	f002 f83c 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(Y_address & 0b00001000){
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2208      	movs	r2, #8
 8000732:	4013      	ands	r3, r2
 8000734:	d006      	beq.n	8000744 <Set_Coloumn+0xd4>
		HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, SET);
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <Set_Coloumn+0x144>)
 8000738:	2201      	movs	r2, #1
 800073a:	2180      	movs	r1, #128	@ 0x80
 800073c:	0018      	movs	r0, r3
 800073e:	f002 f831 	bl	80027a4 <HAL_GPIO_WritePin>
 8000742:	e005      	b.n	8000750 <Set_Coloumn+0xe0>
	}
	else{
		HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, RESET);
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <Set_Coloumn+0x144>)
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	0018      	movs	r0, r3
 800074c:	f002 f82a 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(Y_address & 0b00010000){
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2210      	movs	r2, #16
 8000756:	4013      	ands	r3, r2
 8000758:	d007      	beq.n	800076a <Set_Coloumn+0xfa>
		HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, SET);
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4815      	ldr	r0, [pc, #84]	@ (80007b4 <Set_Coloumn+0x144>)
 8000760:	2201      	movs	r2, #1
 8000762:	0019      	movs	r1, r3
 8000764:	f002 f81e 	bl	80027a4 <HAL_GPIO_WritePin>
 8000768:	e006      	b.n	8000778 <Set_Coloumn+0x108>
	}
	else{
		HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, RESET);
 800076a:	2380      	movs	r3, #128	@ 0x80
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <Set_Coloumn+0x144>)
 8000770:	2200      	movs	r2, #0
 8000772:	0019      	movs	r1, r3
 8000774:	f002 f816 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(Y_address & 0b00100000){
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2220      	movs	r2, #32
 800077e:	4013      	ands	r3, r2
 8000780:	d007      	beq.n	8000792 <Set_Coloumn+0x122>
		HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, SET);
 8000782:	2380      	movs	r3, #128	@ 0x80
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <Set_Coloumn+0x144>)
 8000788:	2201      	movs	r2, #1
 800078a:	0019      	movs	r1, r3
 800078c:	f002 f80a 	bl	80027a4 <HAL_GPIO_WritePin>
 8000790:	e006      	b.n	80007a0 <Set_Coloumn+0x130>
	}
	else{
		HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, RESET);
 8000792:	2380      	movs	r3, #128	@ 0x80
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4807      	ldr	r0, [pc, #28]	@ (80007b4 <Set_Coloumn+0x144>)
 8000798:	2200      	movs	r2, #0
 800079a:	0019      	movs	r1, r3
 800079c:	f002 f802 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	Delay_us(1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 f89f 	bl	80008e4 <Delay_us>

	E_Pulse();
 80007a6:	f000 f885 	bl	80008b4 <E_Pulse>

	return 1;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b002      	add	sp, #8
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	48000400 	.word	0x48000400

080007b8 <Set_Page>:

int Set_Page(uint8_t X_address){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	701a      	strb	r2, [r3, #0]

	if(X_address < 0 || X_address >= 8){
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b07      	cmp	r3, #7
 80007ca:	d901      	bls.n	80007d0 <Set_Page+0x18>
		return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e06b      	b.n	80008a8 <Set_Page+0xf0>
	}

	HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, SET);
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	4836      	ldr	r0, [pc, #216]	@ (80008b0 <Set_Page+0xf8>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	0019      	movs	r1, r3
 80007da:	f001 ffe3 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, RESET);
 80007de:	2380      	movs	r3, #128	@ 0x80
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	4833      	ldr	r0, [pc, #204]	@ (80008b0 <Set_Page+0xf8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	0019      	movs	r1, r3
 80007e8:	f001 ffdc 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, RESET);
 80007ec:	2380      	movs	r3, #128	@ 0x80
 80007ee:	015b      	lsls	r3, r3, #5
 80007f0:	482f      	ldr	r0, [pc, #188]	@ (80008b0 <Set_Page+0xf8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	0019      	movs	r1, r3
 80007f6:	f001 ffd5 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dir_R_W_LCD_GPIO_Port, Dir_R_W_LCD_Pin, RESET);
 80007fa:	2390      	movs	r3, #144	@ 0x90
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	0018      	movs	r0, r3
 8000804:	f001 ffce 	bl	80027a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, SET);
 8000808:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <Set_Page+0xf8>)
 800080a:	2201      	movs	r2, #1
 800080c:	2180      	movs	r1, #128	@ 0x80
 800080e:	0018      	movs	r0, r3
 8000810:	f001 ffc8 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, SET);
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4825      	ldr	r0, [pc, #148]	@ (80008b0 <Set_Page+0xf8>)
 800081a:	2201      	movs	r2, #1
 800081c:	0019      	movs	r1, r3
 800081e:	f001 ffc1 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, SET);
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4822      	ldr	r0, [pc, #136]	@ (80008b0 <Set_Page+0xf8>)
 8000828:	2201      	movs	r2, #1
 800082a:	0019      	movs	r1, r3
 800082c:	f001 ffba 	bl	80027a4 <HAL_GPIO_WritePin>

	if(X_address & 0b00000001){
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2201      	movs	r2, #1
 8000836:	4013      	ands	r3, r2
 8000838:	d006      	beq.n	8000848 <Set_Page+0x90>
		HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, SET);
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <Set_Page+0xf8>)
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	0018      	movs	r0, r3
 8000842:	f001 ffaf 	bl	80027a4 <HAL_GPIO_WritePin>
 8000846:	e005      	b.n	8000854 <Set_Page+0x9c>
	}
	else{
		HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, RESET);
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <Set_Page+0xf8>)
 800084a:	2200      	movs	r2, #0
 800084c:	2110      	movs	r1, #16
 800084e:	0018      	movs	r0, r3
 8000850:	f001 ffa8 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(X_address & 0b00000010){
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2202      	movs	r2, #2
 800085a:	4013      	ands	r3, r2
 800085c:	d006      	beq.n	800086c <Set_Page+0xb4>
		HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, SET);
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <Set_Page+0xf8>)
 8000860:	2201      	movs	r2, #1
 8000862:	2120      	movs	r1, #32
 8000864:	0018      	movs	r0, r3
 8000866:	f001 ff9d 	bl	80027a4 <HAL_GPIO_WritePin>
 800086a:	e005      	b.n	8000878 <Set_Page+0xc0>
	}
	else{
		HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, RESET);
 800086c:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <Set_Page+0xf8>)
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	0018      	movs	r0, r3
 8000874:	f001 ff96 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(X_address & 0b00000100){
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2204      	movs	r2, #4
 800087e:	4013      	ands	r3, r2
 8000880:	d006      	beq.n	8000890 <Set_Page+0xd8>
		HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, SET);
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <Set_Page+0xf8>)
 8000884:	2201      	movs	r2, #1
 8000886:	2140      	movs	r1, #64	@ 0x40
 8000888:	0018      	movs	r0, r3
 800088a:	f001 ff8b 	bl	80027a4 <HAL_GPIO_WritePin>
 800088e:	e005      	b.n	800089c <Set_Page+0xe4>
	}
	else{
		HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, RESET);
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <Set_Page+0xf8>)
 8000892:	2200      	movs	r2, #0
 8000894:	2140      	movs	r1, #64	@ 0x40
 8000896:	0018      	movs	r0, r3
 8000898:	f001 ff84 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	Delay_us(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 f821 	bl	80008e4 <Delay_us>

	E_Pulse();
 80008a2:	f000 f807 	bl	80008b4 <E_Pulse>

	return 1;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	48000400 	.word	0x48000400

080008b4 <E_Pulse>:


void E_Pulse(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(E_LCD_GPIO_Port, E_LCD_Pin, SET);
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	019b      	lsls	r3, r3, #6
 80008bc:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <E_Pulse+0x2c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	0019      	movs	r1, r3
 80008c2:	f001 ff6f 	bl	80027a4 <HAL_GPIO_WritePin>

	//HAL_Delay(1);
	Delay_us(1);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 f80c 	bl	80008e4 <Delay_us>


	HAL_GPIO_WritePin(E_LCD_GPIO_Port, E_LCD_Pin, RESET);
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	019b      	lsls	r3, r3, #6
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <E_Pulse+0x2c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	0019      	movs	r1, r3
 80008d6:	f001 ff65 	bl	80027a4 <HAL_GPIO_WritePin>
}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	48000400 	.word	0x48000400

080008e4 <Delay_us>:

void Delay_us(volatile uint32_t microseconds)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t delay_loops = (SystemCoreClock / 1000000) * microseconds;
 80008ec:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <Delay_us+0x70>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4919      	ldr	r1, [pc, #100]	@ (8000958 <Delay_us+0x74>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff fc18 	bl	8000128 <__udivsi3>
 80008f8:	0003      	movs	r3, r0
 80008fa:	001a      	movs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4353      	muls	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  //  ciklus overhead kompenzálása egy osztóval
  delay_loops = ( (SystemCoreClock / 1000000) * microseconds ) / 6; // lehet, hogy a 6 helyett más kell majd
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <Delay_us+0x70>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4914      	ldr	r1, [pc, #80]	@ (8000958 <Delay_us+0x74>)
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff fc0d 	bl	8000128 <__udivsi3>
 800090e:	0003      	movs	r3, r0
 8000910:	001a      	movs	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4353      	muls	r3, r2
 8000916:	2106      	movs	r1, #6
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff fc05 	bl	8000128 <__udivsi3>
 800091e:	0003      	movs	r3, r0
 8000920:	60fb      	str	r3, [r7, #12]
  if (delay_loops == 0 && microseconds > 0) delay_loops = 1;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d104      	bne.n	8000932 <Delay_us+0x4e>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <Delay_us+0x4e>
 800092e:	2301      	movs	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]

  for (volatile uint32_t i = 0; i < delay_loops; ++i)
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	e003      	b.n	8000940 <Delay_us+0x5c>
  {
    __NOP();
 8000938:	46c0      	nop			@ (mov r8, r8)
  for (volatile uint32_t i = 0; i < delay_loops; ++i)
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <Delay_us+0x54>
  }
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b004      	add	sp, #16
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	20000004 	.word	0x20000004
 8000958:	000f4240 	.word	0x000f4240

0800095c <Write_Data_Bits>:

void Write_Data_Bits(uint8_t data){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	0002      	movs	r2, r0
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	701a      	strb	r2, [r3, #0]

	if(data & 0b00000001){
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2201      	movs	r2, #1
 800096e:	4013      	ands	r3, r2
 8000970:	d006      	beq.n	8000980 <Write_Data_Bits+0x24>
		HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, SET);
 8000972:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000974:	2201      	movs	r2, #1
 8000976:	2110      	movs	r1, #16
 8000978:	0018      	movs	r0, r3
 800097a:	f001 ff13 	bl	80027a4 <HAL_GPIO_WritePin>
 800097e:	e005      	b.n	800098c <Write_Data_Bits+0x30>
	}
	else{
		HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, RESET);
 8000980:	4b47      	ldr	r3, [pc, #284]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000982:	2200      	movs	r2, #0
 8000984:	2110      	movs	r1, #16
 8000986:	0018      	movs	r0, r3
 8000988:	f001 ff0c 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(data & 0b00000010){
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2202      	movs	r2, #2
 8000992:	4013      	ands	r3, r2
 8000994:	d006      	beq.n	80009a4 <Write_Data_Bits+0x48>
		HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, SET);
 8000996:	4b42      	ldr	r3, [pc, #264]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000998:	2201      	movs	r2, #1
 800099a:	2120      	movs	r1, #32
 800099c:	0018      	movs	r0, r3
 800099e:	f001 ff01 	bl	80027a4 <HAL_GPIO_WritePin>
 80009a2:	e005      	b.n	80009b0 <Write_Data_Bits+0x54>
	}
	else{
		HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, RESET);
 80009a4:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa0 <Write_Data_Bits+0x144>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 fefa 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(data & 0b00000100){
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2204      	movs	r2, #4
 80009b6:	4013      	ands	r3, r2
 80009b8:	d006      	beq.n	80009c8 <Write_Data_Bits+0x6c>
		HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, SET);
 80009ba:	4b39      	ldr	r3, [pc, #228]	@ (8000aa0 <Write_Data_Bits+0x144>)
 80009bc:	2201      	movs	r2, #1
 80009be:	2140      	movs	r1, #64	@ 0x40
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 feef 	bl	80027a4 <HAL_GPIO_WritePin>
 80009c6:	e005      	b.n	80009d4 <Write_Data_Bits+0x78>
	}
	else{
		HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, RESET);
 80009c8:	4b35      	ldr	r3, [pc, #212]	@ (8000aa0 <Write_Data_Bits+0x144>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	@ 0x40
 80009ce:	0018      	movs	r0, r3
 80009d0:	f001 fee8 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(data & 0b00001000){
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2208      	movs	r2, #8
 80009da:	4013      	ands	r3, r2
 80009dc:	d006      	beq.n	80009ec <Write_Data_Bits+0x90>
		HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, SET);
 80009de:	4b30      	ldr	r3, [pc, #192]	@ (8000aa0 <Write_Data_Bits+0x144>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	2180      	movs	r1, #128	@ 0x80
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 fedd 	bl	80027a4 <HAL_GPIO_WritePin>
 80009ea:	e005      	b.n	80009f8 <Write_Data_Bits+0x9c>
	}
	else{
		HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, RESET);
 80009ec:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa0 <Write_Data_Bits+0x144>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	2180      	movs	r1, #128	@ 0x80
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fed6 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(data & 0b00010000){
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2210      	movs	r2, #16
 80009fe:	4013      	ands	r3, r2
 8000a00:	d007      	beq.n	8000a12 <Write_Data_Bits+0xb6>
		HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, SET);
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4826      	ldr	r0, [pc, #152]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	f001 feca 	bl	80027a4 <HAL_GPIO_WritePin>
 8000a10:	e006      	b.n	8000a20 <Write_Data_Bits+0xc4>
	}
	else{
		HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, RESET);
 8000a12:	2380      	movs	r3, #128	@ 0x80
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4822      	ldr	r0, [pc, #136]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	f001 fec2 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(data & 0b00100000){
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2220      	movs	r2, #32
 8000a26:	4013      	ands	r3, r2
 8000a28:	d007      	beq.n	8000a3a <Write_Data_Bits+0xde>
		HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, SET);
 8000a2a:	2380      	movs	r3, #128	@ 0x80
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	481c      	ldr	r0, [pc, #112]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	0019      	movs	r1, r3
 8000a34:	f001 feb6 	bl	80027a4 <HAL_GPIO_WritePin>
 8000a38:	e006      	b.n	8000a48 <Write_Data_Bits+0xec>
	}
	else{
		HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, RESET);
 8000a3a:	2380      	movs	r3, #128	@ 0x80
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	0019      	movs	r1, r3
 8000a44:	f001 feae 	bl	80027a4 <HAL_GPIO_WritePin>
	}

	if(data & 0b01000000){
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2240      	movs	r2, #64	@ 0x40
 8000a4e:	4013      	ands	r3, r2
 8000a50:	d007      	beq.n	8000a62 <Write_Data_Bits+0x106>
		HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, SET);
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	4812      	ldr	r0, [pc, #72]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	f001 fea2 	bl	80027a4 <HAL_GPIO_WritePin>
 8000a60:	e006      	b.n	8000a70 <Write_Data_Bits+0x114>
	}
	else{
		HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, RESET);
 8000a62:	2380      	movs	r3, #128	@ 0x80
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f001 fe9a 	bl	80027a4 <HAL_GPIO_WritePin>
	}
	if(data & 0b10000000){
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	da07      	bge.n	8000a8a <Write_Data_Bits+0x12e>
		HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, SET);
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	4808      	ldr	r0, [pc, #32]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	0019      	movs	r1, r3
 8000a84:	f001 fe8e 	bl	80027a4 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, RESET);
	}

}
 8000a88:	e006      	b.n	8000a98 <Write_Data_Bits+0x13c>
		HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, RESET);
 8000a8a:	2380      	movs	r3, #128	@ 0x80
 8000a8c:	011b      	lsls	r3, r3, #4
 8000a8e:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <Write_Data_Bits+0x144>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	0019      	movs	r1, r3
 8000a94:	f001 fe86 	bl	80027a4 <HAL_GPIO_WritePin>
}
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	48000400 	.word	0x48000400

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f000 fd50 	bl	800154c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f8ba 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 fa8c 	bl	8000fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab4:	f000 fa6c 	bl	8000f90 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ab8:	f000 fa3a 	bl	8000f30 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000abc:	f000 f982 	bl	8000dc4 <MX_TIM1_Init>
  MX_ADC_Init();
 8000ac0:	f000 f918 	bl	8000cf4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

	backlight_init(&htim1); // Initialize and start the backlight PWM
 8000ac4:	4b49      	ldr	r3, [pc, #292]	@ (8000bec <main+0x148>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff fbba 	bl	8000240 <backlight_init>

	backlight_set_brightness(&htim1, brightness_percentage); // Set backlight to 50% brightness
 8000acc:	4b48      	ldr	r3, [pc, #288]	@ (8000bf0 <main+0x14c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b46      	ldr	r3, [pc, #280]	@ (8000bec <main+0x148>)
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff fbc6 	bl	8000268 <backlight_set_brightness>

	Display_On();
 8000adc:	f7ff fd02 	bl	80004e4 <Display_On>
	Clear_Display();
 8000ae0:	f7ff fd70 	bl	80005c4 <Clear_Display>
	LCD_Buffer_Init();
 8000ae4:	f7ff fbee 	bl	80002c4 <LCD_Buffer_Init>

	//Draw_R_Letter();

	HAL_ADCEx_Calibration_Start(&hadc);
 8000ae8:	4b42      	ldr	r3, [pc, #264]	@ (8000bf4 <main+0x150>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 f9a6 	bl	8001e3c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_data, 2);
 8000af0:	4941      	ldr	r1, [pc, #260]	@ (8000bf8 <main+0x154>)
 8000af2:	4b40      	ldr	r3, [pc, #256]	@ (8000bf4 <main+0x150>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fef0 	bl	80018dc <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(InfraLedTr1_GPIO_Port, InfraLedTr1_Pin, SET);
 8000afc:	2390      	movs	r3, #144	@ 0x90
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 fe4d 	bl	80027a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(InfraLedTr2_GPIO_Port, InfraLedTr2_Pin, SET);
 8000b0a:	2390      	movs	r3, #144	@ 0x90
 8000b0c:	05db      	lsls	r3, r3, #23
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2140      	movs	r1, #64	@ 0x40
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fe46 	bl	80027a4 <HAL_GPIO_WritePin>





		LCD_Set_Pixel(10, 20, 1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2114      	movs	r1, #20
 8000b1c:	200a      	movs	r0, #10
 8000b1e:	f7ff fbdf 	bl	80002e0 <LCD_Set_Pixel>
		LCD_Set_Pixel(15, 25, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2119      	movs	r1, #25
 8000b26:	200f      	movs	r0, #15
 8000b28:	f7ff fbda 	bl	80002e0 <LCD_Set_Pixel>
		LCD_Set_Pixel(17, 20, 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2114      	movs	r1, #20
 8000b30:	2011      	movs	r0, #17
 8000b32:	f7ff fbd5 	bl	80002e0 <LCD_Set_Pixel>
		LCD_Set_Pixel(15, 55, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2137      	movs	r1, #55	@ 0x37
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f7ff fbd0 	bl	80002e0 <LCD_Set_Pixel>

		LCD_Refresh_Display();
 8000b40:	f7ff fc3a 	bl	80003b8 <LCD_Refresh_Display>

		HAL_Delay(1500);
 8000b44:	4b2d      	ldr	r3, [pc, #180]	@ (8000bfc <main+0x158>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fd64 	bl	8001614 <HAL_Delay>

		Clear_Display();
 8000b4c:	f7ff fd3a 	bl	80005c4 <Clear_Display>

		HAL_Delay(1500);
 8000b50:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <main+0x158>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 fd5e 	bl	8001614 <HAL_Delay>

//		uint16_t sensor1_raw_value = adc_data[0];
//		uint16_t sensor2_raw_value = adc_data[1];


		if ((adc_data[0] >= SENSOR_PRESSED_THRESHOLD_LOW) && (adc_data[0] <= SENSOR_PRESSED_THRESHOLD_HIGH))
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <main+0x154>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4a28      	ldr	r2, [pc, #160]	@ (8000c00 <main+0x15c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d909      	bls.n	8000b78 <main+0xd4>
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <main+0x154>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4a26      	ldr	r2, [pc, #152]	@ (8000c04 <main+0x160>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d803      	bhi.n	8000b78 <main+0xd4>
		{
			sensor1_state = SENSOR_STATE_PRESSED;
 8000b70:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <main+0x164>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	801a      	strh	r2, [r3, #0]
 8000b76:	e002      	b.n	8000b7e <main+0xda>
		}
		else
		{
			sensor1_state = SENSOR_STATE_NOT_PRESSED;
 8000b78:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <main+0x164>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	801a      	strh	r2, [r3, #0]
		}


		if ((adc_data[1] >= SENSOR_PRESSED_THRESHOLD_LOW) && (adc_data[1] <= SENSOR_PRESSED_THRESHOLD_HIGH))
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <main+0x154>)
 8000b80:	885b      	ldrh	r3, [r3, #2]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	4a1e      	ldr	r2, [pc, #120]	@ (8000c00 <main+0x15c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d909      	bls.n	8000b9e <main+0xfa>
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <main+0x154>)
 8000b8c:	885b      	ldrh	r3, [r3, #2]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4a1c      	ldr	r2, [pc, #112]	@ (8000c04 <main+0x160>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d803      	bhi.n	8000b9e <main+0xfa>
		{
			sensor2_state = SENSOR_STATE_PRESSED;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <main+0x168>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	801a      	strh	r2, [r3, #0]
 8000b9c:	e002      	b.n	8000ba4 <main+0x100>
		}
		else
		{
			sensor2_state = SENSOR_STATE_NOT_PRESSED;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <main+0x168>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	801a      	strh	r2, [r3, #0]
		}

		sprintf(uart_buf, "Szenzor1: %s, Szenzor2: %s ",
		            (sensor1_state == SENSOR_STATE_PRESSED) ? "LENYOMVA" : "NINCS LENYOMVA",
 8000ba4:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <main+0x164>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
		sprintf(uart_buf, "Szenzor1: %s, Szenzor2: %s ",
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d101      	bne.n	8000bb2 <main+0x10e>
 8000bae:	4a18      	ldr	r2, [pc, #96]	@ (8000c10 <main+0x16c>)
 8000bb0:	e000      	b.n	8000bb4 <main+0x110>
 8000bb2:	4a18      	ldr	r2, [pc, #96]	@ (8000c14 <main+0x170>)
		            (sensor2_state == SENSOR_STATE_PRESSED) ? "LENYOMVA" : "NINCS LENYOMVA" );
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <main+0x168>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	b29b      	uxth	r3, r3
		sprintf(uart_buf, "Szenzor1: %s, Szenzor2: %s ",
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d101      	bne.n	8000bc2 <main+0x11e>
 8000bbe:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <main+0x16c>)
 8000bc0:	e000      	b.n	8000bc4 <main+0x120>
 8000bc2:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <main+0x170>)
 8000bc4:	4914      	ldr	r1, [pc, #80]	@ (8000c18 <main+0x174>)
 8000bc6:	4815      	ldr	r0, [pc, #84]	@ (8000c1c <main+0x178>)
 8000bc8:	f004 f822 	bl	8004c10 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <main+0x178>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fa98 	bl	8000104 <strlen>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	2301      	movs	r3, #1
 8000bda:	425b      	negs	r3, r3
 8000bdc:	490f      	ldr	r1, [pc, #60]	@ (8000c1c <main+0x178>)
 8000bde:	4810      	ldr	r0, [pc, #64]	@ (8000c20 <main+0x17c>)
 8000be0:	f003 fb5e 	bl	80042a0 <HAL_UART_Transmit>

		HAL_Delay(100);
 8000be4:	2064      	movs	r0, #100	@ 0x64
 8000be6:	f000 fd15 	bl	8001614 <HAL_Delay>
		LCD_Set_Pixel(10, 20, 1);
 8000bea:	e795      	b.n	8000b18 <main+0x74>
 8000bec:	20000500 	.word	0x20000500
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	2000047c 	.word	0x2000047c
 8000bf8:	200005d0 	.word	0x200005d0
 8000bfc:	000005dc 	.word	0x000005dc
 8000c00:	00000b85 	.word	0x00000b85
 8000c04:	00000ce4 	.word	0x00000ce4
 8000c08:	200005d4 	.word	0x200005d4
 8000c0c:	200005d6 	.word	0x200005d6
 8000c10:	08005560 	.word	0x08005560
 8000c14:	0800556c 	.word	0x0800556c
 8000c18:	0800557c 	.word	0x0800557c
 8000c1c:	200005d8 	.word	0x200005d8
 8000c20:	20000548 	.word	0x20000548

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b099      	sub	sp, #100	@ 0x64
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	242c      	movs	r4, #44	@ 0x2c
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	0018      	movs	r0, r3
 8000c30:	2334      	movs	r3, #52	@ 0x34
 8000c32:	001a      	movs	r2, r3
 8000c34:	2100      	movs	r1, #0
 8000c36:	f004 f80d 	bl	8004c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3a:	231c      	movs	r3, #28
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2310      	movs	r3, #16
 8000c42:	001a      	movs	r2, r3
 8000c44:	2100      	movs	r1, #0
 8000c46:	f004 f805 	bl	8004c54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	231c      	movs	r3, #28
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f003 fffe 	bl	8004c54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000c58:	0021      	movs	r1, r4
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2212      	movs	r2, #18
 8000c5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2201      	movs	r2, #1
 8000c64:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2201      	movs	r2, #1
 8000c6a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2210      	movs	r2, #16
 8000c70:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2210      	movs	r2, #16
 8000c76:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2280      	movs	r2, #128	@ 0x80
 8000c82:	0212      	lsls	r2, r2, #8
 8000c84:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	22a0      	movs	r2, #160	@ 0xa0
 8000c8a:	0392      	lsls	r2, r2, #14
 8000c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2201      	movs	r2, #1
 8000c92:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	0018      	movs	r0, r3
 8000c98:	f001 fdbe 	bl	8002818 <HAL_RCC_OscConfig>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ca0:	f000 fa64 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	211c      	movs	r1, #28
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2202      	movs	r2, #2
 8000cb0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f002 f92e 	bl	8002f24 <HAL_RCC_ClockConfig>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ccc:	f000 fa4e 	bl	800116c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	003b      	movs	r3, r7
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f002 fa8c 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ce8:	f000 fa40 	bl	800116c <Error_Handler>
  }
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b019      	add	sp, #100	@ 0x64
 8000cf2:	bd90      	pop	{r4, r7, pc}

08000cf4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	230c      	movs	r3, #12
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f003 ffa6 	bl	8004c54 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d08:	4b2c      	ldr	r3, [pc, #176]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc0 <MX_ADC_Init+0xcc>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d14:	4b29      	ldr	r3, [pc, #164]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1a:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d20:	4b26      	ldr	r3, [pc, #152]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d26:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d2c:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d32:	4b22      	ldr	r3, [pc, #136]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000d38:	4b20      	ldr	r3, [pc, #128]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d46:	22c2      	movs	r2, #194	@ 0xc2
 8000d48:	32ff      	adds	r2, #255	@ 0xff
 8000d4a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d54:	2224      	movs	r2, #36	@ 0x24
 8000d56:	2101      	movs	r1, #1
 8000d58:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 fc7a 	bl	800165c <HAL_ADC_Init>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f000 f9fe 	bl	800116c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2280      	movs	r2, #128	@ 0x80
 8000d7a:	0152      	lsls	r2, r2, #5
 8000d7c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2206      	movs	r2, #6
 8000d82:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d84:	1d3a      	adds	r2, r7, #4
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fe40 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000d94:	f000 f9ea 	bl	800116c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d9e:	1d3a      	adds	r2, r7, #4
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_ADC_Init+0xc8>)
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 fe33 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000dae:	f000 f9dd 	bl	800116c <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */


  /* USER CODE END ADC_Init 2 */

}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b004      	add	sp, #16
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	2000047c 	.word	0x2000047c
 8000dc0:	40012400 	.word	0x40012400

08000dc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b096      	sub	sp, #88	@ 0x58
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	2348      	movs	r3, #72	@ 0x48
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f003 ff3d 	bl	8004c54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	2340      	movs	r3, #64	@ 0x40
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	2308      	movs	r3, #8
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f003 ff35 	bl	8004c54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	2324      	movs	r3, #36	@ 0x24
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	0018      	movs	r0, r3
 8000df0:	231c      	movs	r3, #28
 8000df2:	001a      	movs	r2, r3
 8000df4:	2100      	movs	r1, #0
 8000df6:	f003 ff2d 	bl	8004c54 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	2320      	movs	r3, #32
 8000e00:	001a      	movs	r2, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	f003 ff26 	bl	8004c54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e08:	4b46      	ldr	r3, [pc, #280]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e0a:	4a47      	ldr	r2, [pc, #284]	@ (8000f28 <MX_TIM1_Init+0x164>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e0e:	4b45      	ldr	r3, [pc, #276]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b43      	ldr	r3, [pc, #268]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e1a:	4b42      	ldr	r3, [pc, #264]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e1c:	4a43      	ldr	r2, [pc, #268]	@ (8000f2c <MX_TIM1_Init+0x168>)
 8000e1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b40      	ldr	r3, [pc, #256]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e26:	4b3f      	ldr	r3, [pc, #252]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e32:	4b3c      	ldr	r3, [pc, #240]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f002 fae1 	bl	80033fc <HAL_TIM_Base_Init>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000e3e:	f000 f995 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e42:	2148      	movs	r1, #72	@ 0x48
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	0152      	lsls	r2, r2, #5
 8000e4a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e4c:	187a      	adds	r2, r7, r1
 8000e4e:	4b35      	ldr	r3, [pc, #212]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f002 fcf8 	bl	8003848 <HAL_TIM_ConfigClockSource>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000e5c:	f000 f986 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e60:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f002 fb1a 	bl	800349c <HAL_TIM_PWM_Init>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000e6c:	f000 f97e 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2140      	movs	r1, #64	@ 0x40
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e7e:	187a      	adds	r2, r7, r1
 8000e80:	4b28      	ldr	r3, [pc, #160]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f003 f8fb 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000e8e:	f000 f96d 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e92:	2124      	movs	r1, #36	@ 0x24
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2260      	movs	r2, #96	@ 0x60
 8000e98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ebe:	1879      	adds	r1, r7, r1
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f002 fbf9 	bl	80036bc <HAL_TIM_PWM_ConfigChannel>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000ece:	f000 f94d 	bl	800116c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	0192      	lsls	r2, r2, #6
 8000ef6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000efe:	1d3a      	adds	r2, r7, #4
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000f02:	0011      	movs	r1, r2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f003 f919 	bl	800413c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000f0e:	f000 f92d 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f12:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <MX_TIM1_Init+0x160>)
 8000f14:	0018      	movs	r0, r3
 8000f16:	f000 f9f7 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b016      	add	sp, #88	@ 0x58
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	20000500 	.word	0x20000500
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	0000ffff 	.word	0x0000ffff

08000f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f36:	4a15      	ldr	r2, [pc, #84]	@ (8000f8c <MX_USART2_UART_Init+0x5c>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f3c:	22e1      	movs	r2, #225	@ 0xe1
 8000f3e:	0252      	lsls	r2, r2, #9
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f72:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f74:	0018      	movs	r0, r3
 8000f76:	f003 f93f 	bl	80041f8 <HAL_UART_Init>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f7e:	f000 f8f5 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000548 	.word	0x20000548
 8000f8c:	40004400 	.word	0x40004400

08000f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_DMA_Init+0x38>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_DMA_Init+0x38>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_DMA_Init+0x38>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2009      	movs	r0, #9
 8000fb4:	f001 f896 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000fb8:	2009      	movs	r0, #9
 8000fba:	f001 f8a8 	bl	800210e <HAL_NVIC_EnableIRQ>

}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	40021000 	.word	0x40021000

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b08b      	sub	sp, #44	@ 0x2c
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	2414      	movs	r4, #20
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	2314      	movs	r3, #20
 8000fda:	001a      	movs	r2, r3
 8000fdc:	2100      	movs	r1, #0
 8000fde:	f003 fe39 	bl	8004c54 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b47      	ldr	r3, [pc, #284]	@ (8001100 <MX_GPIO_Init+0x134>)
 8000fe4:	695a      	ldr	r2, [r3, #20]
 8000fe6:	4b46      	ldr	r3, [pc, #280]	@ (8001100 <MX_GPIO_Init+0x134>)
 8000fe8:	2180      	movs	r1, #128	@ 0x80
 8000fea:	0309      	lsls	r1, r1, #12
 8000fec:	430a      	orrs	r2, r1
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <MX_GPIO_Init+0x134>)
 8000ff2:	695a      	ldr	r2, [r3, #20]
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	031b      	lsls	r3, r3, #12
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffe:	4b40      	ldr	r3, [pc, #256]	@ (8001100 <MX_GPIO_Init+0x134>)
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	4b3f      	ldr	r3, [pc, #252]	@ (8001100 <MX_GPIO_Init+0x134>)
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	03c9      	lsls	r1, r1, #15
 8001008:	430a      	orrs	r2, r1
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	4b3c      	ldr	r3, [pc, #240]	@ (8001100 <MX_GPIO_Init+0x134>)
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	03db      	lsls	r3, r3, #15
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <MX_GPIO_Init+0x134>)
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	4b38      	ldr	r3, [pc, #224]	@ (8001100 <MX_GPIO_Init+0x134>)
 8001020:	2180      	movs	r1, #128	@ 0x80
 8001022:	0289      	lsls	r1, r1, #10
 8001024:	430a      	orrs	r2, r1
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	4b35      	ldr	r3, [pc, #212]	@ (8001100 <MX_GPIO_Init+0x134>)
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	029b      	lsls	r3, r3, #10
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b32      	ldr	r3, [pc, #200]	@ (8001100 <MX_GPIO_Init+0x134>)
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <MX_GPIO_Init+0x134>)
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	02c9      	lsls	r1, r1, #11
 8001040:	430a      	orrs	r2, r1
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	4b2e      	ldr	r3, [pc, #184]	@ (8001100 <MX_GPIO_Init+0x134>)
 8001046:	695a      	ldr	r2, [r3, #20]
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	02db      	lsls	r3, r3, #11
 800104c:	4013      	ands	r3, r2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Dir_R_W_LCD_Pin|InfraLedTr1_Pin|InfraLedTr2_Pin, GPIO_PIN_RESET);
 8001052:	2390      	movs	r3, #144	@ 0x90
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	2200      	movs	r2, #0
 8001058:	2170      	movs	r1, #112	@ 0x70
 800105a:	0018      	movs	r0, r3
 800105c:	f001 fba2 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_LCD_Pin|CS2_LCD_Pin|_RST_LCD_Pin, GPIO_PIN_SET);
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <MX_GPIO_Init+0x138>)
 8001062:	2201      	movs	r2, #1
 8001064:	2107      	movs	r1, #7
 8001066:	0018      	movs	r0, r3
 8001068:	f001 fb9c 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB6_LCD_Pin|DB7_LCD_Pin|D_I_LCD_Pin|E_LCD_Pin
 800106c:	4926      	ldr	r1, [pc, #152]	@ (8001108 <MX_GPIO_Init+0x13c>)
 800106e:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <MX_GPIO_Init+0x138>)
 8001070:	2200      	movs	r2, #0
 8001072:	0018      	movs	r0, r3
 8001074:	f001 fb96 	bl	80027a4 <HAL_GPIO_WritePin>
                          |DB0_LCD_Pin|DB1_LCD_Pin|DB2_LCD_Pin|DB3_LCD_Pin
                          |DB4_LCD_Pin|DB5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001078:	193b      	adds	r3, r7, r4
 800107a:	2280      	movs	r2, #128	@ 0x80
 800107c:	0192      	lsls	r2, r2, #6
 800107e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001080:	193b      	adds	r3, r7, r4
 8001082:	2284      	movs	r2, #132	@ 0x84
 8001084:	0392      	lsls	r2, r2, #14
 8001086:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	193b      	adds	r3, r7, r4
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800108e:	193b      	adds	r3, r7, r4
 8001090:	4a1e      	ldr	r2, [pc, #120]	@ (800110c <MX_GPIO_Init+0x140>)
 8001092:	0019      	movs	r1, r3
 8001094:	0010      	movs	r0, r2
 8001096:	f001 fa0d 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dir_R_W_LCD_Pin InfraLedTr1_Pin InfraLedTr2_Pin */
  GPIO_InitStruct.Pin = Dir_R_W_LCD_Pin|InfraLedTr1_Pin|InfraLedTr2_Pin;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2270      	movs	r2, #112	@ 0x70
 800109e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2201      	movs	r2, #1
 80010a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	193a      	adds	r2, r7, r4
 80010b4:	2390      	movs	r3, #144	@ 0x90
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 f9fa 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_LCD_Pin CS2_LCD_Pin _RST_LCD_Pin DB6_LCD_Pin
                           DB7_LCD_Pin D_I_LCD_Pin E_LCD_Pin DB0_LCD_Pin
                           DB1_LCD_Pin DB2_LCD_Pin DB3_LCD_Pin DB4_LCD_Pin
                           DB5_LCD_Pin */
  GPIO_InitStruct.Pin = CS1_LCD_Pin|CS2_LCD_Pin|_RST_LCD_Pin|DB6_LCD_Pin
 80010c0:	0021      	movs	r1, r4
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	4a12      	ldr	r2, [pc, #72]	@ (8001110 <MX_GPIO_Init+0x144>)
 80010c6:	601a      	str	r2, [r3, #0]
                          |DB7_LCD_Pin|D_I_LCD_Pin|E_LCD_Pin|DB0_LCD_Pin
                          |DB1_LCD_Pin|DB2_LCD_Pin|DB3_LCD_Pin|DB4_LCD_Pin
                          |DB5_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2201      	movs	r2, #1
 80010cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <MX_GPIO_Init+0x138>)
 80010de:	0019      	movs	r1, r3
 80010e0:	0010      	movs	r0, r2
 80010e2:	f001 f9e7 	bl	80024b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2007      	movs	r0, #7
 80010ec:	f000 fffa 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80010f0:	2007      	movs	r0, #7
 80010f2:	f001 f80c 	bl	800210e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b00b      	add	sp, #44	@ 0x2c
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400
 8001108:	00003ff0 	.word	0x00003ff0
 800110c:	48000800 	.word	0x48000800
 8001110:	00003ff7 	.word	0x00003ff7

08001114 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	0002      	movs	r2, r0
 800111c:	1dbb      	adds	r3, r7, #6
 800111e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == B1_Pin){
 8001120:	1dbb      	adds	r3, r7, #6
 8001122:	881a      	ldrh	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	019b      	lsls	r3, r3, #6
 8001128:	429a      	cmp	r2, r3
 800112a:	d117      	bne.n	800115c <HAL_GPIO_EXTI_Callback+0x48>
		if(brightness_percentage >= 100){
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x50>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b63      	cmp	r3, #99	@ 0x63
 8001134:	d903      	bls.n	800113e <HAL_GPIO_EXTI_Callback+0x2a>
			brightness_percentage = 20;
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x50>)
 8001138:	2214      	movs	r2, #20
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e006      	b.n	800114c <HAL_GPIO_EXTI_Callback+0x38>
		}
		else{
			brightness_percentage += 20;
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x50>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3314      	adds	r3, #20
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x50>)
 800114a:	701a      	strb	r2, [r3, #0]
		}

		backlight_set_brightness(&htim1, brightness_percentage);
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x50>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x54>)
 8001154:	0011      	movs	r1, r2
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff f886 	bl	8000268 <backlight_set_brightness>
	}
}
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000500 	.word	0x20000500

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	e7fd      	b.n	8001174 <Error_Handler+0x8>

08001178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_MspInit+0x44>)
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_MspInit+0x44>)
 8001184:	2101      	movs	r1, #1
 8001186:	430a      	orrs	r2, r1
 8001188:	619a      	str	r2, [r3, #24]
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <HAL_MspInit+0x44>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2201      	movs	r2, #1
 8001190:	4013      	ands	r3, r2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_MspInit+0x44>)
 8001198:	69da      	ldr	r2, [r3, #28]
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_MspInit+0x44>)
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	0549      	lsls	r1, r1, #21
 80011a0:	430a      	orrs	r2, r1
 80011a2:	61da      	str	r2, [r3, #28]
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_MspInit+0x44>)
 80011a6:	69da      	ldr	r2, [r3, #28]
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	055b      	lsls	r3, r3, #21
 80011ac:	4013      	ands	r3, r2
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	40021000 	.word	0x40021000

080011c0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b08b      	sub	sp, #44	@ 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	2414      	movs	r4, #20
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	0018      	movs	r0, r3
 80011ce:	2314      	movs	r3, #20
 80011d0:	001a      	movs	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f003 fd3e 	bl	8004c54 <memset>
  if(hadc->Instance==ADC1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a35      	ldr	r2, [pc, #212]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d163      	bne.n	80012aa <HAL_ADC_MspInit+0xea>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e2:	4b35      	ldr	r3, [pc, #212]	@ (80012b8 <HAL_ADC_MspInit+0xf8>)
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <HAL_ADC_MspInit+0xf8>)
 80011e8:	2180      	movs	r1, #128	@ 0x80
 80011ea:	0089      	lsls	r1, r1, #2
 80011ec:	430a      	orrs	r2, r1
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <HAL_ADC_MspInit+0xf8>)
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b2e      	ldr	r3, [pc, #184]	@ (80012b8 <HAL_ADC_MspInit+0xf8>)
 8001200:	695a      	ldr	r2, [r3, #20]
 8001202:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <HAL_ADC_MspInit+0xf8>)
 8001204:	2180      	movs	r1, #128	@ 0x80
 8001206:	0289      	lsls	r1, r1, #10
 8001208:	430a      	orrs	r2, r1
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_ADC_MspInit+0xf8>)
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = Sens1_Pin|Sens2_Pin;
 800121a:	193b      	adds	r3, r7, r4
 800121c:	2203      	movs	r2, #3
 800121e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001220:	193b      	adds	r3, r7, r4
 8001222:	2203      	movs	r2, #3
 8001224:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	193b      	adds	r3, r7, r4
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	193a      	adds	r2, r7, r4
 800122e:	2390      	movs	r3, #144	@ 0x90
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f001 f93d 	bl	80024b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 800123c:	4a20      	ldr	r2, [pc, #128]	@ (80012c0 <HAL_ADC_MspInit+0x100>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001240:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 8001254:	2280      	movs	r2, #128	@ 0x80
 8001256:	0052      	lsls	r2, r2, #1
 8001258:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 800125c:	2280      	movs	r2, #128	@ 0x80
 800125e:	00d2      	lsls	r2, r2, #3
 8001260:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001262:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 8001264:	2220      	movs	r2, #32
 8001266:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 8001270:	0018      	movs	r0, r3
 8001272:	f000 ff69 	bl	8002148 <HAL_DMA_Init>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d001      	beq.n	800127e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800127a:	f7ff ff77 	bl	800116c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 800127e:	4a11      	ldr	r2, [pc, #68]	@ (80012c4 <HAL_ADC_MspInit+0x104>)
 8001280:	23a8      	movs	r3, #168	@ 0xa8
 8001282:	58d3      	ldr	r3, [r2, r3]
 8001284:	490f      	ldr	r1, [pc, #60]	@ (80012c4 <HAL_ADC_MspInit+0x104>)
 8001286:	220f      	movs	r2, #15
 8001288:	4393      	bics	r3, r2
 800128a:	22a8      	movs	r2, #168	@ 0xa8
 800128c:	508b      	str	r3, [r1, r2]
 800128e:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <HAL_ADC_MspInit+0x104>)
 8001290:	23a8      	movs	r3, #168	@ 0xa8
 8001292:	58d3      	ldr	r3, [r2, r3]
 8001294:	490b      	ldr	r1, [pc, #44]	@ (80012c4 <HAL_ADC_MspInit+0x104>)
 8001296:	2201      	movs	r2, #1
 8001298:	4313      	orrs	r3, r2
 800129a:	22a8      	movs	r2, #168	@ 0xa8
 800129c:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 80012a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <HAL_ADC_MspInit+0xfc>)
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b00b      	add	sp, #44	@ 0x2c
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	40012400 	.word	0x40012400
 80012b8:	40021000 	.word	0x40021000
 80012bc:	200004bc 	.word	0x200004bc
 80012c0:	40020008 	.word	0x40020008
 80012c4:	40020000 	.word	0x40020000

080012c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <HAL_TIM_Base_MspInit+0x38>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10d      	bne.n	80012f6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_TIM_Base_MspInit+0x3c>)
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <HAL_TIM_Base_MspInit+0x3c>)
 80012e0:	2180      	movs	r1, #128	@ 0x80
 80012e2:	0109      	lsls	r1, r1, #4
 80012e4:	430a      	orrs	r2, r1
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_TIM_Base_MspInit+0x3c>)
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	40012c00 	.word	0x40012c00
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b089      	sub	sp, #36	@ 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	240c      	movs	r4, #12
 8001312:	193b      	adds	r3, r7, r4
 8001314:	0018      	movs	r0, r3
 8001316:	2314      	movs	r3, #20
 8001318:	001a      	movs	r2, r3
 800131a:	2100      	movs	r1, #0
 800131c:	f003 fc9a 	bl	8004c54 <memset>
  if(htim->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a16      	ldr	r2, [pc, #88]	@ (8001380 <HAL_TIM_MspPostInit+0x78>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d125      	bne.n	8001376 <HAL_TIM_MspPostInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <HAL_TIM_MspPostInit+0x7c>)
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_TIM_MspPostInit+0x7c>)
 8001330:	2180      	movs	r1, #128	@ 0x80
 8001332:	0289      	lsls	r1, r1, #10
 8001334:	430a      	orrs	r2, r1
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_TIM_MspPostInit+0x7c>)
 800133a:	695a      	ldr	r2, [r3, #20]
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	029b      	lsls	r3, r3, #10
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_LED_LCD_Pin;
 8001346:	193b      	adds	r3, r7, r4
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	0052      	lsls	r2, r2, #1
 800134c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	0021      	movs	r1, r4
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2202      	movs	r2, #2
 8001354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2202      	movs	r2, #2
 8001366:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_LED_LCD_GPIO_Port, &GPIO_InitStruct);
 8001368:	187a      	adds	r2, r7, r1
 800136a:	2390      	movs	r3, #144	@ 0x90
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	0011      	movs	r1, r2
 8001370:	0018      	movs	r0, r3
 8001372:	f001 f89f 	bl	80024b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b009      	add	sp, #36	@ 0x24
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	40012c00 	.word	0x40012c00
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b08b      	sub	sp, #44	@ 0x2c
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	2414      	movs	r4, #20
 8001392:	193b      	adds	r3, r7, r4
 8001394:	0018      	movs	r0, r3
 8001396:	2314      	movs	r3, #20
 8001398:	001a      	movs	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	f003 fc5a 	bl	8004c54 <memset>
  if(huart->Instance==USART2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <HAL_UART_MspInit+0x90>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d132      	bne.n	8001410 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_UART_MspInit+0x94>)
 80013ac:	69da      	ldr	r2, [r3, #28]
 80013ae:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_UART_MspInit+0x94>)
 80013b0:	2180      	movs	r1, #128	@ 0x80
 80013b2:	0289      	lsls	r1, r1, #10
 80013b4:	430a      	orrs	r2, r1
 80013b6:	61da      	str	r2, [r3, #28]
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <HAL_UART_MspInit+0x94>)
 80013ba:	69da      	ldr	r2, [r3, #28]
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_UART_MspInit+0x94>)
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_UART_MspInit+0x94>)
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	0289      	lsls	r1, r1, #10
 80013d0:	430a      	orrs	r2, r1
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_UART_MspInit+0x94>)
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013e2:	0021      	movs	r1, r4
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2202      	movs	r2, #2
 80013ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2201      	movs	r2, #1
 8001400:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	187a      	adds	r2, r7, r1
 8001404:	2390      	movs	r3, #144	@ 0x90
 8001406:	05db      	lsls	r3, r3, #23
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f001 f852 	bl	80024b4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001410:	46c0      	nop			@ (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b00b      	add	sp, #44	@ 0x2c
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	40004400 	.word	0x40004400
 800141c:	40021000 	.word	0x40021000

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	46c0      	nop			@ (mov r8, r8)
 8001426:	e7fd      	b.n	8001424 <NMI_Handler+0x4>

08001428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	e7fd      	b.n	800142c <HardFault_Handler+0x4>

08001430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f8c8 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	019b      	lsls	r3, r3, #6
 800145a:	0018      	movs	r0, r3
 800145c:	f001 f9c0 	bl	80027e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001460:	46c0      	nop			@ (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <DMA1_Ch1_IRQHandler+0x14>)
 800146e:	0018      	movs	r0, r3
 8001470:	f000 ff18 	bl	80022a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	200004bc 	.word	0x200004bc

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	18d3      	adds	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f003 fbd8 	bl	8004c64 <__errno>
 80014b4:	0003      	movs	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	425b      	negs	r3, r3
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	18d2      	adds	r2, r2, r3
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <_sbrk+0x64>)
 80014d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b006      	add	sp, #24
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20008000 	.word	0x20008000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	2000063c 	.word	0x2000063c
 80014e8:	20000790 	.word	0x20000790

080014ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80014f0:	46c0      	nop			@ (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f8:	480d      	ldr	r0, [pc, #52]	@ (8001530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014fc:	f7ff fff6 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <LoopForever+0x6>)
  ldr r1, =_edata
 8001502:	490d      	ldr	r1, [pc, #52]	@ (8001538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <LoopForever+0xe>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001518:	4c0a      	ldr	r4, [pc, #40]	@ (8001544 <LoopForever+0x16>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001526:	f003 fba3 	bl	8004c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800152a:	f7ff fabb 	bl	8000aa4 <main>

0800152e <LoopForever>:

LoopForever:
    b LoopForever
 800152e:	e7fe      	b.n	800152e <LoopForever>
  ldr   r0, =_estack
 8001530:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800153c:	0800560c 	.word	0x0800560c
  ldr r2, =_sbss
 8001540:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001544:	2000078c 	.word	0x2000078c

08001548 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC1_COMP_IRQHandler>
	...

0800154c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <HAL_Init+0x24>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_Init+0x24>)
 8001556:	2110      	movs	r1, #16
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800155c:	2000      	movs	r0, #0
 800155e:	f000 f809 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001562:	f7ff fe09 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	40022000 	.word	0x40022000

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <HAL_InitTick+0x5c>)
 800157e:	681c      	ldr	r4, [r3, #0]
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <HAL_InitTick+0x60>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	0019      	movs	r1, r3
 8001586:	23fa      	movs	r3, #250	@ 0xfa
 8001588:	0098      	lsls	r0, r3, #2
 800158a:	f7fe fdcd 	bl	8000128 <__udivsi3>
 800158e:	0003      	movs	r3, r0
 8001590:	0019      	movs	r1, r3
 8001592:	0020      	movs	r0, r4
 8001594:	f7fe fdc8 	bl	8000128 <__udivsi3>
 8001598:	0003      	movs	r3, r0
 800159a:	0018      	movs	r0, r3
 800159c:	f000 fdc7 	bl	800212e <HAL_SYSTICK_Config>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e00f      	b.n	80015c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d80b      	bhi.n	80015c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	2301      	movs	r3, #1
 80015b2:	425b      	negs	r3, r3
 80015b4:	2200      	movs	r2, #0
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 fd94 	bl	80020e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_InitTick+0x64>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b003      	add	sp, #12
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	20000004 	.word	0x20000004
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_IncTick+0x1c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	001a      	movs	r2, r3
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <HAL_IncTick+0x20>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	18d2      	adds	r2, r2, r3
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <HAL_IncTick+0x20>)
 80015ee:	601a      	str	r2, [r3, #0]
}
 80015f0:	46c0      	nop			@ (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	20000640 	.word	0x20000640

08001600 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b02      	ldr	r3, [pc, #8]	@ (8001610 <HAL_GetTick+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	20000640 	.word	0x20000640

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff fff0 	bl	8001600 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	001a      	movs	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	189b      	adds	r3, r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	f7ff ffe0 	bl	8001600 <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b004      	add	sp, #16
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	2000000c 	.word	0x2000000c

0800165c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	230f      	movs	r3, #15
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e125      	b.n	80018c6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10a      	bne.n	8001698 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2234      	movs	r2, #52	@ 0x34
 800168c:	2100      	movs	r1, #0
 800168e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	0018      	movs	r0, r3
 8001694:	f7ff fd94 	bl	80011c0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169c:	2210      	movs	r2, #16
 800169e:	4013      	ands	r3, r2
 80016a0:	d000      	beq.n	80016a4 <HAL_ADC_Init+0x48>
 80016a2:	e103      	b.n	80018ac <HAL_ADC_Init+0x250>
 80016a4:	230f      	movs	r3, #15
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d000      	beq.n	80016b0 <HAL_ADC_Init+0x54>
 80016ae:	e0fd      	b.n	80018ac <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2204      	movs	r2, #4
 80016b8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80016ba:	d000      	beq.n	80016be <HAL_ADC_Init+0x62>
 80016bc:	e0f6      	b.n	80018ac <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c2:	4a83      	ldr	r2, [pc, #524]	@ (80018d0 <HAL_ADC_Init+0x274>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	2202      	movs	r2, #2
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2203      	movs	r2, #3
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d112      	bne.n	8001702 <HAL_ADC_Init+0xa6>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2201      	movs	r2, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d009      	beq.n	80016fe <HAL_ADC_Init+0xa2>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	401a      	ands	r2, r3
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_Init+0xa6>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_ADC_Init+0xa8>
 8001702:	2300      	movs	r3, #0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d116      	bne.n	8001736 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2218      	movs	r2, #24
 8001710:	4393      	bics	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	0899      	lsrs	r1, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4964      	ldr	r1, [pc, #400]	@ (80018d4 <HAL_ADC_Init+0x278>)
 8001742:	400a      	ands	r2, r1
 8001744:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7e1b      	ldrb	r3, [r3, #24]
 800174a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7e5b      	ldrb	r3, [r3, #25]
 8001750:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001752:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e9b      	ldrb	r3, [r3, #26]
 8001758:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800175a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001760:	2b01      	cmp	r3, #1
 8001762:	d002      	beq.n	800176a <HAL_ADC_Init+0x10e>
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	015b      	lsls	r3, r3, #5
 8001768:	e000      	b.n	800176c <HAL_ADC_Init+0x110>
 800176a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800176c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001772:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d101      	bne.n	8001780 <HAL_ADC_Init+0x124>
 800177c:	2304      	movs	r3, #4
 800177e:	e000      	b.n	8001782 <HAL_ADC_Init+0x126>
 8001780:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001782:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2124      	movs	r1, #36	@ 0x24
 8001788:	5c5b      	ldrb	r3, [r3, r1]
 800178a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800178c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	4313      	orrs	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7edb      	ldrb	r3, [r3, #27]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d115      	bne.n	80017c8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e9b      	ldrb	r3, [r3, #26]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	e00b      	b.n	80017c8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b4:	2220      	movs	r2, #32
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c0:	2201      	movs	r2, #1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69da      	ldr	r2, [r3, #28]
 80017cc:	23c2      	movs	r3, #194	@ 0xc2
 80017ce:	33ff      	adds	r3, #255	@ 0xff
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d007      	beq.n	80017e4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80017dc:	4313      	orrs	r3, r2
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68d9      	ldr	r1, [r3, #12]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	055b      	lsls	r3, r3, #21
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d01b      	beq.n	8001838 <HAL_ADC_Init+0x1dc>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	2b01      	cmp	r3, #1
 8001806:	d017      	beq.n	8001838 <HAL_ADC_Init+0x1dc>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	2b02      	cmp	r3, #2
 800180e:	d013      	beq.n	8001838 <HAL_ADC_Init+0x1dc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001814:	2b03      	cmp	r3, #3
 8001816:	d00f      	beq.n	8001838 <HAL_ADC_Init+0x1dc>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00b      	beq.n	8001838 <HAL_ADC_Init+0x1dc>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	2b05      	cmp	r3, #5
 8001826:	d007      	beq.n	8001838 <HAL_ADC_Init+0x1dc>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	2b06      	cmp	r3, #6
 800182e:	d003      	beq.n	8001838 <HAL_ADC_Init+0x1dc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	2b07      	cmp	r3, #7
 8001836:	d112      	bne.n	800185e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2107      	movs	r1, #7
 8001844:	438a      	bics	r2, r1
 8001846:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6959      	ldr	r1, [r3, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	2207      	movs	r2, #7
 8001854:	401a      	ands	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a1c      	ldr	r2, [pc, #112]	@ (80018d8 <HAL_ADC_Init+0x27c>)
 8001866:	4013      	ands	r3, r2
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	429a      	cmp	r2, r3
 800186c:	d10b      	bne.n	8001886 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001878:	2203      	movs	r2, #3
 800187a:	4393      	bics	r3, r2
 800187c:	2201      	movs	r2, #1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001884:	e01c      	b.n	80018c0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188a:	2212      	movs	r2, #18
 800188c:	4393      	bics	r3, r2
 800188e:	2210      	movs	r2, #16
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189a:	2201      	movs	r2, #1
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80018a2:	230f      	movs	r3, #15
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018aa:	e009      	b.n	80018c0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b0:	2210      	movs	r2, #16
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80018b8:	230f      	movs	r3, #15
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018c0:	230f      	movs	r3, #15
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	781b      	ldrb	r3, [r3, #0]
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	fffffefd 	.word	0xfffffefd
 80018d4:	fffe0219 	.word	0xfffe0219
 80018d8:	833fffe7 	.word	0x833fffe7

080018dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e8:	2317      	movs	r3, #23
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2204      	movs	r2, #4
 80018f8:	4013      	ands	r3, r2
 80018fa:	d15e      	bne.n	80019ba <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2234      	movs	r2, #52	@ 0x34
 8001900:	5c9b      	ldrb	r3, [r3, r2]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_ADC_Start_DMA+0x2e>
 8001906:	2302      	movs	r3, #2
 8001908:	e05e      	b.n	80019c8 <HAL_ADC_Start_DMA+0xec>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2234      	movs	r2, #52	@ 0x34
 800190e:	2101      	movs	r1, #1
 8001910:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	7e5b      	ldrb	r3, [r3, #25]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d007      	beq.n	800192a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800191a:	2317      	movs	r3, #23
 800191c:	18fc      	adds	r4, r7, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	0018      	movs	r0, r3
 8001922:	f000 f983 	bl	8001c2c <ADC_Enable>
 8001926:	0003      	movs	r3, r0
 8001928:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800192a:	2317      	movs	r3, #23
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d146      	bne.n	80019c2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001938:	4a25      	ldr	r2, [pc, #148]	@ (80019d0 <HAL_ADC_Start_DMA+0xf4>)
 800193a:	4013      	ands	r3, r2
 800193c:	2280      	movs	r2, #128	@ 0x80
 800193e:	0052      	lsls	r2, r2, #1
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2234      	movs	r2, #52	@ 0x34
 8001950:	2100      	movs	r1, #0
 8001952:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	4a1e      	ldr	r2, [pc, #120]	@ (80019d4 <HAL_ADC_Start_DMA+0xf8>)
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001960:	4a1d      	ldr	r2, [pc, #116]	@ (80019d8 <HAL_ADC_Start_DMA+0xfc>)
 8001962:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	4a1c      	ldr	r2, [pc, #112]	@ (80019dc <HAL_ADC_Start_DMA+0x100>)
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	221c      	movs	r2, #28
 8001972:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2110      	movs	r1, #16
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3340      	adds	r3, #64	@ 0x40
 800199e:	0019      	movs	r1, r3
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f000 fc18 	bl	80021d8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2104      	movs	r1, #4
 80019b4:	430a      	orrs	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e003      	b.n	80019c2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019ba:	2317      	movs	r3, #23
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2202      	movs	r2, #2
 80019c0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019c2:	2317      	movs	r3, #23
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	781b      	ldrb	r3, [r3, #0]
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b007      	add	sp, #28
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	fffff0fe 	.word	0xfffff0fe
 80019d4:	08001d35 	.word	0x08001d35
 80019d8:	08001de9 	.word	0x08001de9
 80019dc:	08001e07 	.word	0x08001e07

080019e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019f8:	46c0      	nop			@ (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a08:	46c0      	nop			@ (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	055b      	lsls	r3, r3, #21
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d011      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x46>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d00d      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x46>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d009      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x46>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d005      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x46>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d001      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x46>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2234      	movs	r2, #52	@ 0x34
 8001a5a:	5c9b      	ldrb	r3, [r3, r2]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x54>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e0d0      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1f6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2234      	movs	r2, #52	@ 0x34
 8001a68:	2101      	movs	r1, #1
 8001a6a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2204      	movs	r2, #4
 8001a74:	4013      	ands	r3, r2
 8001a76:	d000      	beq.n	8001a7a <HAL_ADC_ConfigChannel+0x6a>
 8001a78:	e0b4      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a64      	ldr	r2, [pc, #400]	@ (8001c10 <HAL_ADC_ConfigChannel+0x200>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d100      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x76>
 8001a84:	e082      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	409a      	lsls	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	055b      	lsls	r3, r3, #21
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d037      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x108>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d033      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x108>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d02f      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x108>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d02b      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x108>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d027      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x108>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d023      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x108>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	d01f      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x108>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	2b07      	cmp	r3, #7
 8001ade:	d01b      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2107      	movs	r1, #7
 8001aec:	400b      	ands	r3, r1
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d012      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2107      	movs	r1, #7
 8001afe:	438a      	bics	r2, r1
 8001b00:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6959      	ldr	r1, [r3, #20]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	401a      	ands	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d007      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0x120>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b11      	cmp	r3, #17
 8001b26:	d003      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0x120>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b12      	cmp	r3, #18
 8001b2e:	d163      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b30:	4b38      	ldr	r3, [pc, #224]	@ (8001c14 <HAL_ADC_ConfigChannel+0x204>)
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b10      	cmp	r3, #16
 8001b3a:	d009      	beq.n	8001b50 <HAL_ADC_ConfigChannel+0x140>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b11      	cmp	r3, #17
 8001b42:	d102      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x13a>
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	03db      	lsls	r3, r3, #15
 8001b48:	e004      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x144>
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	045b      	lsls	r3, r3, #17
 8001b4e:	e001      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x144>
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	041b      	lsls	r3, r3, #16
 8001b54:	4a2f      	ldr	r2, [pc, #188]	@ (8001c14 <HAL_ADC_ConfigChannel+0x204>)
 8001b56:	430b      	orrs	r3, r1
 8001b58:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b10      	cmp	r3, #16
 8001b60:	d14a      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b62:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_ADC_ConfigChannel+0x208>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	492d      	ldr	r1, [pc, #180]	@ (8001c1c <HAL_ADC_ConfigChannel+0x20c>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7fe fadd 	bl	8000128 <__udivsi3>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	001a      	movs	r2, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	189b      	adds	r3, r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x16e>
 8001b8a:	e035      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	4099      	lsls	r1, r3
 8001b9a:	000b      	movs	r3, r1
 8001b9c:	43d9      	mvns	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d007      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x1ae>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b11      	cmp	r3, #17
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x1ae>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b12      	cmp	r3, #18
 8001bbc:	d11c      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_ADC_ConfigChannel+0x204>)
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d007      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x1ca>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b11      	cmp	r3, #17
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x1c6>
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <HAL_ADC_ConfigChannel+0x210>)
 8001bd4:	e002      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x1cc>
 8001bd6:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <HAL_ADC_ConfigChannel+0x214>)
 8001bd8:	e000      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x1cc>
 8001bda:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <HAL_ADC_ConfigChannel+0x218>)
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <HAL_ADC_ConfigChannel+0x204>)
 8001bde:	400b      	ands	r3, r1
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e009      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be8:	2220      	movs	r2, #32
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2234      	movs	r2, #52	@ 0x34
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001c00:	230f      	movs	r3, #15
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	781b      	ldrb	r3, [r3, #0]
}
 8001c06:	0018      	movs	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b004      	add	sp, #16
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	00001001 	.word	0x00001001
 8001c14:	40012708 	.word	0x40012708
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	000f4240 	.word	0x000f4240
 8001c20:	ffbfffff 	.word	0xffbfffff
 8001c24:	feffffff 	.word	0xfeffffff
 8001c28:	ff7fffff 	.word	0xff7fffff

08001c2c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2203      	movs	r2, #3
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d112      	bne.n	8001c70 <ADC_Enable+0x44>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d009      	beq.n	8001c6c <ADC_Enable+0x40>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	401a      	ands	r2, r3
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d101      	bne.n	8001c70 <ADC_Enable+0x44>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <ADC_Enable+0x46>
 8001c70:	2300      	movs	r3, #0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d152      	bne.n	8001d1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d28 <ADC_Enable+0xfc>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c86:	2210      	movs	r2, #16
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c92:	2201      	movs	r2, #1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e03f      	b.n	8001d1e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cae:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <ADC_Enable+0x100>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	491f      	ldr	r1, [pc, #124]	@ (8001d30 <ADC_Enable+0x104>)
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7fe fa37 	bl	8000128 <__udivsi3>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cbe:	e002      	b.n	8001cc6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f9      	bne.n	8001cc0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ccc:	f7ff fc98 	bl	8001600 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cd4:	e01b      	b.n	8001d0e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cd6:	f7ff fc93 	bl	8001600 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d914      	bls.n	8001d0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2201      	movs	r2, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d00d      	beq.n	8001d0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d02:	2201      	movs	r2, #1
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e007      	b.n	8001d1e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d1dc      	bne.n	8001cd6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b004      	add	sp, #16
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	80000017 	.word	0x80000017
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	000f4240 	.word	0x000f4240

08001d34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d46:	2250      	movs	r2, #80	@ 0x50
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d140      	bne.n	8001dce <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d50:	2280      	movs	r2, #128	@ 0x80
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	23c0      	movs	r3, #192	@ 0xc0
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4013      	ands	r3, r2
 8001d66:	d12d      	bne.n	8001dc4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d129      	bne.n	8001dc4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2208      	movs	r2, #8
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d122      	bne.n	8001dc4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2204      	movs	r2, #4
 8001d86:	4013      	ands	r3, r2
 8001d88:	d110      	bne.n	8001dac <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	210c      	movs	r1, #12
 8001d96:	438a      	bics	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d9e:	4a11      	ldr	r2, [pc, #68]	@ (8001de4 <ADC_DMAConvCplt+0xb0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	2201      	movs	r2, #1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001daa:	e00b      	b.n	8001dc4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db0:	2220      	movs	r2, #32
 8001db2:	431a      	orrs	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff fe0a 	bl	80019e0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001dcc:	e005      	b.n	8001dda <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	4798      	blx	r3
}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	fffffefe 	.word	0xfffffefe

08001de8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fdf9 	bl	80019f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b004      	add	sp, #16
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e18:	2240      	movs	r2, #64	@ 0x40
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e24:	2204      	movs	r2, #4
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7ff fde6 	bl	8001a00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b004      	add	sp, #16
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e44:	2317      	movs	r3, #23
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2234      	movs	r2, #52	@ 0x34
 8001e58:	5c9b      	ldrb	r3, [r3, r2]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADCEx_Calibration_Start+0x26>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e08d      	b.n	8001f7e <HAL_ADCEx_Calibration_Start+0x142>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2234      	movs	r2, #52	@ 0x34
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2203      	movs	r2, #3
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d112      	bne.n	8001e9e <HAL_ADCEx_Calibration_Start+0x62>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d009      	beq.n	8001e9a <HAL_ADCEx_Calibration_Start+0x5e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	401a      	ands	r2, r3
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d101      	bne.n	8001e9e <HAL_ADCEx_Calibration_Start+0x62>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_ADCEx_Calibration_Start+0x64>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d15b      	bne.n	8001f5c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea8:	4a37      	ldr	r2, [pc, #220]	@ (8001f88 <HAL_ADCEx_Calibration_Start+0x14c>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2202      	movs	r2, #2
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2103      	movs	r1, #3
 8001ecc:	438a      	bics	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2180      	movs	r1, #128	@ 0x80
 8001edc:	0609      	lsls	r1, r1, #24
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001ee2:	f7ff fb8d 	bl	8001600 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001eea:	e01d      	b.n	8001f28 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001eec:	f7ff fb88 	bl	8001600 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d916      	bls.n	8001f28 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	0fdb      	lsrs	r3, r3, #31
 8001f02:	07da      	lsls	r2, r3, #31
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	061b      	lsls	r3, r3, #24
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d10d      	bne.n	8001f28 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f10:	2212      	movs	r2, #18
 8001f12:	4393      	bics	r3, r2
 8001f14:	2210      	movs	r2, #16
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2234      	movs	r2, #52	@ 0x34
 8001f20:	2100      	movs	r1, #0
 8001f22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e02a      	b.n	8001f7e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0fdb      	lsrs	r3, r3, #31
 8001f30:	07da      	lsls	r2, r3, #31
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	061b      	lsls	r3, r3, #24
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d0d8      	beq.n	8001eec <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68d9      	ldr	r1, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f4e:	2203      	movs	r2, #3
 8001f50:	4393      	bics	r3, r2
 8001f52:	2201      	movs	r2, #1
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f5a:	e009      	b.n	8001f70 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f60:	2220      	movs	r2, #32
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001f68:	2317      	movs	r3, #23
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2234      	movs	r2, #52	@ 0x34
 8001f74:	2100      	movs	r1, #0
 8001f76:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f78:	2317      	movs	r3, #23
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	fffffefd 	.word	0xfffffefd

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	0002      	movs	r2, r0
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f9e:	d809      	bhi.n	8001fb4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	231f      	movs	r3, #31
 8001fa8:	401a      	ands	r2, r3
 8001faa:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <__NVIC_EnableIRQ+0x30>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
  }
}
 8001fb4:	46c0      	nop			@ (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	1dfb      	adds	r3, r7, #7
 8001fcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fd4:	d828      	bhi.n	8002028 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8002094 <__NVIC_SetPriority+0xd4>)
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	33c0      	adds	r3, #192	@ 0xc0
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	589b      	ldr	r3, [r3, r2]
 8001fe6:	1dfa      	adds	r2, r7, #7
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	0011      	movs	r1, r2
 8001fec:	2203      	movs	r2, #3
 8001fee:	400a      	ands	r2, r1
 8001ff0:	00d2      	lsls	r2, r2, #3
 8001ff2:	21ff      	movs	r1, #255	@ 0xff
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	43d2      	mvns	r2, r2
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	22ff      	movs	r2, #255	@ 0xff
 8002004:	401a      	ands	r2, r3
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	0018      	movs	r0, r3
 800200c:	2303      	movs	r3, #3
 800200e:	4003      	ands	r3, r0
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002014:	481f      	ldr	r0, [pc, #124]	@ (8002094 <__NVIC_SetPriority+0xd4>)
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b25b      	sxtb	r3, r3
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	430a      	orrs	r2, r1
 8002020:	33c0      	adds	r3, #192	@ 0xc0
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002026:	e031      	b.n	800208c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <__NVIC_SetPriority+0xd8>)
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	0019      	movs	r1, r3
 8002030:	230f      	movs	r3, #15
 8002032:	400b      	ands	r3, r1
 8002034:	3b08      	subs	r3, #8
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3306      	adds	r3, #6
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	18d3      	adds	r3, r2, r3
 800203e:	3304      	adds	r3, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1dfa      	adds	r2, r7, #7
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	0011      	movs	r1, r2
 8002048:	2203      	movs	r2, #3
 800204a:	400a      	ands	r2, r1
 800204c:	00d2      	lsls	r2, r2, #3
 800204e:	21ff      	movs	r1, #255	@ 0xff
 8002050:	4091      	lsls	r1, r2
 8002052:	000a      	movs	r2, r1
 8002054:	43d2      	mvns	r2, r2
 8002056:	401a      	ands	r2, r3
 8002058:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	019b      	lsls	r3, r3, #6
 800205e:	22ff      	movs	r2, #255	@ 0xff
 8002060:	401a      	ands	r2, r3
 8002062:	1dfb      	adds	r3, r7, #7
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	0018      	movs	r0, r3
 8002068:	2303      	movs	r3, #3
 800206a:	4003      	ands	r3, r0
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002070:	4809      	ldr	r0, [pc, #36]	@ (8002098 <__NVIC_SetPriority+0xd8>)
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	001c      	movs	r4, r3
 8002078:	230f      	movs	r3, #15
 800207a:	4023      	ands	r3, r4
 800207c:	3b08      	subs	r3, #8
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	430a      	orrs	r2, r1
 8002082:	3306      	adds	r3, #6
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	18c3      	adds	r3, r0, r3
 8002088:	3304      	adds	r3, #4
 800208a:	601a      	str	r2, [r3, #0]
}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b003      	add	sp, #12
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1e5a      	subs	r2, r3, #1
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	045b      	lsls	r3, r3, #17
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d301      	bcc.n	80020b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b0:	2301      	movs	r3, #1
 80020b2:	e010      	b.n	80020d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <SysTick_Config+0x44>)
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	3a01      	subs	r2, #1
 80020ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020bc:	2301      	movs	r3, #1
 80020be:	425b      	negs	r3, r3
 80020c0:	2103      	movs	r1, #3
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff ff7c 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <SysTick_Config+0x44>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <SysTick_Config+0x44>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	210f      	movs	r1, #15
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	1c02      	adds	r2, r0, #0
 80020f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	0011      	movs	r1, r2
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	0002      	movs	r2, r0
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b25b      	sxtb	r3, r3
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff ff33 	bl	8001f8c <__NVIC_EnableIRQ>
}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff ffaf 	bl	800209c <SysTick_Config>
 800213e:	0003      	movs	r3, r0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e036      	b.n	80021cc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2221      	movs	r2, #33	@ 0x21
 8002162:	2102      	movs	r1, #2
 8002164:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4a18      	ldr	r2, [pc, #96]	@ (80021d4 <HAL_DMA_Init+0x8c>)
 8002172:	4013      	ands	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800217e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 f946 	bl	8002440 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2221      	movs	r2, #33	@ 0x21
 80021be:	2101      	movs	r1, #1
 80021c0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b004      	add	sp, #16
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	ffffc00f 	.word	0xffffc00f

080021d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2317      	movs	r3, #23
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	5c9b      	ldrb	r3, [r3, r2]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_DMA_Start_IT+0x24>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e04f      	b.n	800229c <HAL_DMA_Start_IT+0xc4>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	2101      	movs	r1, #1
 8002202:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2221      	movs	r2, #33	@ 0x21
 8002208:	5c9b      	ldrb	r3, [r3, r2]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d13a      	bne.n	8002286 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2221      	movs	r2, #33	@ 0x21
 8002214:	2102      	movs	r1, #2
 8002216:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	438a      	bics	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f8d7 	bl	80023e8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	210e      	movs	r1, #14
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e00f      	b.n	8002274 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	210a      	movs	r1, #10
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2104      	movs	r1, #4
 8002270:	438a      	bics	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2101      	movs	r1, #1
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e007      	b.n	8002296 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800228e:	2317      	movs	r3, #23
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002296:	2317      	movs	r3, #23
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	781b      	ldrb	r3, [r3, #0]
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b006      	add	sp, #24
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	2204      	movs	r2, #4
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	d024      	beq.n	8002316 <HAL_DMA_IRQHandler+0x72>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2204      	movs	r2, #4
 80022d0:	4013      	ands	r3, r2
 80022d2:	d020      	beq.n	8002316 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	4013      	ands	r3, r2
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2104      	movs	r1, #4
 80022ec:	438a      	bics	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	2104      	movs	r1, #4
 80022fa:	4091      	lsls	r1, r2
 80022fc:	000a      	movs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d100      	bne.n	800230a <HAL_DMA_IRQHandler+0x66>
 8002308:	e06a      	b.n	80023e0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	0010      	movs	r0, r2
 8002312:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002314:	e064      	b.n	80023e0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	2202      	movs	r2, #2
 800231c:	409a      	lsls	r2, r3
 800231e:	0013      	movs	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4013      	ands	r3, r2
 8002324:	d02b      	beq.n	800237e <HAL_DMA_IRQHandler+0xda>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2202      	movs	r2, #2
 800232a:	4013      	ands	r3, r2
 800232c:	d027      	beq.n	800237e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2220      	movs	r2, #32
 8002336:	4013      	ands	r3, r2
 8002338:	d10b      	bne.n	8002352 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	210a      	movs	r1, #10
 8002346:	438a      	bics	r2, r1
 8002348:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2221      	movs	r2, #33	@ 0x21
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235a:	2102      	movs	r1, #2
 800235c:	4091      	lsls	r1, r2
 800235e:	000a      	movs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	2100      	movs	r1, #0
 8002368:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	2b00      	cmp	r3, #0
 8002370:	d036      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	0010      	movs	r0, r2
 800237a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800237c:	e030      	b.n	80023e0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	2208      	movs	r2, #8
 8002384:	409a      	lsls	r2, r3
 8002386:	0013      	movs	r3, r2
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4013      	ands	r3, r2
 800238c:	d028      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x13c>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2208      	movs	r2, #8
 8002392:	4013      	ands	r3, r2
 8002394:	d024      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	210e      	movs	r1, #14
 80023a2:	438a      	bics	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ae:	2101      	movs	r1, #1
 80023b0:	4091      	lsls	r1, r2
 80023b2:	000a      	movs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2221      	movs	r2, #33	@ 0x21
 80023c0:	2101      	movs	r1, #1
 80023c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	2100      	movs	r1, #0
 80023ca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	0010      	movs	r0, r2
 80023dc:	4798      	blx	r3
    }
  }
}
 80023de:	e7ff      	b.n	80023e0 <HAL_DMA_IRQHandler+0x13c>
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fe:	2101      	movs	r1, #1
 8002400:	4091      	lsls	r1, r2
 8002402:	000a      	movs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b10      	cmp	r3, #16
 8002414:	d108      	bne.n	8002428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002426:	e007      	b.n	8002438 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	60da      	str	r2, [r3, #12]
}
 8002438:	46c0      	nop			@ (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b004      	add	sp, #16
 800243e:	bd80      	pop	{r7, pc}

08002440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	001a      	movs	r2, r3
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <DMA_CalcBaseAndBitshift+0x60>)
 8002450:	429a      	cmp	r2, r3
 8002452:	d810      	bhi.n	8002476 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <DMA_CalcBaseAndBitshift+0x64>)
 800245a:	4694      	mov	ip, r2
 800245c:	4463      	add	r3, ip
 800245e:	2114      	movs	r1, #20
 8002460:	0018      	movs	r0, r3
 8002462:	f7fd fe61 	bl	8000128 <__udivsi3>
 8002466:	0003      	movs	r3, r0
 8002468:	009a      	lsls	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <DMA_CalcBaseAndBitshift+0x68>)
 8002472:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002474:	e00f      	b.n	8002496 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a0c      	ldr	r2, [pc, #48]	@ (80024ac <DMA_CalcBaseAndBitshift+0x6c>)
 800247c:	4694      	mov	ip, r2
 800247e:	4463      	add	r3, ip
 8002480:	2114      	movs	r1, #20
 8002482:	0018      	movs	r0, r3
 8002484:	f7fd fe50 	bl	8000128 <__udivsi3>
 8002488:	0003      	movs	r3, r0
 800248a:	009a      	lsls	r2, r3, #2
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a07      	ldr	r2, [pc, #28]	@ (80024b0 <DMA_CalcBaseAndBitshift+0x70>)
 8002494:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b002      	add	sp, #8
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	40020407 	.word	0x40020407
 80024a4:	bffdfff8 	.word	0xbffdfff8
 80024a8:	40020000 	.word	0x40020000
 80024ac:	bffdfbf8 	.word	0xbffdfbf8
 80024b0:	40020400 	.word	0x40020400

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c2:	e155      	b.n	8002770 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4091      	lsls	r1, r2
 80024ce:	000a      	movs	r2, r1
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d100      	bne.n	80024dc <HAL_GPIO_Init+0x28>
 80024da:	e146      	b.n	800276a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2203      	movs	r2, #3
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d005      	beq.n	80024f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d130      	bne.n	8002556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	409a      	lsls	r2, r3
 8002502:	0013      	movs	r3, r2
 8002504:	43da      	mvns	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	409a      	lsls	r2, r3
 8002516:	0013      	movs	r3, r2
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252a:	2201      	movs	r2, #1
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
 8002530:	0013      	movs	r3, r2
 8002532:	43da      	mvns	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	2201      	movs	r2, #1
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
 8002548:	0013      	movs	r3, r2
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2203      	movs	r2, #3
 800255c:	4013      	ands	r3, r2
 800255e:	2b03      	cmp	r3, #3
 8002560:	d017      	beq.n	8002592 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	409a      	lsls	r2, r3
 8002570:	0013      	movs	r3, r2
 8002572:	43da      	mvns	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	409a      	lsls	r2, r3
 8002584:	0013      	movs	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2203      	movs	r2, #3
 8002598:	4013      	ands	r3, r2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d123      	bne.n	80025e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	58d3      	ldr	r3, [r2, r3]
 80025aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2207      	movs	r2, #7
 80025b0:	4013      	ands	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	220f      	movs	r2, #15
 80025b6:	409a      	lsls	r2, r3
 80025b8:	0013      	movs	r3, r2
 80025ba:	43da      	mvns	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2107      	movs	r1, #7
 80025ca:	400b      	ands	r3, r1
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	409a      	lsls	r2, r3
 80025d0:	0013      	movs	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	6939      	ldr	r1, [r7, #16]
 80025e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	409a      	lsls	r2, r3
 80025f4:	0013      	movs	r3, r2
 80025f6:	43da      	mvns	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2203      	movs	r2, #3
 8002604:	401a      	ands	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	409a      	lsls	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	23c0      	movs	r3, #192	@ 0xc0
 8002620:	029b      	lsls	r3, r3, #10
 8002622:	4013      	ands	r3, r2
 8002624:	d100      	bne.n	8002628 <HAL_GPIO_Init+0x174>
 8002626:	e0a0      	b.n	800276a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002628:	4b57      	ldr	r3, [pc, #348]	@ (8002788 <HAL_GPIO_Init+0x2d4>)
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	4b56      	ldr	r3, [pc, #344]	@ (8002788 <HAL_GPIO_Init+0x2d4>)
 800262e:	2101      	movs	r1, #1
 8002630:	430a      	orrs	r2, r1
 8002632:	619a      	str	r2, [r3, #24]
 8002634:	4b54      	ldr	r3, [pc, #336]	@ (8002788 <HAL_GPIO_Init+0x2d4>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2201      	movs	r2, #1
 800263a:	4013      	ands	r3, r2
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002640:	4a52      	ldr	r2, [pc, #328]	@ (800278c <HAL_GPIO_Init+0x2d8>)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	589b      	ldr	r3, [r3, r2]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2203      	movs	r2, #3
 8002652:	4013      	ands	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	43da      	mvns	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	2390      	movs	r3, #144	@ 0x90
 8002668:	05db      	lsls	r3, r3, #23
 800266a:	429a      	cmp	r2, r3
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x1ee>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a47      	ldr	r2, [pc, #284]	@ (8002790 <HAL_GPIO_Init+0x2dc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x1ea>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a46      	ldr	r2, [pc, #280]	@ (8002794 <HAL_GPIO_Init+0x2e0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x1e6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a45      	ldr	r2, [pc, #276]	@ (8002798 <HAL_GPIO_Init+0x2e4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x1e2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a44      	ldr	r2, [pc, #272]	@ (800279c <HAL_GPIO_Init+0x2e8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x1de>
 800268e:	2304      	movs	r3, #4
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x1f0>
 8002692:	2305      	movs	r3, #5
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x1f0>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x1f0>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x1f0>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x1f0>
 80026a2:	2300      	movs	r3, #0
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	2103      	movs	r1, #3
 80026a8:	400a      	ands	r2, r1
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	@ (800278c <HAL_GPIO_Init+0x2d8>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c2:	4b37      	ldr	r3, [pc, #220]	@ (80027a0 <HAL_GPIO_Init+0x2ec>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	035b      	lsls	r3, r3, #13
 80026da:	4013      	ands	r3, r2
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026e6:	4b2e      	ldr	r3, [pc, #184]	@ (80027a0 <HAL_GPIO_Init+0x2ec>)
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026ec:	4b2c      	ldr	r3, [pc, #176]	@ (80027a0 <HAL_GPIO_Init+0x2ec>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	039b      	lsls	r3, r3, #14
 8002704:	4013      	ands	r3, r2
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002710:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <HAL_GPIO_Init+0x2ec>)
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002716:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <HAL_GPIO_Init+0x2ec>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43da      	mvns	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	029b      	lsls	r3, r3, #10
 800272e:	4013      	ands	r3, r2
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800273a:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <HAL_GPIO_Init+0x2ec>)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_GPIO_Init+0x2ec>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43da      	mvns	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	025b      	lsls	r3, r3, #9
 8002758:	4013      	ands	r3, r2
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002764:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <HAL_GPIO_Init+0x2ec>)
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	40da      	lsrs	r2, r3
 8002778:	1e13      	subs	r3, r2, #0
 800277a:	d000      	beq.n	800277e <HAL_GPIO_Init+0x2ca>
 800277c:	e6a2      	b.n	80024c4 <HAL_GPIO_Init+0x10>
  } 
}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b006      	add	sp, #24
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	40010000 	.word	0x40010000
 8002790:	48000400 	.word	0x48000400
 8002794:	48000800 	.word	0x48000800
 8002798:	48000c00 	.word	0x48000c00
 800279c:	48001000 	.word	0x48001000
 80027a0:	40010400 	.word	0x40010400

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	0008      	movs	r0, r1
 80027ae:	0011      	movs	r1, r2
 80027b0:	1cbb      	adds	r3, r7, #2
 80027b2:	1c02      	adds	r2, r0, #0
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	1c7b      	adds	r3, r7, #1
 80027b8:	1c0a      	adds	r2, r1, #0
 80027ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027bc:	1c7b      	adds	r3, r7, #1
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c4:	1cbb      	adds	r3, r7, #2
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ce:	1cbb      	adds	r3, r7, #2
 80027d0:	881a      	ldrh	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	0002      	movs	r2, r0
 80027e8:	1dbb      	adds	r3, r7, #6
 80027ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	1dba      	adds	r2, r7, #6
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	4013      	ands	r3, r2
 80027f6:	d008      	beq.n	800280a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80027fa:	1dba      	adds	r2, r7, #6
 80027fc:	8812      	ldrh	r2, [r2, #0]
 80027fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002800:	1dbb      	adds	r3, r7, #6
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	0018      	movs	r0, r3
 8002806:	f7fe fc85 	bl	8001114 <HAL_GPIO_EXTI_Callback>
  }
}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	40010400 	.word	0x40010400

08002818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f000 fb76 	bl	8002f18 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d100      	bne.n	8002838 <HAL_RCC_OscConfig+0x20>
 8002836:	e08e      	b.n	8002956 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002838:	4bc5      	ldr	r3, [pc, #788]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	220c      	movs	r2, #12
 800283e:	4013      	ands	r3, r2
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00e      	beq.n	8002862 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002844:	4bc2      	ldr	r3, [pc, #776]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	220c      	movs	r2, #12
 800284a:	4013      	ands	r3, r2
 800284c:	2b08      	cmp	r3, #8
 800284e:	d117      	bne.n	8002880 <HAL_RCC_OscConfig+0x68>
 8002850:	4bbf      	ldr	r3, [pc, #764]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	23c0      	movs	r3, #192	@ 0xc0
 8002856:	025b      	lsls	r3, r3, #9
 8002858:	401a      	ands	r2, r3
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	429a      	cmp	r2, r3
 8002860:	d10e      	bne.n	8002880 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002862:	4bbb      	ldr	r3, [pc, #748]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	2380      	movs	r3, #128	@ 0x80
 8002868:	029b      	lsls	r3, r3, #10
 800286a:	4013      	ands	r3, r2
 800286c:	d100      	bne.n	8002870 <HAL_RCC_OscConfig+0x58>
 800286e:	e071      	b.n	8002954 <HAL_RCC_OscConfig+0x13c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d000      	beq.n	800287a <HAL_RCC_OscConfig+0x62>
 8002878:	e06c      	b.n	8002954 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f000 fb4c 	bl	8002f18 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x80>
 8002888:	4bb1      	ldr	r3, [pc, #708]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4bb0      	ldr	r3, [pc, #704]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 800288e:	2180      	movs	r1, #128	@ 0x80
 8002890:	0249      	lsls	r1, r1, #9
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e02f      	b.n	80028f8 <HAL_RCC_OscConfig+0xe0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10c      	bne.n	80028ba <HAL_RCC_OscConfig+0xa2>
 80028a0:	4bab      	ldr	r3, [pc, #684]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4baa      	ldr	r3, [pc, #680]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028a6:	49ab      	ldr	r1, [pc, #684]	@ (8002b54 <HAL_RCC_OscConfig+0x33c>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	4ba8      	ldr	r3, [pc, #672]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4ba7      	ldr	r3, [pc, #668]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028b2:	49a9      	ldr	r1, [pc, #676]	@ (8002b58 <HAL_RCC_OscConfig+0x340>)
 80028b4:	400a      	ands	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e01e      	b.n	80028f8 <HAL_RCC_OscConfig+0xe0>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b05      	cmp	r3, #5
 80028c0:	d10e      	bne.n	80028e0 <HAL_RCC_OscConfig+0xc8>
 80028c2:	4ba3      	ldr	r3, [pc, #652]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4ba2      	ldr	r3, [pc, #648]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028c8:	2180      	movs	r1, #128	@ 0x80
 80028ca:	02c9      	lsls	r1, r1, #11
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	4b9f      	ldr	r3, [pc, #636]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b9e      	ldr	r3, [pc, #632]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028d6:	2180      	movs	r1, #128	@ 0x80
 80028d8:	0249      	lsls	r1, r1, #9
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xe0>
 80028e0:	4b9b      	ldr	r3, [pc, #620]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b9a      	ldr	r3, [pc, #616]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028e6:	499b      	ldr	r1, [pc, #620]	@ (8002b54 <HAL_RCC_OscConfig+0x33c>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	4b98      	ldr	r3, [pc, #608]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b97      	ldr	r3, [pc, #604]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80028f2:	4999      	ldr	r1, [pc, #612]	@ (8002b58 <HAL_RCC_OscConfig+0x340>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d014      	beq.n	800292a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fe7e 	bl	8001600 <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290a:	f7fe fe79 	bl	8001600 <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	@ 0x64
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e2fd      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291c:	4b8c      	ldr	r3, [pc, #560]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	029b      	lsls	r3, r3, #10
 8002924:	4013      	ands	r3, r2
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0xf2>
 8002928:	e015      	b.n	8002956 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe fe69 	bl	8001600 <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe fe64 	bl	8001600 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e2e8      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b82      	ldr	r3, [pc, #520]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	029b      	lsls	r3, r3, #10
 800294e:	4013      	ands	r3, r2
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x11c>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2202      	movs	r2, #2
 800295c:	4013      	ands	r3, r2
 800295e:	d100      	bne.n	8002962 <HAL_RCC_OscConfig+0x14a>
 8002960:	e06c      	b.n	8002a3c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002962:	4b7b      	ldr	r3, [pc, #492]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	220c      	movs	r2, #12
 8002968:	4013      	ands	r3, r2
 800296a:	d00e      	beq.n	800298a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800296c:	4b78      	ldr	r3, [pc, #480]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	220c      	movs	r2, #12
 8002972:	4013      	ands	r3, r2
 8002974:	2b08      	cmp	r3, #8
 8002976:	d11f      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1a0>
 8002978:	4b75      	ldr	r3, [pc, #468]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	23c0      	movs	r3, #192	@ 0xc0
 800297e:	025b      	lsls	r3, r3, #9
 8002980:	401a      	ands	r2, r3
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	429a      	cmp	r2, r3
 8002988:	d116      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	4b71      	ldr	r3, [pc, #452]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_OscConfig+0x188>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e2bb      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	22f8      	movs	r2, #248	@ 0xf8
 80029a6:	4393      	bics	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00da      	lsls	r2, r3, #3
 80029b0:	4b67      	ldr	r3, [pc, #412]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	e041      	b.n	8002a3c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d024      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c0:	4b63      	ldr	r3, [pc, #396]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b62      	ldr	r3, [pc, #392]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	430a      	orrs	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fe18 	bl	8001600 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fe fe13 	bl	8001600 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e297      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	4b59      	ldr	r3, [pc, #356]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2202      	movs	r2, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	d0f1      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b57      	ldr	r3, [pc, #348]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	22f8      	movs	r2, #248	@ 0xf8
 80029f8:	4393      	bics	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	00da      	lsls	r2, r3, #3
 8002a02:	4b53      	ldr	r3, [pc, #332]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e018      	b.n	8002a3c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b51      	ldr	r3, [pc, #324]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b50      	ldr	r3, [pc, #320]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	438a      	bics	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fdf3 	bl	8001600 <HAL_GetTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fe fdee 	bl	8001600 <HAL_GetTick>
 8002a24:	0002      	movs	r2, r0
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e272      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2202      	movs	r2, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d1f1      	bne.n	8002a20 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2208      	movs	r2, #8
 8002a42:	4013      	ands	r3, r2
 8002a44:	d036      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b40      	ldr	r3, [pc, #256]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002a50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a52:	4b3f      	ldr	r3, [pc, #252]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002a54:	2101      	movs	r1, #1
 8002a56:	430a      	orrs	r2, r1
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fdd1 	bl	8001600 <HAL_GetTick>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a64:	f7fe fdcc 	bl	8001600 <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e250      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d0f1      	beq.n	8002a64 <HAL_RCC_OscConfig+0x24c>
 8002a80:	e018      	b.n	8002ab4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	4b33      	ldr	r3, [pc, #204]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002a84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a86:	4b32      	ldr	r3, [pc, #200]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	438a      	bics	r2, r1
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fdb7 	bl	8001600 <HAL_GetTick>
 8002a92:	0003      	movs	r3, r0
 8002a94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fe fdb2 	bl	8001600 <HAL_GetTick>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e236      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aaa:	4b29      	ldr	r3, [pc, #164]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	2202      	movs	r2, #2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d1f1      	bne.n	8002a98 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	4013      	ands	r3, r2
 8002abc:	d100      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2a8>
 8002abe:	e0b5      	b.n	8002c2c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac0:	201f      	movs	r0, #31
 8002ac2:	183b      	adds	r3, r7, r0
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac8:	4b21      	ldr	r3, [pc, #132]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d110      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002ada:	2180      	movs	r1, #128	@ 0x80
 8002adc:	0549      	lsls	r1, r1, #21
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	61da      	str	r2, [r3, #28]
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	055b      	lsls	r3, r3, #21
 8002aea:	4013      	ands	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002af0:	183b      	adds	r3, r7, r0
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_RCC_OscConfig+0x344>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	d11a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <HAL_RCC_OscConfig+0x344>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_RCC_OscConfig+0x344>)
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	0049      	lsls	r1, r1, #1
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fd76 	bl	8001600 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7fe fd71 	bl	8001600 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	@ 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1f5      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_OscConfig+0x344>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d10f      	bne.n	8002b60 <HAL_RCC_OscConfig+0x348>
 8002b40:	4b03      	ldr	r3, [pc, #12]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	4b02      	ldr	r3, [pc, #8]	@ (8002b50 <HAL_RCC_OscConfig+0x338>)
 8002b46:	2101      	movs	r1, #1
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	621a      	str	r2, [r3, #32]
 8002b4c:	e036      	b.n	8002bbc <HAL_RCC_OscConfig+0x3a4>
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	40021000 	.word	0x40021000
 8002b54:	fffeffff 	.word	0xfffeffff
 8002b58:	fffbffff 	.word	0xfffbffff
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_OscConfig+0x36a>
 8002b68:	4bca      	ldr	r3, [pc, #808]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	4bc9      	ldr	r3, [pc, #804]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	438a      	bics	r2, r1
 8002b72:	621a      	str	r2, [r3, #32]
 8002b74:	4bc7      	ldr	r3, [pc, #796]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	4bc6      	ldr	r3, [pc, #792]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	438a      	bics	r2, r1
 8002b7e:	621a      	str	r2, [r3, #32]
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x3a4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x38c>
 8002b8a:	4bc2      	ldr	r3, [pc, #776]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002b8c:	6a1a      	ldr	r2, [r3, #32]
 8002b8e:	4bc1      	ldr	r3, [pc, #772]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002b90:	2104      	movs	r1, #4
 8002b92:	430a      	orrs	r2, r1
 8002b94:	621a      	str	r2, [r3, #32]
 8002b96:	4bbf      	ldr	r3, [pc, #764]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	4bbe      	ldr	r3, [pc, #760]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	621a      	str	r2, [r3, #32]
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0x3a4>
 8002ba4:	4bbb      	ldr	r3, [pc, #748]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	4bba      	ldr	r3, [pc, #744]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	438a      	bics	r2, r1
 8002bae:	621a      	str	r2, [r3, #32]
 8002bb0:	4bb8      	ldr	r3, [pc, #736]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	4bb7      	ldr	r3, [pc, #732]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	438a      	bics	r2, r1
 8002bba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d014      	beq.n	8002bee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fd1c 	bl	8001600 <HAL_GetTick>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	e009      	b.n	8002be2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fd17 	bl	8001600 <HAL_GetTick>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4aaf      	ldr	r2, [pc, #700]	@ (8002e98 <HAL_RCC_OscConfig+0x680>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e19a      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	4bac      	ldr	r3, [pc, #688]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x3b6>
 8002bec:	e013      	b.n	8002c16 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fd07 	bl	8001600 <HAL_GetTick>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	e009      	b.n	8002c0c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fd02 	bl	8001600 <HAL_GetTick>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	4aa5      	ldr	r2, [pc, #660]	@ (8002e98 <HAL_RCC_OscConfig+0x680>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e185      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	4ba1      	ldr	r3, [pc, #644]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	2202      	movs	r2, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c16:	231f      	movs	r3, #31
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b9c      	ldr	r3, [pc, #624]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	4b9b      	ldr	r3, [pc, #620]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c26:	499d      	ldr	r1, [pc, #628]	@ (8002e9c <HAL_RCC_OscConfig+0x684>)
 8002c28:	400a      	ands	r2, r1
 8002c2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2210      	movs	r2, #16
 8002c32:	4013      	ands	r3, r2
 8002c34:	d063      	beq.n	8002cfe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d12a      	bne.n	8002c94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c3e:	4b95      	ldr	r3, [pc, #596]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c42:	4b94      	ldr	r3, [pc, #592]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c44:	2104      	movs	r1, #4
 8002c46:	430a      	orrs	r2, r1
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c4a:	4b92      	ldr	r3, [pc, #584]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c4e:	4b91      	ldr	r3, [pc, #580]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fcd3 	bl	8001600 <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c60:	f7fe fcce 	bl	8001600 <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e152      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c72:	4b88      	ldr	r3, [pc, #544]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d0f1      	beq.n	8002c60 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c7c:	4b85      	ldr	r3, [pc, #532]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c80:	22f8      	movs	r2, #248	@ 0xf8
 8002c82:	4393      	bics	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	00da      	lsls	r2, r3, #3
 8002c8c:	4b81      	ldr	r3, [pc, #516]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c92:	e034      	b.n	8002cfe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	3305      	adds	r3, #5
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c9c:	4b7d      	ldr	r3, [pc, #500]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ca0:	4b7c      	ldr	r3, [pc, #496]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ca8:	4b7a      	ldr	r3, [pc, #488]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cac:	22f8      	movs	r2, #248	@ 0xf8
 8002cae:	4393      	bics	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	00da      	lsls	r2, r3, #3
 8002cb8:	4b76      	ldr	r3, [pc, #472]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cbe:	e01e      	b.n	8002cfe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cc0:	4b74      	ldr	r3, [pc, #464]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cc4:	4b73      	ldr	r3, [pc, #460]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ccc:	4b71      	ldr	r3, [pc, #452]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cd0:	4b70      	ldr	r3, [pc, #448]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fc92 	bl	8001600 <HAL_GetTick>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ce2:	f7fe fc8d 	bl	8001600 <HAL_GetTick>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e111      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cf4:	4b67      	ldr	r3, [pc, #412]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d1f1      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2220      	movs	r2, #32
 8002d04:	4013      	ands	r3, r2
 8002d06:	d05c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d08:	4b62      	ldr	r3, [pc, #392]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	220c      	movs	r2, #12
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d00e      	beq.n	8002d32 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d14:	4b5f      	ldr	r3, [pc, #380]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	220c      	movs	r2, #12
 8002d1a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d114      	bne.n	8002d4a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d20:	4b5c      	ldr	r3, [pc, #368]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	23c0      	movs	r3, #192	@ 0xc0
 8002d26:	025b      	lsls	r3, r3, #9
 8002d28:	401a      	ands	r2, r3
 8002d2a:	23c0      	movs	r3, #192	@ 0xc0
 8002d2c:	025b      	lsls	r3, r3, #9
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d32:	4b58      	ldr	r3, [pc, #352]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	029b      	lsls	r3, r3, #10
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d040      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x5a8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d03c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0e6      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01b      	beq.n	8002d8a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d52:	4b50      	ldr	r3, [pc, #320]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d56:	4b4f      	ldr	r3, [pc, #316]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002d58:	2180      	movs	r1, #128	@ 0x80
 8002d5a:	0249      	lsls	r1, r1, #9
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fc4e 	bl	8001600 <HAL_GetTick>
 8002d64:	0003      	movs	r3, r0
 8002d66:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6a:	f7fe fc49 	bl	8001600 <HAL_GetTick>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0cd      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d7c:	4b45      	ldr	r3, [pc, #276]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	029b      	lsls	r3, r3, #10
 8002d84:	4013      	ands	r3, r2
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x552>
 8002d88:	e01b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d8a:	4b42      	ldr	r3, [pc, #264]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d8e:	4b41      	ldr	r3, [pc, #260]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002d90:	4943      	ldr	r1, [pc, #268]	@ (8002ea0 <HAL_RCC_OscConfig+0x688>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe fc33 	bl	8001600 <HAL_GetTick>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da0:	f7fe fc2e 	bl	8001600 <HAL_GetTick>
 8002da4:	0002      	movs	r2, r0
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0b2      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002db2:	4b38      	ldr	r3, [pc, #224]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db6:	2380      	movs	r3, #128	@ 0x80
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x588>
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002dc0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d100      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5b4>
 8002dca:	e0a4      	b.n	8002f16 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dcc:	4b31      	ldr	r3, [pc, #196]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	220c      	movs	r2, #12
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d100      	bne.n	8002dda <HAL_RCC_OscConfig+0x5c2>
 8002dd8:	e078      	b.n	8002ecc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d14c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002de8:	492e      	ldr	r1, [pc, #184]	@ (8002ea4 <HAL_RCC_OscConfig+0x68c>)
 8002dea:	400a      	ands	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe fc07 	bl	8001600 <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fc02 	bl	8001600 <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e086      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	049b      	lsls	r3, r3, #18
 8002e12:	4013      	ands	r3, r2
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e16:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	4393      	bics	r3, r2
 8002e1e:	0019      	movs	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e24:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea8 <HAL_RCC_OscConfig+0x690>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e4a:	2180      	movs	r1, #128	@ 0x80
 8002e4c:	0449      	lsls	r1, r1, #17
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe fbd5 	bl	8001600 <HAL_GetTick>
 8002e56:	0003      	movs	r3, r0
 8002e58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe fbd0 	bl	8001600 <HAL_GetTick>
 8002e60:	0002      	movs	r2, r0
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e054      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e6e:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	049b      	lsls	r3, r3, #18
 8002e76:	4013      	ands	r3, r2
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x644>
 8002e7a:	e04c      	b.n	8002f16 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <HAL_RCC_OscConfig+0x67c>)
 8002e82:	4908      	ldr	r1, [pc, #32]	@ (8002ea4 <HAL_RCC_OscConfig+0x68c>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fbba 	bl	8001600 <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x6a6>
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	40021000 	.word	0x40021000
 8002e98:	00001388 	.word	0x00001388
 8002e9c:	efffffff 	.word	0xefffffff
 8002ea0:	fffeffff 	.word	0xfffeffff
 8002ea4:	feffffff 	.word	0xfeffffff
 8002ea8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe fba8 	bl	8001600 <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e02c      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebe:	4b18      	ldr	r3, [pc, #96]	@ (8002f20 <HAL_RCC_OscConfig+0x708>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	049b      	lsls	r3, r3, #18
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x694>
 8002eca:	e024      	b.n	8002f16 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01f      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_RCC_OscConfig+0x708>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ede:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <HAL_RCC_OscConfig+0x708>)
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	23c0      	movs	r3, #192	@ 0xc0
 8002ee8:	025b      	lsls	r3, r3, #9
 8002eea:	401a      	ands	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d10e      	bne.n	8002f12 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	401a      	ands	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	23f0      	movs	r3, #240	@ 0xf0
 8002f06:	039b      	lsls	r3, r3, #14
 8002f08:	401a      	ands	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b008      	add	sp, #32
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0bf      	b.n	80030b8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b61      	ldr	r3, [pc, #388]	@ (80030c0 <HAL_RCC_ClockConfig+0x19c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4013      	ands	r3, r2
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d911      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b5e      	ldr	r3, [pc, #376]	@ (80030c0 <HAL_RCC_ClockConfig+0x19c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4393      	bics	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	4b5b      	ldr	r3, [pc, #364]	@ (80030c0 <HAL_RCC_ClockConfig+0x19c>)
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f58:	4b59      	ldr	r3, [pc, #356]	@ (80030c0 <HAL_RCC_ClockConfig+0x19c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4013      	ands	r3, r2
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0a6      	b.n	80030b8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	4013      	ands	r3, r2
 8002f72:	d015      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d006      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f7e:	4b51      	ldr	r3, [pc, #324]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4b50      	ldr	r3, [pc, #320]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f84:	21e0      	movs	r1, #224	@ 0xe0
 8002f86:	00c9      	lsls	r1, r1, #3
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	22f0      	movs	r2, #240	@ 0xf0
 8002f92:	4393      	bics	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d04c      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b44      	ldr	r3, [pc, #272]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d120      	bne.n	8003000 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07a      	b.n	80030b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b3e      	ldr	r3, [pc, #248]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	049b      	lsls	r3, r3, #18
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d114      	bne.n	8003000 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06e      	b.n	80030b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fe2:	4b38      	ldr	r3, [pc, #224]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	029b      	lsls	r3, r3, #10
 8002fea:	4013      	ands	r3, r2
 8002fec:	d108      	bne.n	8003000 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e062      	b.n	80030b8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e05b      	b.n	80030b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003000:	4b30      	ldr	r3, [pc, #192]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	4393      	bics	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4b2d      	ldr	r3, [pc, #180]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7fe faf4 	bl	8001600 <HAL_GetTick>
 8003018:	0003      	movs	r3, r0
 800301a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301c:	e009      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301e:	f7fe faef 	bl	8001600 <HAL_GetTick>
 8003022:	0002      	movs	r2, r0
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	4a27      	ldr	r2, [pc, #156]	@ (80030c8 <HAL_RCC_ClockConfig+0x1a4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e042      	b.n	80030b8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	220c      	movs	r2, #12
 8003038:	401a      	ands	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1ec      	bne.n	800301e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b1e      	ldr	r3, [pc, #120]	@ (80030c0 <HAL_RCC_ClockConfig+0x19c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2201      	movs	r2, #1
 800304a:	4013      	ands	r3, r2
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d211      	bcs.n	8003076 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_ClockConfig+0x19c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2201      	movs	r2, #1
 8003058:	4393      	bics	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <HAL_RCC_ClockConfig+0x19c>)
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003064:	4b16      	ldr	r3, [pc, #88]	@ (80030c0 <HAL_RCC_ClockConfig+0x19c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	4013      	ands	r3, r2
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e020      	b.n	80030b8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2204      	movs	r2, #4
 800307c:	4013      	ands	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a11      	ldr	r2, [pc, #68]	@ (80030cc <HAL_RCC_ClockConfig+0x1a8>)
 8003086:	4013      	ands	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003094:	f000 f820 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8003098:	0001      	movs	r1, r0
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <HAL_RCC_ClockConfig+0x1a0>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	220f      	movs	r2, #15
 80030a2:	4013      	ands	r3, r2
 80030a4:	4a0a      	ldr	r2, [pc, #40]	@ (80030d0 <HAL_RCC_ClockConfig+0x1ac>)
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	000a      	movs	r2, r1
 80030aa:	40da      	lsrs	r2, r3
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b0>)
 80030ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7fe fa5f 	bl	8001574 <HAL_InitTick>
  
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40022000 	.word	0x40022000
 80030c4:	40021000 	.word	0x40021000
 80030c8:	00001388 	.word	0x00001388
 80030cc:	fffff8ff 	.word	0xfffff8ff
 80030d0:	08005598 	.word	0x08005598
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030f2:	4b2d      	ldr	r3, [pc, #180]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	220c      	movs	r2, #12
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d046      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0xb8>
 8003102:	d848      	bhi.n	8003196 <HAL_RCC_GetSysClockFreq+0xbe>
 8003104:	2b04      	cmp	r3, #4
 8003106:	d002      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x36>
 8003108:	2b08      	cmp	r3, #8
 800310a:	d003      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x3c>
 800310c:	e043      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800310e:	4b27      	ldr	r3, [pc, #156]	@ (80031ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003110:	613b      	str	r3, [r7, #16]
      break;
 8003112:	e043      	b.n	800319c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	0c9b      	lsrs	r3, r3, #18
 8003118:	220f      	movs	r2, #15
 800311a:	4013      	ands	r3, r2
 800311c:	4a24      	ldr	r2, [pc, #144]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003122:	4b21      	ldr	r3, [pc, #132]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	220f      	movs	r2, #15
 8003128:	4013      	ands	r3, r2
 800312a:	4a22      	ldr	r2, [pc, #136]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	23c0      	movs	r3, #192	@ 0xc0
 8003134:	025b      	lsls	r3, r3, #9
 8003136:	401a      	ands	r2, r3
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	025b      	lsls	r3, r3, #9
 800313c:	429a      	cmp	r2, r3
 800313e:	d109      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	481a      	ldr	r0, [pc, #104]	@ (80031ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003144:	f7fc fff0 	bl	8000128 <__udivsi3>
 8003148:	0003      	movs	r3, r0
 800314a:	001a      	movs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4353      	muls	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e01a      	b.n	800318a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	23c0      	movs	r3, #192	@ 0xc0
 8003158:	025b      	lsls	r3, r3, #9
 800315a:	401a      	ands	r2, r3
 800315c:	23c0      	movs	r3, #192	@ 0xc0
 800315e:	025b      	lsls	r3, r3, #9
 8003160:	429a      	cmp	r2, r3
 8003162:	d109      	bne.n	8003178 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4814      	ldr	r0, [pc, #80]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003168:	f7fc ffde 	bl	8000128 <__udivsi3>
 800316c:	0003      	movs	r3, r0
 800316e:	001a      	movs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4353      	muls	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e008      	b.n	800318a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	480c      	ldr	r0, [pc, #48]	@ (80031ac <HAL_RCC_GetSysClockFreq+0xd4>)
 800317c:	f7fc ffd4 	bl	8000128 <__udivsi3>
 8003180:	0003      	movs	r3, r0
 8003182:	001a      	movs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4353      	muls	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	613b      	str	r3, [r7, #16]
      break;
 800318e:	e005      	b.n	800319c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003192:	613b      	str	r3, [r7, #16]
      break;
 8003194:	e002      	b.n	800319c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003196:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003198:	613b      	str	r3, [r7, #16]
      break;
 800319a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800319c:	693b      	ldr	r3, [r7, #16]
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b006      	add	sp, #24
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	40021000 	.word	0x40021000
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	080055b0 	.word	0x080055b0
 80031b4:	080055c0 	.word	0x080055c0
 80031b8:	02dc6c00 	.word	0x02dc6c00

080031bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c0:	4b02      	ldr	r3, [pc, #8]	@ (80031cc <HAL_RCC_GetHCLKFreq+0x10>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	20000004 	.word	0x20000004

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80031d4:	f7ff fff2 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80031d8:	0001      	movs	r1, r0
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	2207      	movs	r2, #7
 80031e2:	4013      	ands	r3, r2
 80031e4:	4a04      	ldr	r2, [pc, #16]	@ (80031f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	40d9      	lsrs	r1, r3
 80031ea:	000b      	movs	r3, r1
}    
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	40021000 	.word	0x40021000
 80031f8:	080055a8 	.word	0x080055a8

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	025b      	lsls	r3, r3, #9
 8003214:	4013      	ands	r3, r2
 8003216:	d100      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003218:	e08e      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2017      	movs	r0, #23
 800321c:	183b      	adds	r3, r7, r0
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003222:	4b6e      	ldr	r3, [pc, #440]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	055b      	lsls	r3, r3, #21
 800322a:	4013      	ands	r3, r2
 800322c:	d110      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4b6b      	ldr	r3, [pc, #428]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	4b6a      	ldr	r3, [pc, #424]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003234:	2180      	movs	r1, #128	@ 0x80
 8003236:	0549      	lsls	r1, r1, #21
 8003238:	430a      	orrs	r2, r1
 800323a:	61da      	str	r2, [r3, #28]
 800323c:	4b67      	ldr	r3, [pc, #412]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	055b      	lsls	r3, r3, #21
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324a:	183b      	adds	r3, r7, r0
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b63      	ldr	r3, [pc, #396]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4013      	ands	r3, r2
 800325a:	d11a      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325c:	4b60      	ldr	r3, [pc, #384]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b5f      	ldr	r3, [pc, #380]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003262:	2180      	movs	r1, #128	@ 0x80
 8003264:	0049      	lsls	r1, r1, #1
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7fe f9c9 	bl	8001600 <HAL_GetTick>
 800326e:	0003      	movs	r3, r0
 8003270:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003274:	f7fe f9c4 	bl	8001600 <HAL_GetTick>
 8003278:	0002      	movs	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0a6      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b56      	ldr	r3, [pc, #344]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d0f0      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003292:	4b52      	ldr	r3, [pc, #328]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	23c0      	movs	r3, #192	@ 0xc0
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d034      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	23c0      	movs	r3, #192	@ 0xc0
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4013      	ands	r3, r2
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d02c      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b4:	4b49      	ldr	r3, [pc, #292]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4a4a      	ldr	r2, [pc, #296]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032be:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	4b46      	ldr	r3, [pc, #280]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032c4:	2180      	movs	r1, #128	@ 0x80
 80032c6:	0249      	lsls	r1, r1, #9
 80032c8:	430a      	orrs	r2, r1
 80032ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032cc:	4b43      	ldr	r3, [pc, #268]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	4b42      	ldr	r3, [pc, #264]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032d2:	4945      	ldr	r1, [pc, #276]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032d8:	4b40      	ldr	r3, [pc, #256]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	4013      	ands	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fe f98b 	bl	8001600 <HAL_GetTick>
 80032ea:	0003      	movs	r3, r0
 80032ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	e009      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fe f986 	bl	8001600 <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	4a3c      	ldr	r2, [pc, #240]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e067      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	4b35      	ldr	r3, [pc, #212]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	2202      	movs	r2, #2
 800330a:	4013      	ands	r3, r2
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800330e:	4b33      	ldr	r3, [pc, #204]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a34      	ldr	r2, [pc, #208]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003314:	4013      	ands	r3, r2
 8003316:	0019      	movs	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4b2f      	ldr	r3, [pc, #188]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800331e:	430a      	orrs	r2, r1
 8003320:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003322:	2317      	movs	r3, #23
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332c:	4b2b      	ldr	r3, [pc, #172]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	4b2a      	ldr	r3, [pc, #168]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003332:	492f      	ldr	r1, [pc, #188]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003334:	400a      	ands	r2, r1
 8003336:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2201      	movs	r2, #1
 800333e:	4013      	ands	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003342:	4b26      	ldr	r3, [pc, #152]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	2203      	movs	r2, #3
 8003348:	4393      	bics	r3, r2
 800334a:	0019      	movs	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003352:	430a      	orrs	r2, r1
 8003354:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2202      	movs	r2, #2
 800335c:	4013      	ands	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003360:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	4a23      	ldr	r2, [pc, #140]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	4b1b      	ldr	r3, [pc, #108]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003370:	430a      	orrs	r2, r1
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2380      	movs	r3, #128	@ 0x80
 800337a:	02db      	lsls	r3, r3, #11
 800337c:	4013      	ands	r3, r2
 800337e:	d009      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003380:	4b16      	ldr	r3, [pc, #88]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	4a1c      	ldr	r2, [pc, #112]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	4b13      	ldr	r3, [pc, #76]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003390:	430a      	orrs	r2, r1
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2220      	movs	r2, #32
 800339a:	4013      	ands	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800339e:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	2210      	movs	r2, #16
 80033a4:	4393      	bics	r3, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ae:	430a      	orrs	r2, r1
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4013      	ands	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033be:	4b07      	ldr	r3, [pc, #28]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	2240      	movs	r2, #64	@ 0x40
 80033c4:	4393      	bics	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b006      	add	sp, #24
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
 80033e4:	fffffcff 	.word	0xfffffcff
 80033e8:	fffeffff 	.word	0xfffeffff
 80033ec:	00001388 	.word	0x00001388
 80033f0:	efffffff 	.word	0xefffffff
 80033f4:	fffcffff 	.word	0xfffcffff
 80033f8:	fff3ffff 	.word	0xfff3ffff

080033fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e042      	b.n	8003494 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223d      	movs	r2, #61	@ 0x3d
 8003412:	5c9b      	ldrb	r3, [r3, r2]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	223c      	movs	r2, #60	@ 0x3c
 800341e:	2100      	movs	r1, #0
 8003420:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0018      	movs	r0, r3
 8003426:	f7fd ff4f 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	223d      	movs	r2, #61	@ 0x3d
 800342e:	2102      	movs	r1, #2
 8003430:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	0019      	movs	r1, r3
 800343c:	0010      	movs	r0, r2
 800343e:	f000 fad7 	bl	80039f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2246      	movs	r2, #70	@ 0x46
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	223e      	movs	r2, #62	@ 0x3e
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223f      	movs	r2, #63	@ 0x3f
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2240      	movs	r2, #64	@ 0x40
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2241      	movs	r2, #65	@ 0x41
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2242      	movs	r2, #66	@ 0x42
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2243      	movs	r2, #67	@ 0x43
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2244      	movs	r2, #68	@ 0x44
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2245      	movs	r2, #69	@ 0x45
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223d      	movs	r2, #61	@ 0x3d
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e042      	b.n	8003534 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	223d      	movs	r2, #61	@ 0x3d
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d107      	bne.n	80034ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	223c      	movs	r2, #60	@ 0x3c
 80034be:	2100      	movs	r1, #0
 80034c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 f839 	bl	800353c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	223d      	movs	r2, #61	@ 0x3d
 80034ce:	2102      	movs	r1, #2
 80034d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	0019      	movs	r1, r3
 80034dc:	0010      	movs	r0, r2
 80034de:	f000 fa87 	bl	80039f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2246      	movs	r2, #70	@ 0x46
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	223e      	movs	r2, #62	@ 0x3e
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	223f      	movs	r2, #63	@ 0x3f
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2240      	movs	r2, #64	@ 0x40
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2241      	movs	r2, #65	@ 0x41
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2242      	movs	r2, #66	@ 0x42
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2243      	movs	r2, #67	@ 0x43
 8003516:	2101      	movs	r1, #1
 8003518:	5499      	strb	r1, [r3, r2]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2244      	movs	r2, #68	@ 0x44
 800351e:	2101      	movs	r1, #1
 8003520:	5499      	strb	r1, [r3, r2]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2245      	movs	r2, #69	@ 0x45
 8003526:	2101      	movs	r1, #1
 8003528:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	223d      	movs	r2, #61	@ 0x3d
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003544:	46c0      	nop			@ (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <HAL_TIM_PWM_Start+0x22>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	223e      	movs	r2, #62	@ 0x3e
 8003560:	5c9b      	ldrb	r3, [r3, r2]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	4193      	sbcs	r3, r2
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e01f      	b.n	80035ae <HAL_TIM_PWM_Start+0x62>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d108      	bne.n	8003586 <HAL_TIM_PWM_Start+0x3a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	223f      	movs	r2, #63	@ 0x3f
 8003578:	5c9b      	ldrb	r3, [r3, r2]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	1e5a      	subs	r2, r3, #1
 8003580:	4193      	sbcs	r3, r2
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e013      	b.n	80035ae <HAL_TIM_PWM_Start+0x62>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d108      	bne.n	800359e <HAL_TIM_PWM_Start+0x52>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2240      	movs	r2, #64	@ 0x40
 8003590:	5c9b      	ldrb	r3, [r3, r2]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	1e5a      	subs	r2, r3, #1
 8003598:	4193      	sbcs	r3, r2
 800359a:	b2db      	uxtb	r3, r3
 800359c:	e007      	b.n	80035ae <HAL_TIM_PWM_Start+0x62>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2241      	movs	r2, #65	@ 0x41
 80035a2:	5c9b      	ldrb	r3, [r3, r2]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	1e5a      	subs	r2, r3, #1
 80035aa:	4193      	sbcs	r3, r2
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e074      	b.n	80036a0 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_PWM_Start+0x7a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	223e      	movs	r2, #62	@ 0x3e
 80035c0:	2102      	movs	r1, #2
 80035c2:	5499      	strb	r1, [r3, r2]
 80035c4:	e013      	b.n	80035ee <HAL_TIM_PWM_Start+0xa2>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_PWM_Start+0x8a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	223f      	movs	r2, #63	@ 0x3f
 80035d0:	2102      	movs	r1, #2
 80035d2:	5499      	strb	r1, [r3, r2]
 80035d4:	e00b      	b.n	80035ee <HAL_TIM_PWM_Start+0xa2>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Start+0x9a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2240      	movs	r2, #64	@ 0x40
 80035e0:	2102      	movs	r1, #2
 80035e2:	5499      	strb	r1, [r3, r2]
 80035e4:	e003      	b.n	80035ee <HAL_TIM_PWM_Start+0xa2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2241      	movs	r2, #65	@ 0x41
 80035ea:	2102      	movs	r1, #2
 80035ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 fd1e 	bl	8004038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a29      	ldr	r2, [pc, #164]	@ (80036a8 <HAL_TIM_PWM_Start+0x15c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_TIM_PWM_Start+0xd8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a28      	ldr	r2, [pc, #160]	@ (80036ac <HAL_TIM_PWM_Start+0x160>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_TIM_PWM_Start+0xd8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a26      	ldr	r2, [pc, #152]	@ (80036b0 <HAL_TIM_PWM_Start+0x164>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_TIM_PWM_Start+0xd8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a25      	ldr	r2, [pc, #148]	@ (80036b4 <HAL_TIM_PWM_Start+0x168>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <HAL_TIM_PWM_Start+0xdc>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_TIM_PWM_Start+0xde>
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2180      	movs	r1, #128	@ 0x80
 800363a:	0209      	lsls	r1, r1, #8
 800363c:	430a      	orrs	r2, r1
 800363e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a18      	ldr	r2, [pc, #96]	@ (80036a8 <HAL_TIM_PWM_Start+0x15c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00f      	beq.n	800366a <HAL_TIM_PWM_Start+0x11e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	05db      	lsls	r3, r3, #23
 8003652:	429a      	cmp	r2, r3
 8003654:	d009      	beq.n	800366a <HAL_TIM_PWM_Start+0x11e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a17      	ldr	r2, [pc, #92]	@ (80036b8 <HAL_TIM_PWM_Start+0x16c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_TIM_PWM_Start+0x11e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a11      	ldr	r2, [pc, #68]	@ (80036ac <HAL_TIM_PWM_Start+0x160>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d111      	bne.n	800368e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2207      	movs	r2, #7
 8003672:	4013      	ands	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b06      	cmp	r3, #6
 800367a:	d010      	beq.n	800369e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2101      	movs	r1, #1
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368c:	e007      	b.n	800369e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2101      	movs	r1, #1
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b004      	add	sp, #16
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800
 80036b8:	40000400 	.word	0x40000400

080036bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2317      	movs	r3, #23
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	223c      	movs	r2, #60	@ 0x3c
 80036d4:	5c9b      	ldrb	r3, [r3, r2]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_TIM_PWM_ConfigChannel+0x22>
 80036da:	2302      	movs	r3, #2
 80036dc:	e0ad      	b.n	800383a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	223c      	movs	r2, #60	@ 0x3c
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	d100      	bne.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80036ec:	e076      	b.n	80037dc <HAL_TIM_PWM_ConfigChannel+0x120>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0c      	cmp	r3, #12
 80036f2:	d900      	bls.n	80036f6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80036f4:	e095      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x166>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d04e      	beq.n	800379a <HAL_TIM_PWM_ConfigChannel+0xde>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d900      	bls.n	8003704 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003702:	e08e      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x56>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d021      	beq.n	8003754 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003710:	e087      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	0011      	movs	r1, r2
 800371a:	0018      	movs	r0, r3
 800371c:	f000 f9f6 	bl	8003b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2108      	movs	r1, #8
 800372c:	430a      	orrs	r2, r1
 800372e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2104      	movs	r1, #4
 800373c:	438a      	bics	r2, r1
 800373e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6999      	ldr	r1, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	619a      	str	r2, [r3, #24]
      break;
 8003752:	e06b      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	0011      	movs	r1, r2
 800375c:	0018      	movs	r0, r3
 800375e:	f000 fa5d 	bl	8003c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	0109      	lsls	r1, r1, #4
 8003770:	430a      	orrs	r2, r1
 8003772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4931      	ldr	r1, [pc, #196]	@ (8003844 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003780:	400a      	ands	r2, r1
 8003782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6999      	ldr	r1, [r3, #24]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	619a      	str	r2, [r3, #24]
      break;
 8003798:	e048      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 fabe 	bl	8003d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2108      	movs	r1, #8
 80037b4:	430a      	orrs	r2, r1
 80037b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2104      	movs	r1, #4
 80037c4:	438a      	bics	r2, r1
 80037c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69d9      	ldr	r1, [r3, #28]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	61da      	str	r2, [r3, #28]
      break;
 80037da:	e027      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 fb23 	bl	8003e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2180      	movs	r1, #128	@ 0x80
 80037f6:	0109      	lsls	r1, r1, #4
 80037f8:	430a      	orrs	r2, r1
 80037fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	490f      	ldr	r1, [pc, #60]	@ (8003844 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003808:	400a      	ands	r2, r1
 800380a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69d9      	ldr	r1, [r3, #28]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	021a      	lsls	r2, r3, #8
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	61da      	str	r2, [r3, #28]
      break;
 8003820:	e004      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003822:	2317      	movs	r3, #23
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
      break;
 800382a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	223c      	movs	r2, #60	@ 0x3c
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]

  return status;
 8003834:	2317      	movs	r3, #23
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	781b      	ldrb	r3, [r3, #0]
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b006      	add	sp, #24
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	fffffbff 	.word	0xfffffbff

08003848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	230f      	movs	r3, #15
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	223c      	movs	r2, #60	@ 0x3c
 800385e:	5c9b      	ldrb	r3, [r3, r2]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIM_ConfigClockSource+0x20>
 8003864:	2302      	movs	r3, #2
 8003866:	e0bc      	b.n	80039e2 <HAL_TIM_ConfigClockSource+0x19a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	223c      	movs	r2, #60	@ 0x3c
 800386c:	2101      	movs	r1, #1
 800386e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	223d      	movs	r2, #61	@ 0x3d
 8003874:	2102      	movs	r1, #2
 8003876:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2277      	movs	r2, #119	@ 0x77
 8003884:	4393      	bics	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4a58      	ldr	r2, [pc, #352]	@ (80039ec <HAL_TIM_ConfigClockSource+0x1a4>)
 800388c:	4013      	ands	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2280      	movs	r2, #128	@ 0x80
 800389e:	0192      	lsls	r2, r2, #6
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d040      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0xde>
 80038a4:	2280      	movs	r2, #128	@ 0x80
 80038a6:	0192      	lsls	r2, r2, #6
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d900      	bls.n	80038ae <HAL_TIM_ConfigClockSource+0x66>
 80038ac:	e088      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x178>
 80038ae:	2280      	movs	r2, #128	@ 0x80
 80038b0:	0152      	lsls	r2, r2, #5
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d100      	bne.n	80038b8 <HAL_TIM_ConfigClockSource+0x70>
 80038b6:	e088      	b.n	80039ca <HAL_TIM_ConfigClockSource+0x182>
 80038b8:	2280      	movs	r2, #128	@ 0x80
 80038ba:	0152      	lsls	r2, r2, #5
 80038bc:	4293      	cmp	r3, r2
 80038be:	d900      	bls.n	80038c2 <HAL_TIM_ConfigClockSource+0x7a>
 80038c0:	e07e      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x178>
 80038c2:	2b70      	cmp	r3, #112	@ 0x70
 80038c4:	d018      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0xb0>
 80038c6:	d900      	bls.n	80038ca <HAL_TIM_ConfigClockSource+0x82>
 80038c8:	e07a      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x178>
 80038ca:	2b60      	cmp	r3, #96	@ 0x60
 80038cc:	d04f      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x126>
 80038ce:	d900      	bls.n	80038d2 <HAL_TIM_ConfigClockSource+0x8a>
 80038d0:	e076      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x178>
 80038d2:	2b50      	cmp	r3, #80	@ 0x50
 80038d4:	d03b      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x106>
 80038d6:	d900      	bls.n	80038da <HAL_TIM_ConfigClockSource+0x92>
 80038d8:	e072      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x178>
 80038da:	2b40      	cmp	r3, #64	@ 0x40
 80038dc:	d057      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x146>
 80038de:	d900      	bls.n	80038e2 <HAL_TIM_ConfigClockSource+0x9a>
 80038e0:	e06e      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x178>
 80038e2:	2b30      	cmp	r3, #48	@ 0x30
 80038e4:	d063      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x166>
 80038e6:	d86b      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x178>
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d060      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x166>
 80038ec:	d868      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x178>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d05d      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x166>
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d05b      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x166>
 80038f6:	e063      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003908:	f000 fb76 	bl	8003ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2277      	movs	r2, #119	@ 0x77
 8003918:	4313      	orrs	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	609a      	str	r2, [r3, #8]
      break;
 8003924:	e052      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003936:	f000 fb5f 	bl	8003ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2180      	movs	r1, #128	@ 0x80
 8003946:	01c9      	lsls	r1, r1, #7
 8003948:	430a      	orrs	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
      break;
 800394c:	e03e      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	001a      	movs	r2, r3
 800395c:	f000 fad2 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2150      	movs	r1, #80	@ 0x50
 8003966:	0018      	movs	r0, r3
 8003968:	f000 fb2c 	bl	8003fc4 <TIM_ITRx_SetConfig>
      break;
 800396c:	e02e      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800397a:	001a      	movs	r2, r3
 800397c:	f000 faf0 	bl	8003f60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2160      	movs	r1, #96	@ 0x60
 8003986:	0018      	movs	r0, r3
 8003988:	f000 fb1c 	bl	8003fc4 <TIM_ITRx_SetConfig>
      break;
 800398c:	e01e      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399a:	001a      	movs	r2, r3
 800399c:	f000 fab2 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2140      	movs	r1, #64	@ 0x40
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 fb0c 	bl	8003fc4 <TIM_ITRx_SetConfig>
      break;
 80039ac:	e00e      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	0019      	movs	r1, r3
 80039b8:	0010      	movs	r0, r2
 80039ba:	f000 fb03 	bl	8003fc4 <TIM_ITRx_SetConfig>
      break;
 80039be:	e005      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039c0:	230f      	movs	r3, #15
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	2201      	movs	r2, #1
 80039c6:	701a      	strb	r2, [r3, #0]
      break;
 80039c8:	e000      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039ca:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	223d      	movs	r2, #61	@ 0x3d
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	223c      	movs	r2, #60	@ 0x3c
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]

  return status;
 80039dc:	230f      	movs	r3, #15
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	781b      	ldrb	r3, [r3, #0]
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b004      	add	sp, #16
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	ffff00ff 	.word	0xffff00ff

080039f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a3b      	ldr	r2, [pc, #236]	@ (8003af0 <TIM_Base_SetConfig+0x100>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d008      	beq.n	8003a1a <TIM_Base_SetConfig+0x2a>
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	2380      	movs	r3, #128	@ 0x80
 8003a0c:	05db      	lsls	r3, r3, #23
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0x2a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a37      	ldr	r2, [pc, #220]	@ (8003af4 <TIM_Base_SetConfig+0x104>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2270      	movs	r2, #112	@ 0x70
 8003a1e:	4393      	bics	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a30      	ldr	r2, [pc, #192]	@ (8003af0 <TIM_Base_SetConfig+0x100>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	05db      	lsls	r3, r3, #23
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d013      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	@ (8003af4 <TIM_Base_SetConfig+0x104>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2b      	ldr	r2, [pc, #172]	@ (8003af8 <TIM_Base_SetConfig+0x108>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a2a      	ldr	r2, [pc, #168]	@ (8003afc <TIM_Base_SetConfig+0x10c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a29      	ldr	r2, [pc, #164]	@ (8003b00 <TIM_Base_SetConfig+0x110>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a28      	ldr	r2, [pc, #160]	@ (8003b04 <TIM_Base_SetConfig+0x114>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a27      	ldr	r2, [pc, #156]	@ (8003b08 <TIM_Base_SetConfig+0x118>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2280      	movs	r2, #128	@ 0x80
 8003a7c:	4393      	bics	r3, r2
 8003a7e:	001a      	movs	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a13      	ldr	r2, [pc, #76]	@ (8003af0 <TIM_Base_SetConfig+0x100>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0xce>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a14      	ldr	r2, [pc, #80]	@ (8003afc <TIM_Base_SetConfig+0x10c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0xce>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a13      	ldr	r2, [pc, #76]	@ (8003b00 <TIM_Base_SetConfig+0x110>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0xce>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a12      	ldr	r2, [pc, #72]	@ (8003b04 <TIM_Base_SetConfig+0x114>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d103      	bne.n	8003ac6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d106      	bne.n	8003ae6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2201      	movs	r2, #1
 8003ade:	4393      	bics	r3, r2
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]
  }
}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b004      	add	sp, #16
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40002000 	.word	0x40002000
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800
 8003b08:	fffffcff 	.word	0xfffffcff

08003b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	2201      	movs	r2, #1
 8003b22:	4393      	bics	r3, r2
 8003b24:	001a      	movs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2270      	movs	r2, #112	@ 0x70
 8003b3a:	4393      	bics	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2203      	movs	r2, #3
 8003b42:	4393      	bics	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2202      	movs	r2, #2
 8003b54:	4393      	bics	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a27      	ldr	r2, [pc, #156]	@ (8003c04 <TIM_OC1_SetConfig+0xf8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <TIM_OC1_SetConfig+0x76>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a26      	ldr	r2, [pc, #152]	@ (8003c08 <TIM_OC1_SetConfig+0xfc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <TIM_OC1_SetConfig+0x76>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a25      	ldr	r2, [pc, #148]	@ (8003c0c <TIM_OC1_SetConfig+0x100>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <TIM_OC1_SetConfig+0x76>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a24      	ldr	r2, [pc, #144]	@ (8003c10 <TIM_OC1_SetConfig+0x104>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10c      	bne.n	8003b9c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2208      	movs	r2, #8
 8003b86:	4393      	bics	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2204      	movs	r2, #4
 8003b98:	4393      	bics	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a19      	ldr	r2, [pc, #100]	@ (8003c04 <TIM_OC1_SetConfig+0xf8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00b      	beq.n	8003bbc <TIM_OC1_SetConfig+0xb0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a18      	ldr	r2, [pc, #96]	@ (8003c08 <TIM_OC1_SetConfig+0xfc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d007      	beq.n	8003bbc <TIM_OC1_SetConfig+0xb0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a17      	ldr	r2, [pc, #92]	@ (8003c0c <TIM_OC1_SetConfig+0x100>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d003      	beq.n	8003bbc <TIM_OC1_SetConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a16      	ldr	r2, [pc, #88]	@ (8003c10 <TIM_OC1_SetConfig+0x104>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4a15      	ldr	r2, [pc, #84]	@ (8003c14 <TIM_OC1_SetConfig+0x108>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	@ (8003c18 <TIM_OC1_SetConfig+0x10c>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b006      	add	sp, #24
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800
 8003c14:	fffffeff 	.word	0xfffffeff
 8003c18:	fffffdff 	.word	0xfffffdff

08003c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	2210      	movs	r2, #16
 8003c32:	4393      	bics	r3, r2
 8003c34:	001a      	movs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a2e      	ldr	r2, [pc, #184]	@ (8003d04 <TIM_OC2_SetConfig+0xe8>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <TIM_OC2_SetConfig+0xec>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2220      	movs	r2, #32
 8003c66:	4393      	bics	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a24      	ldr	r2, [pc, #144]	@ (8003d0c <TIM_OC2_SetConfig+0xf0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10d      	bne.n	8003c9a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2280      	movs	r2, #128	@ 0x80
 8003c82:	4393      	bics	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2240      	movs	r2, #64	@ 0x40
 8003c96:	4393      	bics	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d0c <TIM_OC2_SetConfig+0xf0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_OC2_SetConfig+0x9e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d10 <TIM_OC2_SetConfig+0xf4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_OC2_SetConfig+0x9e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a19      	ldr	r2, [pc, #100]	@ (8003d14 <TIM_OC2_SetConfig+0xf8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_OC2_SetConfig+0x9e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a18      	ldr	r2, [pc, #96]	@ (8003d18 <TIM_OC2_SetConfig+0xfc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d113      	bne.n	8003ce2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4a17      	ldr	r2, [pc, #92]	@ (8003d1c <TIM_OC2_SetConfig+0x100>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4a16      	ldr	r2, [pc, #88]	@ (8003d20 <TIM_OC2_SetConfig+0x104>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	621a      	str	r2, [r3, #32]
}
 8003cfc:	46c0      	nop			@ (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b006      	add	sp, #24
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	ffff8fff 	.word	0xffff8fff
 8003d08:	fffffcff 	.word	0xfffffcff
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800
 8003d1c:	fffffbff 	.word	0xfffffbff
 8003d20:	fffff7ff 	.word	0xfffff7ff

08003d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4a33      	ldr	r2, [pc, #204]	@ (8003e08 <TIM_OC3_SetConfig+0xe4>)
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2270      	movs	r2, #112	@ 0x70
 8003d50:	4393      	bics	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2203      	movs	r2, #3
 8003d58:	4393      	bics	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	4a28      	ldr	r2, [pc, #160]	@ (8003e0c <TIM_OC3_SetConfig+0xe8>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a24      	ldr	r2, [pc, #144]	@ (8003e10 <TIM_OC3_SetConfig+0xec>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10d      	bne.n	8003d9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4a23      	ldr	r2, [pc, #140]	@ (8003e14 <TIM_OC3_SetConfig+0xf0>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4a1f      	ldr	r2, [pc, #124]	@ (8003e18 <TIM_OC3_SetConfig+0xf4>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e10 <TIM_OC3_SetConfig+0xec>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <TIM_OC3_SetConfig+0x9a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e1c <TIM_OC3_SetConfig+0xf8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <TIM_OC3_SetConfig+0x9a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e20 <TIM_OC3_SetConfig+0xfc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC3_SetConfig+0x9a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e24 <TIM_OC3_SetConfig+0x100>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d113      	bne.n	8003de6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <TIM_OC3_SetConfig+0x104>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4a18      	ldr	r2, [pc, #96]	@ (8003e2c <TIM_OC3_SetConfig+0x108>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	46c0      	nop			@ (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b006      	add	sp, #24
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	fffffeff 	.word	0xfffffeff
 8003e0c:	fffffdff 	.word	0xfffffdff
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	fffff7ff 	.word	0xfffff7ff
 8003e18:	fffffbff 	.word	0xfffffbff
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	ffffefff 	.word	0xffffefff
 8003e2c:	ffffdfff 	.word	0xffffdfff

08003e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4a26      	ldr	r2, [pc, #152]	@ (8003ee0 <TIM_OC4_SetConfig+0xb0>)
 8003e46:	401a      	ands	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a22      	ldr	r2, [pc, #136]	@ (8003ee4 <TIM_OC4_SetConfig+0xb4>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a21      	ldr	r2, [pc, #132]	@ (8003ee8 <TIM_OC4_SetConfig+0xb8>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4a1d      	ldr	r2, [pc, #116]	@ (8003eec <TIM_OC4_SetConfig+0xbc>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a19      	ldr	r2, [pc, #100]	@ (8003ef0 <TIM_OC4_SetConfig+0xc0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x78>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a18      	ldr	r2, [pc, #96]	@ (8003ef4 <TIM_OC4_SetConfig+0xc4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x78>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a17      	ldr	r2, [pc, #92]	@ (8003ef8 <TIM_OC4_SetConfig+0xc8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_OC4_SetConfig+0x78>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <TIM_OC4_SetConfig+0xcc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d109      	bne.n	8003ebc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <TIM_OC4_SetConfig+0xd0>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b006      	add	sp, #24
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			@ (mov r8, r8)
 8003ee0:	ffffefff 	.word	0xffffefff
 8003ee4:	ffff8fff 	.word	0xffff8fff
 8003ee8:	fffffcff 	.word	0xfffffcff
 8003eec:	ffffdfff 	.word	0xffffdfff
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800
 8003f00:	ffffbfff 	.word	0xffffbfff

08003f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4393      	bics	r3, r2
 8003f1e:	001a      	movs	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	22f0      	movs	r2, #240	@ 0xf0
 8003f2e:	4393      	bics	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	220a      	movs	r2, #10
 8003f40:	4393      	bics	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b006      	add	sp, #24
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	2210      	movs	r2, #16
 8003f78:	4393      	bics	r3, r2
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc0 <TIM_TI2_ConfigInputStage+0x60>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	031b      	lsls	r3, r3, #12
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	22a0      	movs	r2, #160	@ 0xa0
 8003f9c:	4393      	bics	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b006      	add	sp, #24
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	ffff0fff 	.word	0xffff0fff

08003fc4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2270      	movs	r2, #112	@ 0x70
 8003fd8:	4393      	bics	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	2207      	movs	r2, #7
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	609a      	str	r2, [r3, #8]
}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b004      	add	sp, #16
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4a09      	ldr	r2, [pc, #36]	@ (8004034 <TIM_ETR_SetConfig+0x3c>)
 8004010:	4013      	ands	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	431a      	orrs	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b006      	add	sp, #24
 8004032:	bd80      	pop	{r7, pc}
 8004034:	ffff00ff 	.word	0xffff00ff

08004038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	221f      	movs	r2, #31
 8004048:	4013      	ands	r3, r2
 800404a:	2201      	movs	r2, #1
 800404c:	409a      	lsls	r2, r3
 800404e:	0013      	movs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	43d2      	mvns	r2, r2
 800405a:	401a      	ands	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	211f      	movs	r1, #31
 8004068:	400b      	ands	r3, r1
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4099      	lsls	r1, r3
 800406e:	000b      	movs	r3, r1
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b006      	add	sp, #24
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	223c      	movs	r2, #60	@ 0x3c
 800408e:	5c9b      	ldrb	r3, [r3, r2]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004094:	2302      	movs	r3, #2
 8004096:	e047      	b.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	223c      	movs	r2, #60	@ 0x3c
 800409c:	2101      	movs	r1, #1
 800409e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	223d      	movs	r2, #61	@ 0x3d
 80040a4:	2102      	movs	r1, #2
 80040a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2270      	movs	r2, #112	@ 0x70
 80040bc:	4393      	bics	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a16      	ldr	r2, [pc, #88]	@ (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00f      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	2380      	movs	r3, #128	@ 0x80
 80040e2:	05db      	lsls	r3, r3, #23
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d009      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a11      	ldr	r2, [pc, #68]	@ (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a10      	ldr	r2, [pc, #64]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10c      	bne.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2280      	movs	r2, #128	@ 0x80
 8004100:	4393      	bics	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	223d      	movs	r2, #61	@ 0x3d
 800411a:	2101      	movs	r1, #1
 800411c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	223c      	movs	r2, #60	@ 0x3c
 8004122:	2100      	movs	r1, #0
 8004124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	b004      	add	sp, #16
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40014000 	.word	0x40014000

0800413c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	223c      	movs	r2, #60	@ 0x3c
 800414e:	5c9b      	ldrb	r3, [r3, r2]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004154:	2302      	movs	r3, #2
 8004156:	e03e      	b.n	80041d6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	223c      	movs	r2, #60	@ 0x3c
 800415c:	2101      	movs	r1, #1
 800415e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	22ff      	movs	r2, #255	@ 0xff
 8004164:	4393      	bics	r3, r2
 8004166:	001a      	movs	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004174:	401a      	ands	r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a18      	ldr	r2, [pc, #96]	@ (80041e4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004182:	401a      	ands	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a16      	ldr	r2, [pc, #88]	@ (80041e8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004190:	401a      	ands	r2, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a13      	ldr	r2, [pc, #76]	@ (80041ec <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800419e:	401a      	ands	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a11      	ldr	r2, [pc, #68]	@ (80041f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80041ac:	401a      	ands	r2, r3
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a0e      	ldr	r2, [pc, #56]	@ (80041f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80041ba:	401a      	ands	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	223c      	movs	r2, #60	@ 0x3c
 80041d0:	2100      	movs	r1, #0
 80041d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	0018      	movs	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	b004      	add	sp, #16
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	fffffcff 	.word	0xfffffcff
 80041e4:	fffffbff 	.word	0xfffffbff
 80041e8:	fffff7ff 	.word	0xfffff7ff
 80041ec:	ffffefff 	.word	0xffffefff
 80041f0:	ffffdfff 	.word	0xffffdfff
 80041f4:	ffffbfff 	.word	0xffffbfff

080041f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e044      	b.n	8004294 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2278      	movs	r2, #120	@ 0x78
 8004216:	2100      	movs	r1, #0
 8004218:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f7fd f8b3 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2224      	movs	r2, #36	@ 0x24
 8004226:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2101      	movs	r1, #1
 8004234:	438a      	bics	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f000 fab4 	bl	80047b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	0018      	movs	r0, r3
 800424c:	f000 f8c8 	bl	80043e0 <UART_SetConfig>
 8004250:	0003      	movs	r3, r0
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e01c      	b.n	8004294 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	490d      	ldr	r1, [pc, #52]	@ (800429c <HAL_UART_Init+0xa4>)
 8004266:	400a      	ands	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	212a      	movs	r1, #42	@ 0x2a
 8004276:	438a      	bics	r2, r1
 8004278:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2101      	movs	r1, #1
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0018      	movs	r0, r3
 800428e:	f000 fb43 	bl	8004918 <UART_CheckIdleState>
 8004292:	0003      	movs	r3, r0
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}
 800429c:	ffffb7ff 	.word	0xffffb7ff

080042a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	@ 0x28
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	1dbb      	adds	r3, r7, #6
 80042ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d000      	beq.n	80042ba <HAL_UART_Transmit+0x1a>
 80042b8:	e08c      	b.n	80043d4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_UART_Transmit+0x28>
 80042c0:	1dbb      	adds	r3, r7, #6
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e084      	b.n	80043d6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	2380      	movs	r3, #128	@ 0x80
 80042d2:	015b      	lsls	r3, r3, #5
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d109      	bne.n	80042ec <HAL_UART_Transmit+0x4c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	d001      	beq.n	80042ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e074      	b.n	80043d6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2284      	movs	r2, #132	@ 0x84
 80042f0:	2100      	movs	r1, #0
 80042f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2221      	movs	r2, #33	@ 0x21
 80042f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042fa:	f7fd f981 	bl	8001600 <HAL_GetTick>
 80042fe:	0003      	movs	r3, r0
 8004300:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1dba      	adds	r2, r7, #6
 8004306:	2150      	movs	r1, #80	@ 0x50
 8004308:	8812      	ldrh	r2, [r2, #0]
 800430a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1dba      	adds	r2, r7, #6
 8004310:	2152      	movs	r1, #82	@ 0x52
 8004312:	8812      	ldrh	r2, [r2, #0]
 8004314:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	2380      	movs	r3, #128	@ 0x80
 800431c:	015b      	lsls	r3, r3, #5
 800431e:	429a      	cmp	r2, r3
 8004320:	d108      	bne.n	8004334 <HAL_UART_Transmit+0x94>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	e003      	b.n	800433c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800433c:	e02f      	b.n	800439e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	0013      	movs	r3, r2
 8004348:	2200      	movs	r2, #0
 800434a:	2180      	movs	r1, #128	@ 0x80
 800434c:	f000 fb8c 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 8004350:	1e03      	subs	r3, r0, #0
 8004352:	d004      	beq.n	800435e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e03b      	b.n	80043d6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	881a      	ldrh	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	05d2      	lsls	r2, r2, #23
 800436e:	0dd2      	lsrs	r2, r2, #23
 8004370:	b292      	uxth	r2, r2
 8004372:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	3302      	adds	r3, #2
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	e007      	b.n	800438c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	781a      	ldrb	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3301      	adds	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2252      	movs	r2, #82	@ 0x52
 8004390:	5a9b      	ldrh	r3, [r3, r2]
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b299      	uxth	r1, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2252      	movs	r2, #82	@ 0x52
 800439c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2252      	movs	r2, #82	@ 0x52
 80043a2:	5a9b      	ldrh	r3, [r3, r2]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1c9      	bne.n	800433e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	0013      	movs	r3, r2
 80043b4:	2200      	movs	r2, #0
 80043b6:	2140      	movs	r1, #64	@ 0x40
 80043b8:	f000 fb56 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 80043bc:	1e03      	subs	r3, r0, #0
 80043be:	d004      	beq.n	80043ca <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e005      	b.n	80043d6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b008      	add	sp, #32
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043e8:	231e      	movs	r3, #30
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4abe      	ldr	r2, [pc, #760]	@ (8004708 <UART_SetConfig+0x328>)
 8004410:	4013      	ands	r3, r2
 8004412:	0019      	movs	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	430a      	orrs	r2, r1
 800441c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4ab9      	ldr	r2, [pc, #740]	@ (800470c <UART_SetConfig+0x32c>)
 8004426:	4013      	ands	r3, r2
 8004428:	0019      	movs	r1, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4ab0      	ldr	r2, [pc, #704]	@ (8004710 <UART_SetConfig+0x330>)
 800444e:	4013      	ands	r3, r2
 8004450:	0019      	movs	r1, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	430a      	orrs	r2, r1
 800445a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4aac      	ldr	r2, [pc, #688]	@ (8004714 <UART_SetConfig+0x334>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d127      	bne.n	80044b6 <UART_SetConfig+0xd6>
 8004466:	4bac      	ldr	r3, [pc, #688]	@ (8004718 <UART_SetConfig+0x338>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	2203      	movs	r2, #3
 800446c:	4013      	ands	r3, r2
 800446e:	2b03      	cmp	r3, #3
 8004470:	d00d      	beq.n	800448e <UART_SetConfig+0xae>
 8004472:	d81b      	bhi.n	80044ac <UART_SetConfig+0xcc>
 8004474:	2b02      	cmp	r3, #2
 8004476:	d014      	beq.n	80044a2 <UART_SetConfig+0xc2>
 8004478:	d818      	bhi.n	80044ac <UART_SetConfig+0xcc>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <UART_SetConfig+0xa4>
 800447e:	2b01      	cmp	r3, #1
 8004480:	d00a      	beq.n	8004498 <UART_SetConfig+0xb8>
 8004482:	e013      	b.n	80044ac <UART_SetConfig+0xcc>
 8004484:	231f      	movs	r3, #31
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e0bd      	b.n	800460a <UART_SetConfig+0x22a>
 800448e:	231f      	movs	r3, #31
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e0b8      	b.n	800460a <UART_SetConfig+0x22a>
 8004498:	231f      	movs	r3, #31
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	2204      	movs	r2, #4
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e0b3      	b.n	800460a <UART_SetConfig+0x22a>
 80044a2:	231f      	movs	r3, #31
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	2208      	movs	r2, #8
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e0ae      	b.n	800460a <UART_SetConfig+0x22a>
 80044ac:	231f      	movs	r3, #31
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2210      	movs	r2, #16
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e0a9      	b.n	800460a <UART_SetConfig+0x22a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a98      	ldr	r2, [pc, #608]	@ (800471c <UART_SetConfig+0x33c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d134      	bne.n	800452a <UART_SetConfig+0x14a>
 80044c0:	4b95      	ldr	r3, [pc, #596]	@ (8004718 <UART_SetConfig+0x338>)
 80044c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044c4:	23c0      	movs	r3, #192	@ 0xc0
 80044c6:	029b      	lsls	r3, r3, #10
 80044c8:	4013      	ands	r3, r2
 80044ca:	22c0      	movs	r2, #192	@ 0xc0
 80044cc:	0292      	lsls	r2, r2, #10
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d017      	beq.n	8004502 <UART_SetConfig+0x122>
 80044d2:	22c0      	movs	r2, #192	@ 0xc0
 80044d4:	0292      	lsls	r2, r2, #10
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d822      	bhi.n	8004520 <UART_SetConfig+0x140>
 80044da:	2280      	movs	r2, #128	@ 0x80
 80044dc:	0292      	lsls	r2, r2, #10
 80044de:	4293      	cmp	r3, r2
 80044e0:	d019      	beq.n	8004516 <UART_SetConfig+0x136>
 80044e2:	2280      	movs	r2, #128	@ 0x80
 80044e4:	0292      	lsls	r2, r2, #10
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d81a      	bhi.n	8004520 <UART_SetConfig+0x140>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <UART_SetConfig+0x118>
 80044ee:	2280      	movs	r2, #128	@ 0x80
 80044f0:	0252      	lsls	r2, r2, #9
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00a      	beq.n	800450c <UART_SetConfig+0x12c>
 80044f6:	e013      	b.n	8004520 <UART_SetConfig+0x140>
 80044f8:	231f      	movs	r3, #31
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e083      	b.n	800460a <UART_SetConfig+0x22a>
 8004502:	231f      	movs	r3, #31
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2202      	movs	r2, #2
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e07e      	b.n	800460a <UART_SetConfig+0x22a>
 800450c:	231f      	movs	r3, #31
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2204      	movs	r2, #4
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e079      	b.n	800460a <UART_SetConfig+0x22a>
 8004516:	231f      	movs	r3, #31
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2208      	movs	r2, #8
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e074      	b.n	800460a <UART_SetConfig+0x22a>
 8004520:	231f      	movs	r3, #31
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	2210      	movs	r2, #16
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e06f      	b.n	800460a <UART_SetConfig+0x22a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a7c      	ldr	r2, [pc, #496]	@ (8004720 <UART_SetConfig+0x340>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d134      	bne.n	800459e <UART_SetConfig+0x1be>
 8004534:	4b78      	ldr	r3, [pc, #480]	@ (8004718 <UART_SetConfig+0x338>)
 8004536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004538:	23c0      	movs	r3, #192	@ 0xc0
 800453a:	031b      	lsls	r3, r3, #12
 800453c:	4013      	ands	r3, r2
 800453e:	22c0      	movs	r2, #192	@ 0xc0
 8004540:	0312      	lsls	r2, r2, #12
 8004542:	4293      	cmp	r3, r2
 8004544:	d017      	beq.n	8004576 <UART_SetConfig+0x196>
 8004546:	22c0      	movs	r2, #192	@ 0xc0
 8004548:	0312      	lsls	r2, r2, #12
 800454a:	4293      	cmp	r3, r2
 800454c:	d822      	bhi.n	8004594 <UART_SetConfig+0x1b4>
 800454e:	2280      	movs	r2, #128	@ 0x80
 8004550:	0312      	lsls	r2, r2, #12
 8004552:	4293      	cmp	r3, r2
 8004554:	d019      	beq.n	800458a <UART_SetConfig+0x1aa>
 8004556:	2280      	movs	r2, #128	@ 0x80
 8004558:	0312      	lsls	r2, r2, #12
 800455a:	4293      	cmp	r3, r2
 800455c:	d81a      	bhi.n	8004594 <UART_SetConfig+0x1b4>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <UART_SetConfig+0x18c>
 8004562:	2280      	movs	r2, #128	@ 0x80
 8004564:	02d2      	lsls	r2, r2, #11
 8004566:	4293      	cmp	r3, r2
 8004568:	d00a      	beq.n	8004580 <UART_SetConfig+0x1a0>
 800456a:	e013      	b.n	8004594 <UART_SetConfig+0x1b4>
 800456c:	231f      	movs	r3, #31
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e049      	b.n	800460a <UART_SetConfig+0x22a>
 8004576:	231f      	movs	r3, #31
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2202      	movs	r2, #2
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e044      	b.n	800460a <UART_SetConfig+0x22a>
 8004580:	231f      	movs	r3, #31
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2204      	movs	r2, #4
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e03f      	b.n	800460a <UART_SetConfig+0x22a>
 800458a:	231f      	movs	r3, #31
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	2208      	movs	r2, #8
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e03a      	b.n	800460a <UART_SetConfig+0x22a>
 8004594:	231f      	movs	r3, #31
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	2210      	movs	r2, #16
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e035      	b.n	800460a <UART_SetConfig+0x22a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a60      	ldr	r2, [pc, #384]	@ (8004724 <UART_SetConfig+0x344>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d104      	bne.n	80045b2 <UART_SetConfig+0x1d2>
 80045a8:	231f      	movs	r3, #31
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e02b      	b.n	800460a <UART_SetConfig+0x22a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a5c      	ldr	r2, [pc, #368]	@ (8004728 <UART_SetConfig+0x348>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d104      	bne.n	80045c6 <UART_SetConfig+0x1e6>
 80045bc:	231f      	movs	r3, #31
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e021      	b.n	800460a <UART_SetConfig+0x22a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a58      	ldr	r2, [pc, #352]	@ (800472c <UART_SetConfig+0x34c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d104      	bne.n	80045da <UART_SetConfig+0x1fa>
 80045d0:	231f      	movs	r3, #31
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e017      	b.n	800460a <UART_SetConfig+0x22a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a54      	ldr	r2, [pc, #336]	@ (8004730 <UART_SetConfig+0x350>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d104      	bne.n	80045ee <UART_SetConfig+0x20e>
 80045e4:	231f      	movs	r3, #31
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e00d      	b.n	800460a <UART_SetConfig+0x22a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a50      	ldr	r2, [pc, #320]	@ (8004734 <UART_SetConfig+0x354>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d104      	bne.n	8004602 <UART_SetConfig+0x222>
 80045f8:	231f      	movs	r3, #31
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	e003      	b.n	800460a <UART_SetConfig+0x22a>
 8004602:	231f      	movs	r3, #31
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	2210      	movs	r2, #16
 8004608:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	2380      	movs	r3, #128	@ 0x80
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	429a      	cmp	r2, r3
 8004614:	d15c      	bne.n	80046d0 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8004616:	231f      	movs	r3, #31
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d015      	beq.n	800464c <UART_SetConfig+0x26c>
 8004620:	dc18      	bgt.n	8004654 <UART_SetConfig+0x274>
 8004622:	2b04      	cmp	r3, #4
 8004624:	d00d      	beq.n	8004642 <UART_SetConfig+0x262>
 8004626:	dc15      	bgt.n	8004654 <UART_SetConfig+0x274>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <UART_SetConfig+0x252>
 800462c:	2b02      	cmp	r3, #2
 800462e:	d005      	beq.n	800463c <UART_SetConfig+0x25c>
 8004630:	e010      	b.n	8004654 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004632:	f7fe fdcd 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8004636:	0003      	movs	r3, r0
 8004638:	61bb      	str	r3, [r7, #24]
        break;
 800463a:	e012      	b.n	8004662 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800463c:	4b3e      	ldr	r3, [pc, #248]	@ (8004738 <UART_SetConfig+0x358>)
 800463e:	61bb      	str	r3, [r7, #24]
        break;
 8004640:	e00f      	b.n	8004662 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004642:	f7fe fd49 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8004646:	0003      	movs	r3, r0
 8004648:	61bb      	str	r3, [r7, #24]
        break;
 800464a:	e00a      	b.n	8004662 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464c:	2380      	movs	r3, #128	@ 0x80
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	61bb      	str	r3, [r7, #24]
        break;
 8004652:	e006      	b.n	8004662 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004658:	231e      	movs	r3, #30
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
        break;
 8004660:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d100      	bne.n	800466a <UART_SetConfig+0x28a>
 8004668:	e095      	b.n	8004796 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	005a      	lsls	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	18d2      	adds	r2, r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	0019      	movs	r1, r3
 800467c:	0010      	movs	r0, r2
 800467e:	f7fb fd53 	bl	8000128 <__udivsi3>
 8004682:	0003      	movs	r3, r0
 8004684:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b0f      	cmp	r3, #15
 800468a:	d91c      	bls.n	80046c6 <UART_SetConfig+0x2e6>
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	2380      	movs	r3, #128	@ 0x80
 8004690:	025b      	lsls	r3, r3, #9
 8004692:	429a      	cmp	r2, r3
 8004694:	d217      	bcs.n	80046c6 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	b29a      	uxth	r2, r3
 800469a:	200e      	movs	r0, #14
 800469c:	183b      	adds	r3, r7, r0
 800469e:	210f      	movs	r1, #15
 80046a0:	438a      	bics	r2, r1
 80046a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2207      	movs	r2, #7
 80046ac:	4013      	ands	r3, r2
 80046ae:	b299      	uxth	r1, r3
 80046b0:	183b      	adds	r3, r7, r0
 80046b2:	183a      	adds	r2, r7, r0
 80046b4:	8812      	ldrh	r2, [r2, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	183a      	adds	r2, r7, r0
 80046c0:	8812      	ldrh	r2, [r2, #0]
 80046c2:	60da      	str	r2, [r3, #12]
 80046c4:	e067      	b.n	8004796 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80046c6:	231e      	movs	r3, #30
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	2201      	movs	r2, #1
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e062      	b.n	8004796 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046d0:	231f      	movs	r3, #31
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d030      	beq.n	800473c <UART_SetConfig+0x35c>
 80046da:	dc33      	bgt.n	8004744 <UART_SetConfig+0x364>
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d00d      	beq.n	80046fc <UART_SetConfig+0x31c>
 80046e0:	dc30      	bgt.n	8004744 <UART_SetConfig+0x364>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <UART_SetConfig+0x30c>
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d005      	beq.n	80046f6 <UART_SetConfig+0x316>
 80046ea:	e02b      	b.n	8004744 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe fd70 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 80046f0:	0003      	movs	r3, r0
 80046f2:	61bb      	str	r3, [r7, #24]
        break;
 80046f4:	e02d      	b.n	8004752 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f6:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <UART_SetConfig+0x358>)
 80046f8:	61bb      	str	r3, [r7, #24]
        break;
 80046fa:	e02a      	b.n	8004752 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fc:	f7fe fcec 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8004700:	0003      	movs	r3, r0
 8004702:	61bb      	str	r3, [r7, #24]
        break;
 8004704:	e025      	b.n	8004752 <UART_SetConfig+0x372>
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	efff69f3 	.word	0xefff69f3
 800470c:	ffffcfff 	.word	0xffffcfff
 8004710:	fffff4ff 	.word	0xfffff4ff
 8004714:	40013800 	.word	0x40013800
 8004718:	40021000 	.word	0x40021000
 800471c:	40004400 	.word	0x40004400
 8004720:	40004800 	.word	0x40004800
 8004724:	40004c00 	.word	0x40004c00
 8004728:	40005000 	.word	0x40005000
 800472c:	40011400 	.word	0x40011400
 8004730:	40011800 	.word	0x40011800
 8004734:	40011c00 	.word	0x40011c00
 8004738:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473c:	2380      	movs	r3, #128	@ 0x80
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	61bb      	str	r3, [r7, #24]
        break;
 8004742:	e006      	b.n	8004752 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004748:	231e      	movs	r3, #30
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
        break;
 8004750:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01e      	beq.n	8004796 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	085a      	lsrs	r2, r3, #1
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	18d2      	adds	r2, r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	0019      	movs	r1, r3
 8004768:	0010      	movs	r0, r2
 800476a:	f7fb fcdd 	bl	8000128 <__udivsi3>
 800476e:	0003      	movs	r3, r0
 8004770:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b0f      	cmp	r3, #15
 8004776:	d90a      	bls.n	800478e <UART_SetConfig+0x3ae>
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	2380      	movs	r3, #128	@ 0x80
 800477c:	025b      	lsls	r3, r3, #9
 800477e:	429a      	cmp	r2, r3
 8004780:	d205      	bcs.n	800478e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	b29a      	uxth	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60da      	str	r2, [r3, #12]
 800478c:	e003      	b.n	8004796 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800478e:	231e      	movs	r3, #30
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	2201      	movs	r2, #1
 8004794:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047a2:	231e      	movs	r3, #30
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	781b      	ldrb	r3, [r3, #0]
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b008      	add	sp, #32
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047bc:	2208      	movs	r2, #8
 80047be:	4013      	ands	r3, r2
 80047c0:	d00b      	beq.n	80047da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a4a      	ldr	r2, [pc, #296]	@ (80048f4 <UART_AdvFeatureConfig+0x144>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	0019      	movs	r1, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	2201      	movs	r2, #1
 80047e0:	4013      	ands	r3, r2
 80047e2:	d00b      	beq.n	80047fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4a43      	ldr	r2, [pc, #268]	@ (80048f8 <UART_AdvFeatureConfig+0x148>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	2202      	movs	r2, #2
 8004802:	4013      	ands	r3, r2
 8004804:	d00b      	beq.n	800481e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4a3b      	ldr	r2, [pc, #236]	@ (80048fc <UART_AdvFeatureConfig+0x14c>)
 800480e:	4013      	ands	r3, r2
 8004810:	0019      	movs	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	2204      	movs	r2, #4
 8004824:	4013      	ands	r3, r2
 8004826:	d00b      	beq.n	8004840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a34      	ldr	r2, [pc, #208]	@ (8004900 <UART_AdvFeatureConfig+0x150>)
 8004830:	4013      	ands	r3, r2
 8004832:	0019      	movs	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004844:	2210      	movs	r2, #16
 8004846:	4013      	ands	r3, r2
 8004848:	d00b      	beq.n	8004862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a2c      	ldr	r2, [pc, #176]	@ (8004904 <UART_AdvFeatureConfig+0x154>)
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004866:	2220      	movs	r2, #32
 8004868:	4013      	ands	r3, r2
 800486a:	d00b      	beq.n	8004884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4a25      	ldr	r2, [pc, #148]	@ (8004908 <UART_AdvFeatureConfig+0x158>)
 8004874:	4013      	ands	r3, r2
 8004876:	0019      	movs	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	2240      	movs	r2, #64	@ 0x40
 800488a:	4013      	ands	r3, r2
 800488c:	d01d      	beq.n	80048ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a1d      	ldr	r2, [pc, #116]	@ (800490c <UART_AdvFeatureConfig+0x15c>)
 8004896:	4013      	ands	r3, r2
 8004898:	0019      	movs	r1, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048aa:	2380      	movs	r3, #128	@ 0x80
 80048ac:	035b      	lsls	r3, r3, #13
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d10b      	bne.n	80048ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a15      	ldr	r2, [pc, #84]	@ (8004910 <UART_AdvFeatureConfig+0x160>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	0019      	movs	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	2280      	movs	r2, #128	@ 0x80
 80048d0:	4013      	ands	r3, r2
 80048d2:	d00b      	beq.n	80048ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4a0e      	ldr	r2, [pc, #56]	@ (8004914 <UART_AdvFeatureConfig+0x164>)
 80048dc:	4013      	ands	r3, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]
  }
}
 80048ec:	46c0      	nop			@ (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b002      	add	sp, #8
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	ffff7fff 	.word	0xffff7fff
 80048f8:	fffdffff 	.word	0xfffdffff
 80048fc:	fffeffff 	.word	0xfffeffff
 8004900:	fffbffff 	.word	0xfffbffff
 8004904:	ffffefff 	.word	0xffffefff
 8004908:	ffffdfff 	.word	0xffffdfff
 800490c:	ffefffff 	.word	0xffefffff
 8004910:	ff9fffff 	.word	0xff9fffff
 8004914:	fff7ffff 	.word	0xfff7ffff

08004918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b092      	sub	sp, #72	@ 0x48
 800491c:	af02      	add	r7, sp, #8
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2284      	movs	r2, #132	@ 0x84
 8004924:	2100      	movs	r1, #0
 8004926:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004928:	f7fc fe6a 	bl	8001600 <HAL_GetTick>
 800492c:	0003      	movs	r3, r0
 800492e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2208      	movs	r2, #8
 8004938:	4013      	ands	r3, r2
 800493a:	2b08      	cmp	r3, #8
 800493c:	d12c      	bne.n	8004998 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004940:	2280      	movs	r2, #128	@ 0x80
 8004942:	0391      	lsls	r1, r2, #14
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4a46      	ldr	r2, [pc, #280]	@ (8004a60 <UART_CheckIdleState+0x148>)
 8004948:	9200      	str	r2, [sp, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	f000 f88c 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d021      	beq.n	8004998 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800495c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800495e:	2301      	movs	r3, #1
 8004960:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004964:	f383 8810 	msr	PRIMASK, r3
}
 8004968:	46c0      	nop			@ (mov r8, r8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2180      	movs	r1, #128	@ 0x80
 8004976:	438a      	bics	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004980:	f383 8810 	msr	PRIMASK, r3
}
 8004984:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2278      	movs	r2, #120	@ 0x78
 8004990:	2100      	movs	r1, #0
 8004992:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e05f      	b.n	8004a58 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2204      	movs	r2, #4
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d146      	bne.n	8004a34 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a8:	2280      	movs	r2, #128	@ 0x80
 80049aa:	03d1      	lsls	r1, r2, #15
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004a60 <UART_CheckIdleState+0x148>)
 80049b0:	9200      	str	r2, [sp, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f000 f858 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 80049b8:	1e03      	subs	r3, r0, #0
 80049ba:	d03b      	beq.n	8004a34 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049bc:	f3ef 8310 	mrs	r3, PRIMASK
 80049c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80049c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c6:	2301      	movs	r3, #1
 80049c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f383 8810 	msr	PRIMASK, r3
}
 80049d0:	46c0      	nop			@ (mov r8, r8)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4921      	ldr	r1, [pc, #132]	@ (8004a64 <UART_CheckIdleState+0x14c>)
 80049de:	400a      	ands	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f383 8810 	msr	PRIMASK, r3
}
 80049ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ee:	f3ef 8310 	mrs	r3, PRIMASK
 80049f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80049f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80049f8:	2301      	movs	r3, #1
 80049fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f383 8810 	msr	PRIMASK, r3
}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	438a      	bics	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f383 8810 	msr	PRIMASK, r3
}
 8004a1e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2280      	movs	r2, #128	@ 0x80
 8004a24:	2120      	movs	r1, #32
 8004a26:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2278      	movs	r2, #120	@ 0x78
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e011      	b.n	8004a58 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2280      	movs	r2, #128	@ 0x80
 8004a3e:	2120      	movs	r1, #32
 8004a40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2278      	movs	r2, #120	@ 0x78
 8004a52:	2100      	movs	r1, #0
 8004a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b010      	add	sp, #64	@ 0x40
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	01ffffff 	.word	0x01ffffff
 8004a64:	fffffedf 	.word	0xfffffedf

08004a68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	1dfb      	adds	r3, r7, #7
 8004a76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a78:	e051      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	d04e      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a80:	f7fc fdbe 	bl	8001600 <HAL_GetTick>
 8004a84:	0002      	movs	r2, r0
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e051      	b.n	8004b3e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d03b      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b80      	cmp	r3, #128	@ 0x80
 8004aaa:	d038      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b40      	cmp	r3, #64	@ 0x40
 8004ab0:	d035      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	2208      	movs	r2, #8
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d111      	bne.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 f83c 	bl	8004b48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2284      	movs	r2, #132	@ 0x84
 8004ad4:	2108      	movs	r1, #8
 8004ad6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2278      	movs	r2, #120	@ 0x78
 8004adc:	2100      	movs	r1, #0
 8004ade:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e02c      	b.n	8004b3e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	401a      	ands	r2, r3
 8004af0:	2380      	movs	r3, #128	@ 0x80
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d112      	bne.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2280      	movs	r2, #128	@ 0x80
 8004afe:	0112      	lsls	r2, r2, #4
 8004b00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 f81f 	bl	8004b48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2284      	movs	r2, #132	@ 0x84
 8004b0e:	2120      	movs	r1, #32
 8004b10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2278      	movs	r2, #120	@ 0x78
 8004b16:	2100      	movs	r1, #0
 8004b18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e00f      	b.n	8004b3e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	4013      	ands	r3, r2
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	425a      	negs	r2, r3
 8004b2e:	4153      	adcs	r3, r2
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	001a      	movs	r2, r3
 8004b34:	1dfb      	adds	r3, r7, #7
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d09e      	beq.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08e      	sub	sp, #56	@ 0x38
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b50:	f3ef 8310 	mrs	r3, PRIMASK
 8004b54:	617b      	str	r3, [r7, #20]
  return(result);
 8004b56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4926      	ldr	r1, [pc, #152]	@ (8004c0c <UART_EndRxTransfer+0xc4>)
 8004b72:	400a      	ands	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f383 8810 	msr	PRIMASK, r3
}
 8004b80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b82:	f3ef 8310 	mrs	r3, PRIMASK
 8004b86:	623b      	str	r3, [r7, #32]
  return(result);
 8004b88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	f383 8810 	msr	PRIMASK, r3
}
 8004b96:	46c0      	nop			@ (mov r8, r8)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	438a      	bics	r2, r1
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	f383 8810 	msr	PRIMASK, r3
}
 8004bb2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d118      	bne.n	8004bee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f383 8810 	msr	PRIMASK, r3
}
 8004bd0:	46c0      	nop			@ (mov r8, r8)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2110      	movs	r1, #16
 8004bde:	438a      	bics	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2280      	movs	r2, #128	@ 0x80
 8004bf2:	2120      	movs	r1, #32
 8004bf4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b00e      	add	sp, #56	@ 0x38
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	fffffedf 	.word	0xfffffedf

08004c10 <siprintf>:
 8004c10:	b40e      	push	{r1, r2, r3}
 8004c12:	b510      	push	{r4, lr}
 8004c14:	2400      	movs	r4, #0
 8004c16:	490c      	ldr	r1, [pc, #48]	@ (8004c48 <siprintf+0x38>)
 8004c18:	b09d      	sub	sp, #116	@ 0x74
 8004c1a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c1c:	9002      	str	r0, [sp, #8]
 8004c1e:	9006      	str	r0, [sp, #24]
 8004c20:	9107      	str	r1, [sp, #28]
 8004c22:	9104      	str	r1, [sp, #16]
 8004c24:	4809      	ldr	r0, [pc, #36]	@ (8004c4c <siprintf+0x3c>)
 8004c26:	490a      	ldr	r1, [pc, #40]	@ (8004c50 <siprintf+0x40>)
 8004c28:	cb04      	ldmia	r3!, {r2}
 8004c2a:	9105      	str	r1, [sp, #20]
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	a902      	add	r1, sp, #8
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c34:	f000 f99e 	bl	8004f74 <_svfiprintf_r>
 8004c38:	9b02      	ldr	r3, [sp, #8]
 8004c3a:	701c      	strb	r4, [r3, #0]
 8004c3c:	b01d      	add	sp, #116	@ 0x74
 8004c3e:	bc10      	pop	{r4}
 8004c40:	bc08      	pop	{r3}
 8004c42:	b003      	add	sp, #12
 8004c44:	4718      	bx	r3
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	7fffffff 	.word	0x7fffffff
 8004c4c:	20000010 	.word	0x20000010
 8004c50:	ffff0208 	.word	0xffff0208

08004c54 <memset>:
 8004c54:	0003      	movs	r3, r0
 8004c56:	1882      	adds	r2, r0, r2
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d100      	bne.n	8004c5e <memset+0xa>
 8004c5c:	4770      	bx	lr
 8004c5e:	7019      	strb	r1, [r3, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	e7f9      	b.n	8004c58 <memset+0x4>

08004c64 <__errno>:
 8004c64:	4b01      	ldr	r3, [pc, #4]	@ (8004c6c <__errno+0x8>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	4770      	bx	lr
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	20000010 	.word	0x20000010

08004c70 <__libc_init_array>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	2600      	movs	r6, #0
 8004c74:	4c0c      	ldr	r4, [pc, #48]	@ (8004ca8 <__libc_init_array+0x38>)
 8004c76:	4d0d      	ldr	r5, [pc, #52]	@ (8004cac <__libc_init_array+0x3c>)
 8004c78:	1b64      	subs	r4, r4, r5
 8004c7a:	10a4      	asrs	r4, r4, #2
 8004c7c:	42a6      	cmp	r6, r4
 8004c7e:	d109      	bne.n	8004c94 <__libc_init_array+0x24>
 8004c80:	2600      	movs	r6, #0
 8004c82:	f000 fc61 	bl	8005548 <_init>
 8004c86:	4c0a      	ldr	r4, [pc, #40]	@ (8004cb0 <__libc_init_array+0x40>)
 8004c88:	4d0a      	ldr	r5, [pc, #40]	@ (8004cb4 <__libc_init_array+0x44>)
 8004c8a:	1b64      	subs	r4, r4, r5
 8004c8c:	10a4      	asrs	r4, r4, #2
 8004c8e:	42a6      	cmp	r6, r4
 8004c90:	d105      	bne.n	8004c9e <__libc_init_array+0x2e>
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	00b3      	lsls	r3, r6, #2
 8004c96:	58eb      	ldr	r3, [r5, r3]
 8004c98:	4798      	blx	r3
 8004c9a:	3601      	adds	r6, #1
 8004c9c:	e7ee      	b.n	8004c7c <__libc_init_array+0xc>
 8004c9e:	00b3      	lsls	r3, r6, #2
 8004ca0:	58eb      	ldr	r3, [r5, r3]
 8004ca2:	4798      	blx	r3
 8004ca4:	3601      	adds	r6, #1
 8004ca6:	e7f2      	b.n	8004c8e <__libc_init_array+0x1e>
 8004ca8:	08005604 	.word	0x08005604
 8004cac:	08005604 	.word	0x08005604
 8004cb0:	08005608 	.word	0x08005608
 8004cb4:	08005604 	.word	0x08005604

08004cb8 <__retarget_lock_acquire_recursive>:
 8004cb8:	4770      	bx	lr

08004cba <__retarget_lock_release_recursive>:
 8004cba:	4770      	bx	lr

08004cbc <_free_r>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	0005      	movs	r5, r0
 8004cc0:	1e0c      	subs	r4, r1, #0
 8004cc2:	d010      	beq.n	8004ce6 <_free_r+0x2a>
 8004cc4:	3c04      	subs	r4, #4
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da00      	bge.n	8004cce <_free_r+0x12>
 8004ccc:	18e4      	adds	r4, r4, r3
 8004cce:	0028      	movs	r0, r5
 8004cd0:	f000 f8e0 	bl	8004e94 <__malloc_lock>
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d4c <_free_r+0x90>)
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <_free_r+0x2c>
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	6014      	str	r4, [r2, #0]
 8004ce0:	0028      	movs	r0, r5
 8004ce2:	f000 f8df 	bl	8004ea4 <__malloc_unlock>
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	d908      	bls.n	8004cfe <_free_r+0x42>
 8004cec:	6820      	ldr	r0, [r4, #0]
 8004cee:	1821      	adds	r1, r4, r0
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	d1f3      	bne.n	8004cdc <_free_r+0x20>
 8004cf4:	6819      	ldr	r1, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	1809      	adds	r1, r1, r0
 8004cfa:	6021      	str	r1, [r4, #0]
 8004cfc:	e7ee      	b.n	8004cdc <_free_r+0x20>
 8004cfe:	001a      	movs	r2, r3
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <_free_r+0x4e>
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	d9f9      	bls.n	8004cfe <_free_r+0x42>
 8004d0a:	6811      	ldr	r1, [r2, #0]
 8004d0c:	1850      	adds	r0, r2, r1
 8004d0e:	42a0      	cmp	r0, r4
 8004d10:	d10b      	bne.n	8004d2a <_free_r+0x6e>
 8004d12:	6820      	ldr	r0, [r4, #0]
 8004d14:	1809      	adds	r1, r1, r0
 8004d16:	1850      	adds	r0, r2, r1
 8004d18:	6011      	str	r1, [r2, #0]
 8004d1a:	4283      	cmp	r3, r0
 8004d1c:	d1e0      	bne.n	8004ce0 <_free_r+0x24>
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	1841      	adds	r1, r0, r1
 8004d24:	6011      	str	r1, [r2, #0]
 8004d26:	6053      	str	r3, [r2, #4]
 8004d28:	e7da      	b.n	8004ce0 <_free_r+0x24>
 8004d2a:	42a0      	cmp	r0, r4
 8004d2c:	d902      	bls.n	8004d34 <_free_r+0x78>
 8004d2e:	230c      	movs	r3, #12
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	e7d5      	b.n	8004ce0 <_free_r+0x24>
 8004d34:	6820      	ldr	r0, [r4, #0]
 8004d36:	1821      	adds	r1, r4, r0
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	d103      	bne.n	8004d44 <_free_r+0x88>
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	1809      	adds	r1, r1, r0
 8004d42:	6021      	str	r1, [r4, #0]
 8004d44:	6063      	str	r3, [r4, #4]
 8004d46:	6054      	str	r4, [r2, #4]
 8004d48:	e7ca      	b.n	8004ce0 <_free_r+0x24>
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	20000788 	.word	0x20000788

08004d50 <sbrk_aligned>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4e0f      	ldr	r6, [pc, #60]	@ (8004d90 <sbrk_aligned+0x40>)
 8004d54:	000d      	movs	r5, r1
 8004d56:	6831      	ldr	r1, [r6, #0]
 8004d58:	0004      	movs	r4, r0
 8004d5a:	2900      	cmp	r1, #0
 8004d5c:	d102      	bne.n	8004d64 <sbrk_aligned+0x14>
 8004d5e:	f000 fb95 	bl	800548c <_sbrk_r>
 8004d62:	6030      	str	r0, [r6, #0]
 8004d64:	0029      	movs	r1, r5
 8004d66:	0020      	movs	r0, r4
 8004d68:	f000 fb90 	bl	800548c <_sbrk_r>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d103      	bne.n	8004d78 <sbrk_aligned+0x28>
 8004d70:	2501      	movs	r5, #1
 8004d72:	426d      	negs	r5, r5
 8004d74:	0028      	movs	r0, r5
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	2303      	movs	r3, #3
 8004d7a:	1cc5      	adds	r5, r0, #3
 8004d7c:	439d      	bics	r5, r3
 8004d7e:	42a8      	cmp	r0, r5
 8004d80:	d0f8      	beq.n	8004d74 <sbrk_aligned+0x24>
 8004d82:	1a29      	subs	r1, r5, r0
 8004d84:	0020      	movs	r0, r4
 8004d86:	f000 fb81 	bl	800548c <_sbrk_r>
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d1f2      	bne.n	8004d74 <sbrk_aligned+0x24>
 8004d8e:	e7ef      	b.n	8004d70 <sbrk_aligned+0x20>
 8004d90:	20000784 	.word	0x20000784

08004d94 <_malloc_r>:
 8004d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d96:	2203      	movs	r2, #3
 8004d98:	1ccb      	adds	r3, r1, #3
 8004d9a:	4393      	bics	r3, r2
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	0005      	movs	r5, r0
 8004da0:	001f      	movs	r7, r3
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d234      	bcs.n	8004e10 <_malloc_r+0x7c>
 8004da6:	270c      	movs	r7, #12
 8004da8:	42b9      	cmp	r1, r7
 8004daa:	d833      	bhi.n	8004e14 <_malloc_r+0x80>
 8004dac:	0028      	movs	r0, r5
 8004dae:	f000 f871 	bl	8004e94 <__malloc_lock>
 8004db2:	4e37      	ldr	r6, [pc, #220]	@ (8004e90 <_malloc_r+0xfc>)
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	001c      	movs	r4, r3
 8004db8:	2c00      	cmp	r4, #0
 8004dba:	d12f      	bne.n	8004e1c <_malloc_r+0x88>
 8004dbc:	0039      	movs	r1, r7
 8004dbe:	0028      	movs	r0, r5
 8004dc0:	f7ff ffc6 	bl	8004d50 <sbrk_aligned>
 8004dc4:	0004      	movs	r4, r0
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	d15f      	bne.n	8004e8a <_malloc_r+0xf6>
 8004dca:	6834      	ldr	r4, [r6, #0]
 8004dcc:	9400      	str	r4, [sp, #0]
 8004dce:	9b00      	ldr	r3, [sp, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d14a      	bne.n	8004e6a <_malloc_r+0xd6>
 8004dd4:	2c00      	cmp	r4, #0
 8004dd6:	d052      	beq.n	8004e7e <_malloc_r+0xea>
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	0028      	movs	r0, r5
 8004ddc:	18e3      	adds	r3, r4, r3
 8004dde:	9900      	ldr	r1, [sp, #0]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	f000 fb53 	bl	800548c <_sbrk_r>
 8004de6:	9b01      	ldr	r3, [sp, #4]
 8004de8:	4283      	cmp	r3, r0
 8004dea:	d148      	bne.n	8004e7e <_malloc_r+0xea>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	0028      	movs	r0, r5
 8004df0:	1aff      	subs	r7, r7, r3
 8004df2:	0039      	movs	r1, r7
 8004df4:	f7ff ffac 	bl	8004d50 <sbrk_aligned>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d040      	beq.n	8004e7e <_malloc_r+0xea>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	19db      	adds	r3, r3, r7
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	6833      	ldr	r3, [r6, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	2a00      	cmp	r2, #0
 8004e08:	d133      	bne.n	8004e72 <_malloc_r+0xde>
 8004e0a:	9b00      	ldr	r3, [sp, #0]
 8004e0c:	6033      	str	r3, [r6, #0]
 8004e0e:	e019      	b.n	8004e44 <_malloc_r+0xb0>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	dac9      	bge.n	8004da8 <_malloc_r+0x14>
 8004e14:	230c      	movs	r3, #12
 8004e16:	602b      	str	r3, [r5, #0]
 8004e18:	2000      	movs	r0, #0
 8004e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e1c:	6821      	ldr	r1, [r4, #0]
 8004e1e:	1bc9      	subs	r1, r1, r7
 8004e20:	d420      	bmi.n	8004e64 <_malloc_r+0xd0>
 8004e22:	290b      	cmp	r1, #11
 8004e24:	d90a      	bls.n	8004e3c <_malloc_r+0xa8>
 8004e26:	19e2      	adds	r2, r4, r7
 8004e28:	6027      	str	r7, [r4, #0]
 8004e2a:	42a3      	cmp	r3, r4
 8004e2c:	d104      	bne.n	8004e38 <_malloc_r+0xa4>
 8004e2e:	6032      	str	r2, [r6, #0]
 8004e30:	6863      	ldr	r3, [r4, #4]
 8004e32:	6011      	str	r1, [r2, #0]
 8004e34:	6053      	str	r3, [r2, #4]
 8004e36:	e005      	b.n	8004e44 <_malloc_r+0xb0>
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	e7f9      	b.n	8004e30 <_malloc_r+0x9c>
 8004e3c:	6862      	ldr	r2, [r4, #4]
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	d10e      	bne.n	8004e60 <_malloc_r+0xcc>
 8004e42:	6032      	str	r2, [r6, #0]
 8004e44:	0028      	movs	r0, r5
 8004e46:	f000 f82d 	bl	8004ea4 <__malloc_unlock>
 8004e4a:	0020      	movs	r0, r4
 8004e4c:	2207      	movs	r2, #7
 8004e4e:	300b      	adds	r0, #11
 8004e50:	1d23      	adds	r3, r4, #4
 8004e52:	4390      	bics	r0, r2
 8004e54:	1ac2      	subs	r2, r0, r3
 8004e56:	4298      	cmp	r0, r3
 8004e58:	d0df      	beq.n	8004e1a <_malloc_r+0x86>
 8004e5a:	1a1b      	subs	r3, r3, r0
 8004e5c:	50a3      	str	r3, [r4, r2]
 8004e5e:	e7dc      	b.n	8004e1a <_malloc_r+0x86>
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	e7ef      	b.n	8004e44 <_malloc_r+0xb0>
 8004e64:	0023      	movs	r3, r4
 8004e66:	6864      	ldr	r4, [r4, #4]
 8004e68:	e7a6      	b.n	8004db8 <_malloc_r+0x24>
 8004e6a:	9c00      	ldr	r4, [sp, #0]
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	e7ad      	b.n	8004dce <_malloc_r+0x3a>
 8004e72:	001a      	movs	r2, r3
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	42a3      	cmp	r3, r4
 8004e78:	d1fb      	bne.n	8004e72 <_malloc_r+0xde>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e7da      	b.n	8004e34 <_malloc_r+0xa0>
 8004e7e:	230c      	movs	r3, #12
 8004e80:	0028      	movs	r0, r5
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f000 f80e 	bl	8004ea4 <__malloc_unlock>
 8004e88:	e7c6      	b.n	8004e18 <_malloc_r+0x84>
 8004e8a:	6007      	str	r7, [r0, #0]
 8004e8c:	e7da      	b.n	8004e44 <_malloc_r+0xb0>
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	20000788 	.word	0x20000788

08004e94 <__malloc_lock>:
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4802      	ldr	r0, [pc, #8]	@ (8004ea0 <__malloc_lock+0xc>)
 8004e98:	f7ff ff0e 	bl	8004cb8 <__retarget_lock_acquire_recursive>
 8004e9c:	bd10      	pop	{r4, pc}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	20000780 	.word	0x20000780

08004ea4 <__malloc_unlock>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	4802      	ldr	r0, [pc, #8]	@ (8004eb0 <__malloc_unlock+0xc>)
 8004ea8:	f7ff ff07 	bl	8004cba <__retarget_lock_release_recursive>
 8004eac:	bd10      	pop	{r4, pc}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	20000780 	.word	0x20000780

08004eb4 <__ssputs_r>:
 8004eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb6:	688e      	ldr	r6, [r1, #8]
 8004eb8:	b085      	sub	sp, #20
 8004eba:	001f      	movs	r7, r3
 8004ebc:	000c      	movs	r4, r1
 8004ebe:	680b      	ldr	r3, [r1, #0]
 8004ec0:	9002      	str	r0, [sp, #8]
 8004ec2:	9203      	str	r2, [sp, #12]
 8004ec4:	42be      	cmp	r6, r7
 8004ec6:	d830      	bhi.n	8004f2a <__ssputs_r+0x76>
 8004ec8:	210c      	movs	r1, #12
 8004eca:	5e62      	ldrsh	r2, [r4, r1]
 8004ecc:	2190      	movs	r1, #144	@ 0x90
 8004ece:	00c9      	lsls	r1, r1, #3
 8004ed0:	420a      	tst	r2, r1
 8004ed2:	d028      	beq.n	8004f26 <__ssputs_r+0x72>
 8004ed4:	2003      	movs	r0, #3
 8004ed6:	6921      	ldr	r1, [r4, #16]
 8004ed8:	1a5b      	subs	r3, r3, r1
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	6963      	ldr	r3, [r4, #20]
 8004ede:	4343      	muls	r3, r0
 8004ee0:	9801      	ldr	r0, [sp, #4]
 8004ee2:	0fdd      	lsrs	r5, r3, #31
 8004ee4:	18ed      	adds	r5, r5, r3
 8004ee6:	1c7b      	adds	r3, r7, #1
 8004ee8:	181b      	adds	r3, r3, r0
 8004eea:	106d      	asrs	r5, r5, #1
 8004eec:	42ab      	cmp	r3, r5
 8004eee:	d900      	bls.n	8004ef2 <__ssputs_r+0x3e>
 8004ef0:	001d      	movs	r5, r3
 8004ef2:	0552      	lsls	r2, r2, #21
 8004ef4:	d528      	bpl.n	8004f48 <__ssputs_r+0x94>
 8004ef6:	0029      	movs	r1, r5
 8004ef8:	9802      	ldr	r0, [sp, #8]
 8004efa:	f7ff ff4b 	bl	8004d94 <_malloc_r>
 8004efe:	1e06      	subs	r6, r0, #0
 8004f00:	d02c      	beq.n	8004f5c <__ssputs_r+0xa8>
 8004f02:	9a01      	ldr	r2, [sp, #4]
 8004f04:	6921      	ldr	r1, [r4, #16]
 8004f06:	f000 fade 	bl	80054c6 <memcpy>
 8004f0a:	89a2      	ldrh	r2, [r4, #12]
 8004f0c:	4b18      	ldr	r3, [pc, #96]	@ (8004f70 <__ssputs_r+0xbc>)
 8004f0e:	401a      	ands	r2, r3
 8004f10:	2380      	movs	r3, #128	@ 0x80
 8004f12:	4313      	orrs	r3, r2
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	9b01      	ldr	r3, [sp, #4]
 8004f18:	6126      	str	r6, [r4, #16]
 8004f1a:	18f6      	adds	r6, r6, r3
 8004f1c:	6026      	str	r6, [r4, #0]
 8004f1e:	003e      	movs	r6, r7
 8004f20:	6165      	str	r5, [r4, #20]
 8004f22:	1aed      	subs	r5, r5, r3
 8004f24:	60a5      	str	r5, [r4, #8]
 8004f26:	42be      	cmp	r6, r7
 8004f28:	d900      	bls.n	8004f2c <__ssputs_r+0x78>
 8004f2a:	003e      	movs	r6, r7
 8004f2c:	0032      	movs	r2, r6
 8004f2e:	9903      	ldr	r1, [sp, #12]
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	f000 fa99 	bl	8005468 <memmove>
 8004f36:	2000      	movs	r0, #0
 8004f38:	68a3      	ldr	r3, [r4, #8]
 8004f3a:	1b9b      	subs	r3, r3, r6
 8004f3c:	60a3      	str	r3, [r4, #8]
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	199b      	adds	r3, r3, r6
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	b005      	add	sp, #20
 8004f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f48:	002a      	movs	r2, r5
 8004f4a:	9802      	ldr	r0, [sp, #8]
 8004f4c:	f000 fac4 	bl	80054d8 <_realloc_r>
 8004f50:	1e06      	subs	r6, r0, #0
 8004f52:	d1e0      	bne.n	8004f16 <__ssputs_r+0x62>
 8004f54:	6921      	ldr	r1, [r4, #16]
 8004f56:	9802      	ldr	r0, [sp, #8]
 8004f58:	f7ff feb0 	bl	8004cbc <_free_r>
 8004f5c:	230c      	movs	r3, #12
 8004f5e:	2001      	movs	r0, #1
 8004f60:	9a02      	ldr	r2, [sp, #8]
 8004f62:	4240      	negs	r0, r0
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	89a2      	ldrh	r2, [r4, #12]
 8004f68:	3334      	adds	r3, #52	@ 0x34
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	e7e9      	b.n	8004f44 <__ssputs_r+0x90>
 8004f70:	fffffb7f 	.word	0xfffffb7f

08004f74 <_svfiprintf_r>:
 8004f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f76:	b0a1      	sub	sp, #132	@ 0x84
 8004f78:	9003      	str	r0, [sp, #12]
 8004f7a:	001d      	movs	r5, r3
 8004f7c:	898b      	ldrh	r3, [r1, #12]
 8004f7e:	000f      	movs	r7, r1
 8004f80:	0016      	movs	r6, r2
 8004f82:	061b      	lsls	r3, r3, #24
 8004f84:	d511      	bpl.n	8004faa <_svfiprintf_r+0x36>
 8004f86:	690b      	ldr	r3, [r1, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10e      	bne.n	8004faa <_svfiprintf_r+0x36>
 8004f8c:	2140      	movs	r1, #64	@ 0x40
 8004f8e:	f7ff ff01 	bl	8004d94 <_malloc_r>
 8004f92:	6038      	str	r0, [r7, #0]
 8004f94:	6138      	str	r0, [r7, #16]
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d105      	bne.n	8004fa6 <_svfiprintf_r+0x32>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	9a03      	ldr	r2, [sp, #12]
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	4240      	negs	r0, r0
 8004fa4:	e0cf      	b.n	8005146 <_svfiprintf_r+0x1d2>
 8004fa6:	2340      	movs	r3, #64	@ 0x40
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	2300      	movs	r3, #0
 8004fac:	ac08      	add	r4, sp, #32
 8004fae:	6163      	str	r3, [r4, #20]
 8004fb0:	3320      	adds	r3, #32
 8004fb2:	7663      	strb	r3, [r4, #25]
 8004fb4:	3310      	adds	r3, #16
 8004fb6:	76a3      	strb	r3, [r4, #26]
 8004fb8:	9507      	str	r5, [sp, #28]
 8004fba:	0035      	movs	r5, r6
 8004fbc:	782b      	ldrb	r3, [r5, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <_svfiprintf_r+0x52>
 8004fc2:	2b25      	cmp	r3, #37	@ 0x25
 8004fc4:	d148      	bne.n	8005058 <_svfiprintf_r+0xe4>
 8004fc6:	1bab      	subs	r3, r5, r6
 8004fc8:	9305      	str	r3, [sp, #20]
 8004fca:	42b5      	cmp	r5, r6
 8004fcc:	d00b      	beq.n	8004fe6 <_svfiprintf_r+0x72>
 8004fce:	0032      	movs	r2, r6
 8004fd0:	0039      	movs	r1, r7
 8004fd2:	9803      	ldr	r0, [sp, #12]
 8004fd4:	f7ff ff6e 	bl	8004eb4 <__ssputs_r>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d100      	bne.n	8004fde <_svfiprintf_r+0x6a>
 8004fdc:	e0ae      	b.n	800513c <_svfiprintf_r+0x1c8>
 8004fde:	6963      	ldr	r3, [r4, #20]
 8004fe0:	9a05      	ldr	r2, [sp, #20]
 8004fe2:	189b      	adds	r3, r3, r2
 8004fe4:	6163      	str	r3, [r4, #20]
 8004fe6:	782b      	ldrb	r3, [r5, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d100      	bne.n	8004fee <_svfiprintf_r+0x7a>
 8004fec:	e0a6      	b.n	800513c <_svfiprintf_r+0x1c8>
 8004fee:	2201      	movs	r2, #1
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4252      	negs	r2, r2
 8004ff4:	6062      	str	r2, [r4, #4]
 8004ff6:	a904      	add	r1, sp, #16
 8004ff8:	3254      	adds	r2, #84	@ 0x54
 8004ffa:	1852      	adds	r2, r2, r1
 8004ffc:	1c6e      	adds	r6, r5, #1
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	60e3      	str	r3, [r4, #12]
 8005002:	60a3      	str	r3, [r4, #8]
 8005004:	7013      	strb	r3, [r2, #0]
 8005006:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005008:	4b54      	ldr	r3, [pc, #336]	@ (800515c <_svfiprintf_r+0x1e8>)
 800500a:	2205      	movs	r2, #5
 800500c:	0018      	movs	r0, r3
 800500e:	7831      	ldrb	r1, [r6, #0]
 8005010:	9305      	str	r3, [sp, #20]
 8005012:	f000 fa4d 	bl	80054b0 <memchr>
 8005016:	1c75      	adds	r5, r6, #1
 8005018:	2800      	cmp	r0, #0
 800501a:	d11f      	bne.n	800505c <_svfiprintf_r+0xe8>
 800501c:	6822      	ldr	r2, [r4, #0]
 800501e:	06d3      	lsls	r3, r2, #27
 8005020:	d504      	bpl.n	800502c <_svfiprintf_r+0xb8>
 8005022:	2353      	movs	r3, #83	@ 0x53
 8005024:	a904      	add	r1, sp, #16
 8005026:	185b      	adds	r3, r3, r1
 8005028:	2120      	movs	r1, #32
 800502a:	7019      	strb	r1, [r3, #0]
 800502c:	0713      	lsls	r3, r2, #28
 800502e:	d504      	bpl.n	800503a <_svfiprintf_r+0xc6>
 8005030:	2353      	movs	r3, #83	@ 0x53
 8005032:	a904      	add	r1, sp, #16
 8005034:	185b      	adds	r3, r3, r1
 8005036:	212b      	movs	r1, #43	@ 0x2b
 8005038:	7019      	strb	r1, [r3, #0]
 800503a:	7833      	ldrb	r3, [r6, #0]
 800503c:	2b2a      	cmp	r3, #42	@ 0x2a
 800503e:	d016      	beq.n	800506e <_svfiprintf_r+0xfa>
 8005040:	0035      	movs	r5, r6
 8005042:	2100      	movs	r1, #0
 8005044:	200a      	movs	r0, #10
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	782a      	ldrb	r2, [r5, #0]
 800504a:	1c6e      	adds	r6, r5, #1
 800504c:	3a30      	subs	r2, #48	@ 0x30
 800504e:	2a09      	cmp	r2, #9
 8005050:	d950      	bls.n	80050f4 <_svfiprintf_r+0x180>
 8005052:	2900      	cmp	r1, #0
 8005054:	d111      	bne.n	800507a <_svfiprintf_r+0x106>
 8005056:	e017      	b.n	8005088 <_svfiprintf_r+0x114>
 8005058:	3501      	adds	r5, #1
 800505a:	e7af      	b.n	8004fbc <_svfiprintf_r+0x48>
 800505c:	9b05      	ldr	r3, [sp, #20]
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	1ac0      	subs	r0, r0, r3
 8005062:	2301      	movs	r3, #1
 8005064:	4083      	lsls	r3, r0
 8005066:	4313      	orrs	r3, r2
 8005068:	002e      	movs	r6, r5
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	e7cc      	b.n	8005008 <_svfiprintf_r+0x94>
 800506e:	9b07      	ldr	r3, [sp, #28]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	9107      	str	r1, [sp, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	db01      	blt.n	800507e <_svfiprintf_r+0x10a>
 800507a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800507c:	e004      	b.n	8005088 <_svfiprintf_r+0x114>
 800507e:	425b      	negs	r3, r3
 8005080:	60e3      	str	r3, [r4, #12]
 8005082:	2302      	movs	r3, #2
 8005084:	4313      	orrs	r3, r2
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	782b      	ldrb	r3, [r5, #0]
 800508a:	2b2e      	cmp	r3, #46	@ 0x2e
 800508c:	d10c      	bne.n	80050a8 <_svfiprintf_r+0x134>
 800508e:	786b      	ldrb	r3, [r5, #1]
 8005090:	2b2a      	cmp	r3, #42	@ 0x2a
 8005092:	d134      	bne.n	80050fe <_svfiprintf_r+0x18a>
 8005094:	9b07      	ldr	r3, [sp, #28]
 8005096:	3502      	adds	r5, #2
 8005098:	1d1a      	adds	r2, r3, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	9207      	str	r2, [sp, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	da01      	bge.n	80050a6 <_svfiprintf_r+0x132>
 80050a2:	2301      	movs	r3, #1
 80050a4:	425b      	negs	r3, r3
 80050a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80050a8:	4e2d      	ldr	r6, [pc, #180]	@ (8005160 <_svfiprintf_r+0x1ec>)
 80050aa:	2203      	movs	r2, #3
 80050ac:	0030      	movs	r0, r6
 80050ae:	7829      	ldrb	r1, [r5, #0]
 80050b0:	f000 f9fe 	bl	80054b0 <memchr>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d006      	beq.n	80050c6 <_svfiprintf_r+0x152>
 80050b8:	2340      	movs	r3, #64	@ 0x40
 80050ba:	1b80      	subs	r0, r0, r6
 80050bc:	4083      	lsls	r3, r0
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	3501      	adds	r5, #1
 80050c2:	4313      	orrs	r3, r2
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	7829      	ldrb	r1, [r5, #0]
 80050c8:	2206      	movs	r2, #6
 80050ca:	4826      	ldr	r0, [pc, #152]	@ (8005164 <_svfiprintf_r+0x1f0>)
 80050cc:	1c6e      	adds	r6, r5, #1
 80050ce:	7621      	strb	r1, [r4, #24]
 80050d0:	f000 f9ee 	bl	80054b0 <memchr>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d038      	beq.n	800514a <_svfiprintf_r+0x1d6>
 80050d8:	4b23      	ldr	r3, [pc, #140]	@ (8005168 <_svfiprintf_r+0x1f4>)
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d122      	bne.n	8005124 <_svfiprintf_r+0x1b0>
 80050de:	2207      	movs	r2, #7
 80050e0:	9b07      	ldr	r3, [sp, #28]
 80050e2:	3307      	adds	r3, #7
 80050e4:	4393      	bics	r3, r2
 80050e6:	3308      	adds	r3, #8
 80050e8:	9307      	str	r3, [sp, #28]
 80050ea:	6963      	ldr	r3, [r4, #20]
 80050ec:	9a04      	ldr	r2, [sp, #16]
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	6163      	str	r3, [r4, #20]
 80050f2:	e762      	b.n	8004fba <_svfiprintf_r+0x46>
 80050f4:	4343      	muls	r3, r0
 80050f6:	0035      	movs	r5, r6
 80050f8:	2101      	movs	r1, #1
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	e7a4      	b.n	8005048 <_svfiprintf_r+0xd4>
 80050fe:	2300      	movs	r3, #0
 8005100:	200a      	movs	r0, #10
 8005102:	0019      	movs	r1, r3
 8005104:	3501      	adds	r5, #1
 8005106:	6063      	str	r3, [r4, #4]
 8005108:	782a      	ldrb	r2, [r5, #0]
 800510a:	1c6e      	adds	r6, r5, #1
 800510c:	3a30      	subs	r2, #48	@ 0x30
 800510e:	2a09      	cmp	r2, #9
 8005110:	d903      	bls.n	800511a <_svfiprintf_r+0x1a6>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0c8      	beq.n	80050a8 <_svfiprintf_r+0x134>
 8005116:	9109      	str	r1, [sp, #36]	@ 0x24
 8005118:	e7c6      	b.n	80050a8 <_svfiprintf_r+0x134>
 800511a:	4341      	muls	r1, r0
 800511c:	0035      	movs	r5, r6
 800511e:	2301      	movs	r3, #1
 8005120:	1889      	adds	r1, r1, r2
 8005122:	e7f1      	b.n	8005108 <_svfiprintf_r+0x194>
 8005124:	aa07      	add	r2, sp, #28
 8005126:	9200      	str	r2, [sp, #0]
 8005128:	0021      	movs	r1, r4
 800512a:	003a      	movs	r2, r7
 800512c:	4b0f      	ldr	r3, [pc, #60]	@ (800516c <_svfiprintf_r+0x1f8>)
 800512e:	9803      	ldr	r0, [sp, #12]
 8005130:	e000      	b.n	8005134 <_svfiprintf_r+0x1c0>
 8005132:	bf00      	nop
 8005134:	9004      	str	r0, [sp, #16]
 8005136:	9b04      	ldr	r3, [sp, #16]
 8005138:	3301      	adds	r3, #1
 800513a:	d1d6      	bne.n	80050ea <_svfiprintf_r+0x176>
 800513c:	89bb      	ldrh	r3, [r7, #12]
 800513e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005140:	065b      	lsls	r3, r3, #25
 8005142:	d500      	bpl.n	8005146 <_svfiprintf_r+0x1d2>
 8005144:	e72c      	b.n	8004fa0 <_svfiprintf_r+0x2c>
 8005146:	b021      	add	sp, #132	@ 0x84
 8005148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800514a:	aa07      	add	r2, sp, #28
 800514c:	9200      	str	r2, [sp, #0]
 800514e:	0021      	movs	r1, r4
 8005150:	003a      	movs	r2, r7
 8005152:	4b06      	ldr	r3, [pc, #24]	@ (800516c <_svfiprintf_r+0x1f8>)
 8005154:	9803      	ldr	r0, [sp, #12]
 8005156:	f000 f87b 	bl	8005250 <_printf_i>
 800515a:	e7eb      	b.n	8005134 <_svfiprintf_r+0x1c0>
 800515c:	080055d0 	.word	0x080055d0
 8005160:	080055d6 	.word	0x080055d6
 8005164:	080055da 	.word	0x080055da
 8005168:	00000000 	.word	0x00000000
 800516c:	08004eb5 	.word	0x08004eb5

08005170 <_printf_common>:
 8005170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005172:	0016      	movs	r6, r2
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	688a      	ldr	r2, [r1, #8]
 8005178:	690b      	ldr	r3, [r1, #16]
 800517a:	000c      	movs	r4, r1
 800517c:	9000      	str	r0, [sp, #0]
 800517e:	4293      	cmp	r3, r2
 8005180:	da00      	bge.n	8005184 <_printf_common+0x14>
 8005182:	0013      	movs	r3, r2
 8005184:	0022      	movs	r2, r4
 8005186:	6033      	str	r3, [r6, #0]
 8005188:	3243      	adds	r2, #67	@ 0x43
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	2a00      	cmp	r2, #0
 800518e:	d001      	beq.n	8005194 <_printf_common+0x24>
 8005190:	3301      	adds	r3, #1
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	069b      	lsls	r3, r3, #26
 8005198:	d502      	bpl.n	80051a0 <_printf_common+0x30>
 800519a:	6833      	ldr	r3, [r6, #0]
 800519c:	3302      	adds	r3, #2
 800519e:	6033      	str	r3, [r6, #0]
 80051a0:	6822      	ldr	r2, [r4, #0]
 80051a2:	2306      	movs	r3, #6
 80051a4:	0015      	movs	r5, r2
 80051a6:	401d      	ands	r5, r3
 80051a8:	421a      	tst	r2, r3
 80051aa:	d027      	beq.n	80051fc <_printf_common+0x8c>
 80051ac:	0023      	movs	r3, r4
 80051ae:	3343      	adds	r3, #67	@ 0x43
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	4193      	sbcs	r3, r2
 80051b6:	6822      	ldr	r2, [r4, #0]
 80051b8:	0692      	lsls	r2, r2, #26
 80051ba:	d430      	bmi.n	800521e <_printf_common+0xae>
 80051bc:	0022      	movs	r2, r4
 80051be:	9901      	ldr	r1, [sp, #4]
 80051c0:	9800      	ldr	r0, [sp, #0]
 80051c2:	9d08      	ldr	r5, [sp, #32]
 80051c4:	3243      	adds	r2, #67	@ 0x43
 80051c6:	47a8      	blx	r5
 80051c8:	3001      	adds	r0, #1
 80051ca:	d025      	beq.n	8005218 <_printf_common+0xa8>
 80051cc:	2206      	movs	r2, #6
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	2500      	movs	r5, #0
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d105      	bne.n	80051e4 <_printf_common+0x74>
 80051d8:	6833      	ldr	r3, [r6, #0]
 80051da:	68e5      	ldr	r5, [r4, #12]
 80051dc:	1aed      	subs	r5, r5, r3
 80051de:	43eb      	mvns	r3, r5
 80051e0:	17db      	asrs	r3, r3, #31
 80051e2:	401d      	ands	r5, r3
 80051e4:	68a3      	ldr	r3, [r4, #8]
 80051e6:	6922      	ldr	r2, [r4, #16]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	dd01      	ble.n	80051f0 <_printf_common+0x80>
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	18ed      	adds	r5, r5, r3
 80051f0:	2600      	movs	r6, #0
 80051f2:	42b5      	cmp	r5, r6
 80051f4:	d120      	bne.n	8005238 <_printf_common+0xc8>
 80051f6:	2000      	movs	r0, #0
 80051f8:	e010      	b.n	800521c <_printf_common+0xac>
 80051fa:	3501      	adds	r5, #1
 80051fc:	68e3      	ldr	r3, [r4, #12]
 80051fe:	6832      	ldr	r2, [r6, #0]
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	42ab      	cmp	r3, r5
 8005204:	ddd2      	ble.n	80051ac <_printf_common+0x3c>
 8005206:	0022      	movs	r2, r4
 8005208:	2301      	movs	r3, #1
 800520a:	9901      	ldr	r1, [sp, #4]
 800520c:	9800      	ldr	r0, [sp, #0]
 800520e:	9f08      	ldr	r7, [sp, #32]
 8005210:	3219      	adds	r2, #25
 8005212:	47b8      	blx	r7
 8005214:	3001      	adds	r0, #1
 8005216:	d1f0      	bne.n	80051fa <_printf_common+0x8a>
 8005218:	2001      	movs	r0, #1
 800521a:	4240      	negs	r0, r0
 800521c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800521e:	2030      	movs	r0, #48	@ 0x30
 8005220:	18e1      	adds	r1, r4, r3
 8005222:	3143      	adds	r1, #67	@ 0x43
 8005224:	7008      	strb	r0, [r1, #0]
 8005226:	0021      	movs	r1, r4
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	3145      	adds	r1, #69	@ 0x45
 800522c:	7809      	ldrb	r1, [r1, #0]
 800522e:	18a2      	adds	r2, r4, r2
 8005230:	3243      	adds	r2, #67	@ 0x43
 8005232:	3302      	adds	r3, #2
 8005234:	7011      	strb	r1, [r2, #0]
 8005236:	e7c1      	b.n	80051bc <_printf_common+0x4c>
 8005238:	0022      	movs	r2, r4
 800523a:	2301      	movs	r3, #1
 800523c:	9901      	ldr	r1, [sp, #4]
 800523e:	9800      	ldr	r0, [sp, #0]
 8005240:	9f08      	ldr	r7, [sp, #32]
 8005242:	321a      	adds	r2, #26
 8005244:	47b8      	blx	r7
 8005246:	3001      	adds	r0, #1
 8005248:	d0e6      	beq.n	8005218 <_printf_common+0xa8>
 800524a:	3601      	adds	r6, #1
 800524c:	e7d1      	b.n	80051f2 <_printf_common+0x82>
	...

08005250 <_printf_i>:
 8005250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005252:	b08b      	sub	sp, #44	@ 0x2c
 8005254:	9206      	str	r2, [sp, #24]
 8005256:	000a      	movs	r2, r1
 8005258:	3243      	adds	r2, #67	@ 0x43
 800525a:	9307      	str	r3, [sp, #28]
 800525c:	9005      	str	r0, [sp, #20]
 800525e:	9203      	str	r2, [sp, #12]
 8005260:	7e0a      	ldrb	r2, [r1, #24]
 8005262:	000c      	movs	r4, r1
 8005264:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005266:	2a78      	cmp	r2, #120	@ 0x78
 8005268:	d809      	bhi.n	800527e <_printf_i+0x2e>
 800526a:	2a62      	cmp	r2, #98	@ 0x62
 800526c:	d80b      	bhi.n	8005286 <_printf_i+0x36>
 800526e:	2a00      	cmp	r2, #0
 8005270:	d100      	bne.n	8005274 <_printf_i+0x24>
 8005272:	e0ba      	b.n	80053ea <_printf_i+0x19a>
 8005274:	497a      	ldr	r1, [pc, #488]	@ (8005460 <_printf_i+0x210>)
 8005276:	9104      	str	r1, [sp, #16]
 8005278:	2a58      	cmp	r2, #88	@ 0x58
 800527a:	d100      	bne.n	800527e <_printf_i+0x2e>
 800527c:	e08e      	b.n	800539c <_printf_i+0x14c>
 800527e:	0025      	movs	r5, r4
 8005280:	3542      	adds	r5, #66	@ 0x42
 8005282:	702a      	strb	r2, [r5, #0]
 8005284:	e022      	b.n	80052cc <_printf_i+0x7c>
 8005286:	0010      	movs	r0, r2
 8005288:	3863      	subs	r0, #99	@ 0x63
 800528a:	2815      	cmp	r0, #21
 800528c:	d8f7      	bhi.n	800527e <_printf_i+0x2e>
 800528e:	f7fa ff41 	bl	8000114 <__gnu_thumb1_case_shi>
 8005292:	0016      	.short	0x0016
 8005294:	fff6001f 	.word	0xfff6001f
 8005298:	fff6fff6 	.word	0xfff6fff6
 800529c:	001ffff6 	.word	0x001ffff6
 80052a0:	fff6fff6 	.word	0xfff6fff6
 80052a4:	fff6fff6 	.word	0xfff6fff6
 80052a8:	0036009f 	.word	0x0036009f
 80052ac:	fff6007e 	.word	0xfff6007e
 80052b0:	00b0fff6 	.word	0x00b0fff6
 80052b4:	0036fff6 	.word	0x0036fff6
 80052b8:	fff6fff6 	.word	0xfff6fff6
 80052bc:	0082      	.short	0x0082
 80052be:	0025      	movs	r5, r4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	3542      	adds	r5, #66	@ 0x42
 80052c4:	1d11      	adds	r1, r2, #4
 80052c6:	6019      	str	r1, [r3, #0]
 80052c8:	6813      	ldr	r3, [r2, #0]
 80052ca:	702b      	strb	r3, [r5, #0]
 80052cc:	2301      	movs	r3, #1
 80052ce:	e09e      	b.n	800540e <_printf_i+0x1be>
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	6809      	ldr	r1, [r1, #0]
 80052d4:	1d02      	adds	r2, r0, #4
 80052d6:	060d      	lsls	r5, r1, #24
 80052d8:	d50b      	bpl.n	80052f2 <_printf_i+0xa2>
 80052da:	6806      	ldr	r6, [r0, #0]
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	2e00      	cmp	r6, #0
 80052e0:	da03      	bge.n	80052ea <_printf_i+0x9a>
 80052e2:	232d      	movs	r3, #45	@ 0x2d
 80052e4:	9a03      	ldr	r2, [sp, #12]
 80052e6:	4276      	negs	r6, r6
 80052e8:	7013      	strb	r3, [r2, #0]
 80052ea:	4b5d      	ldr	r3, [pc, #372]	@ (8005460 <_printf_i+0x210>)
 80052ec:	270a      	movs	r7, #10
 80052ee:	9304      	str	r3, [sp, #16]
 80052f0:	e018      	b.n	8005324 <_printf_i+0xd4>
 80052f2:	6806      	ldr	r6, [r0, #0]
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	0649      	lsls	r1, r1, #25
 80052f8:	d5f1      	bpl.n	80052de <_printf_i+0x8e>
 80052fa:	b236      	sxth	r6, r6
 80052fc:	e7ef      	b.n	80052de <_printf_i+0x8e>
 80052fe:	6808      	ldr	r0, [r1, #0]
 8005300:	6819      	ldr	r1, [r3, #0]
 8005302:	c940      	ldmia	r1!, {r6}
 8005304:	0605      	lsls	r5, r0, #24
 8005306:	d402      	bmi.n	800530e <_printf_i+0xbe>
 8005308:	0640      	lsls	r0, r0, #25
 800530a:	d500      	bpl.n	800530e <_printf_i+0xbe>
 800530c:	b2b6      	uxth	r6, r6
 800530e:	6019      	str	r1, [r3, #0]
 8005310:	4b53      	ldr	r3, [pc, #332]	@ (8005460 <_printf_i+0x210>)
 8005312:	270a      	movs	r7, #10
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	2a6f      	cmp	r2, #111	@ 0x6f
 8005318:	d100      	bne.n	800531c <_printf_i+0xcc>
 800531a:	3f02      	subs	r7, #2
 800531c:	0023      	movs	r3, r4
 800531e:	2200      	movs	r2, #0
 8005320:	3343      	adds	r3, #67	@ 0x43
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	db06      	blt.n	800533a <_printf_i+0xea>
 800532c:	2104      	movs	r1, #4
 800532e:	6822      	ldr	r2, [r4, #0]
 8005330:	9d03      	ldr	r5, [sp, #12]
 8005332:	438a      	bics	r2, r1
 8005334:	6022      	str	r2, [r4, #0]
 8005336:	4333      	orrs	r3, r6
 8005338:	d00c      	beq.n	8005354 <_printf_i+0x104>
 800533a:	9d03      	ldr	r5, [sp, #12]
 800533c:	0030      	movs	r0, r6
 800533e:	0039      	movs	r1, r7
 8005340:	f7fa ff78 	bl	8000234 <__aeabi_uidivmod>
 8005344:	9b04      	ldr	r3, [sp, #16]
 8005346:	3d01      	subs	r5, #1
 8005348:	5c5b      	ldrb	r3, [r3, r1]
 800534a:	702b      	strb	r3, [r5, #0]
 800534c:	0033      	movs	r3, r6
 800534e:	0006      	movs	r6, r0
 8005350:	429f      	cmp	r7, r3
 8005352:	d9f3      	bls.n	800533c <_printf_i+0xec>
 8005354:	2f08      	cmp	r7, #8
 8005356:	d109      	bne.n	800536c <_printf_i+0x11c>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	07db      	lsls	r3, r3, #31
 800535c:	d506      	bpl.n	800536c <_printf_i+0x11c>
 800535e:	6862      	ldr	r2, [r4, #4]
 8005360:	6923      	ldr	r3, [r4, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	dc02      	bgt.n	800536c <_printf_i+0x11c>
 8005366:	2330      	movs	r3, #48	@ 0x30
 8005368:	3d01      	subs	r5, #1
 800536a:	702b      	strb	r3, [r5, #0]
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	1b5b      	subs	r3, r3, r5
 8005370:	6123      	str	r3, [r4, #16]
 8005372:	9b07      	ldr	r3, [sp, #28]
 8005374:	0021      	movs	r1, r4
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	9805      	ldr	r0, [sp, #20]
 800537a:	9b06      	ldr	r3, [sp, #24]
 800537c:	aa09      	add	r2, sp, #36	@ 0x24
 800537e:	f7ff fef7 	bl	8005170 <_printf_common>
 8005382:	3001      	adds	r0, #1
 8005384:	d148      	bne.n	8005418 <_printf_i+0x1c8>
 8005386:	2001      	movs	r0, #1
 8005388:	4240      	negs	r0, r0
 800538a:	b00b      	add	sp, #44	@ 0x2c
 800538c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538e:	2220      	movs	r2, #32
 8005390:	6809      	ldr	r1, [r1, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	6022      	str	r2, [r4, #0]
 8005396:	2278      	movs	r2, #120	@ 0x78
 8005398:	4932      	ldr	r1, [pc, #200]	@ (8005464 <_printf_i+0x214>)
 800539a:	9104      	str	r1, [sp, #16]
 800539c:	0021      	movs	r1, r4
 800539e:	3145      	adds	r1, #69	@ 0x45
 80053a0:	700a      	strb	r2, [r1, #0]
 80053a2:	6819      	ldr	r1, [r3, #0]
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	c940      	ldmia	r1!, {r6}
 80053a8:	0610      	lsls	r0, r2, #24
 80053aa:	d402      	bmi.n	80053b2 <_printf_i+0x162>
 80053ac:	0650      	lsls	r0, r2, #25
 80053ae:	d500      	bpl.n	80053b2 <_printf_i+0x162>
 80053b0:	b2b6      	uxth	r6, r6
 80053b2:	6019      	str	r1, [r3, #0]
 80053b4:	07d3      	lsls	r3, r2, #31
 80053b6:	d502      	bpl.n	80053be <_printf_i+0x16e>
 80053b8:	2320      	movs	r3, #32
 80053ba:	4313      	orrs	r3, r2
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	2e00      	cmp	r6, #0
 80053c0:	d001      	beq.n	80053c6 <_printf_i+0x176>
 80053c2:	2710      	movs	r7, #16
 80053c4:	e7aa      	b.n	800531c <_printf_i+0xcc>
 80053c6:	2220      	movs	r2, #32
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	4393      	bics	r3, r2
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	e7f8      	b.n	80053c2 <_printf_i+0x172>
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	680d      	ldr	r5, [r1, #0]
 80053d4:	1d10      	adds	r0, r2, #4
 80053d6:	6949      	ldr	r1, [r1, #20]
 80053d8:	6018      	str	r0, [r3, #0]
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	062e      	lsls	r6, r5, #24
 80053de:	d501      	bpl.n	80053e4 <_printf_i+0x194>
 80053e0:	6019      	str	r1, [r3, #0]
 80053e2:	e002      	b.n	80053ea <_printf_i+0x19a>
 80053e4:	066d      	lsls	r5, r5, #25
 80053e6:	d5fb      	bpl.n	80053e0 <_printf_i+0x190>
 80053e8:	8019      	strh	r1, [r3, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	9d03      	ldr	r5, [sp, #12]
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	e7bf      	b.n	8005372 <_printf_i+0x122>
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	1d11      	adds	r1, r2, #4
 80053f6:	6019      	str	r1, [r3, #0]
 80053f8:	6815      	ldr	r5, [r2, #0]
 80053fa:	2100      	movs	r1, #0
 80053fc:	0028      	movs	r0, r5
 80053fe:	6862      	ldr	r2, [r4, #4]
 8005400:	f000 f856 	bl	80054b0 <memchr>
 8005404:	2800      	cmp	r0, #0
 8005406:	d001      	beq.n	800540c <_printf_i+0x1bc>
 8005408:	1b40      	subs	r0, r0, r5
 800540a:	6060      	str	r0, [r4, #4]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	2300      	movs	r3, #0
 8005412:	9a03      	ldr	r2, [sp, #12]
 8005414:	7013      	strb	r3, [r2, #0]
 8005416:	e7ac      	b.n	8005372 <_printf_i+0x122>
 8005418:	002a      	movs	r2, r5
 800541a:	6923      	ldr	r3, [r4, #16]
 800541c:	9906      	ldr	r1, [sp, #24]
 800541e:	9805      	ldr	r0, [sp, #20]
 8005420:	9d07      	ldr	r5, [sp, #28]
 8005422:	47a8      	blx	r5
 8005424:	3001      	adds	r0, #1
 8005426:	d0ae      	beq.n	8005386 <_printf_i+0x136>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	079b      	lsls	r3, r3, #30
 800542c:	d415      	bmi.n	800545a <_printf_i+0x20a>
 800542e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005430:	68e0      	ldr	r0, [r4, #12]
 8005432:	4298      	cmp	r0, r3
 8005434:	daa9      	bge.n	800538a <_printf_i+0x13a>
 8005436:	0018      	movs	r0, r3
 8005438:	e7a7      	b.n	800538a <_printf_i+0x13a>
 800543a:	0022      	movs	r2, r4
 800543c:	2301      	movs	r3, #1
 800543e:	9906      	ldr	r1, [sp, #24]
 8005440:	9805      	ldr	r0, [sp, #20]
 8005442:	9e07      	ldr	r6, [sp, #28]
 8005444:	3219      	adds	r2, #25
 8005446:	47b0      	blx	r6
 8005448:	3001      	adds	r0, #1
 800544a:	d09c      	beq.n	8005386 <_printf_i+0x136>
 800544c:	3501      	adds	r5, #1
 800544e:	68e3      	ldr	r3, [r4, #12]
 8005450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	42ab      	cmp	r3, r5
 8005456:	dcf0      	bgt.n	800543a <_printf_i+0x1ea>
 8005458:	e7e9      	b.n	800542e <_printf_i+0x1de>
 800545a:	2500      	movs	r5, #0
 800545c:	e7f7      	b.n	800544e <_printf_i+0x1fe>
 800545e:	46c0      	nop			@ (mov r8, r8)
 8005460:	080055e1 	.word	0x080055e1
 8005464:	080055f2 	.word	0x080055f2

08005468 <memmove>:
 8005468:	b510      	push	{r4, lr}
 800546a:	4288      	cmp	r0, r1
 800546c:	d902      	bls.n	8005474 <memmove+0xc>
 800546e:	188b      	adds	r3, r1, r2
 8005470:	4298      	cmp	r0, r3
 8005472:	d308      	bcc.n	8005486 <memmove+0x1e>
 8005474:	2300      	movs	r3, #0
 8005476:	429a      	cmp	r2, r3
 8005478:	d007      	beq.n	800548a <memmove+0x22>
 800547a:	5ccc      	ldrb	r4, [r1, r3]
 800547c:	54c4      	strb	r4, [r0, r3]
 800547e:	3301      	adds	r3, #1
 8005480:	e7f9      	b.n	8005476 <memmove+0xe>
 8005482:	5c8b      	ldrb	r3, [r1, r2]
 8005484:	5483      	strb	r3, [r0, r2]
 8005486:	3a01      	subs	r2, #1
 8005488:	d2fb      	bcs.n	8005482 <memmove+0x1a>
 800548a:	bd10      	pop	{r4, pc}

0800548c <_sbrk_r>:
 800548c:	2300      	movs	r3, #0
 800548e:	b570      	push	{r4, r5, r6, lr}
 8005490:	4d06      	ldr	r5, [pc, #24]	@ (80054ac <_sbrk_r+0x20>)
 8005492:	0004      	movs	r4, r0
 8005494:	0008      	movs	r0, r1
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	f7fb fff2 	bl	8001480 <_sbrk>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d103      	bne.n	80054a8 <_sbrk_r+0x1c>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d000      	beq.n	80054a8 <_sbrk_r+0x1c>
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	bd70      	pop	{r4, r5, r6, pc}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	2000077c 	.word	0x2000077c

080054b0 <memchr>:
 80054b0:	b2c9      	uxtb	r1, r1
 80054b2:	1882      	adds	r2, r0, r2
 80054b4:	4290      	cmp	r0, r2
 80054b6:	d101      	bne.n	80054bc <memchr+0xc>
 80054b8:	2000      	movs	r0, #0
 80054ba:	4770      	bx	lr
 80054bc:	7803      	ldrb	r3, [r0, #0]
 80054be:	428b      	cmp	r3, r1
 80054c0:	d0fb      	beq.n	80054ba <memchr+0xa>
 80054c2:	3001      	adds	r0, #1
 80054c4:	e7f6      	b.n	80054b4 <memchr+0x4>

080054c6 <memcpy>:
 80054c6:	2300      	movs	r3, #0
 80054c8:	b510      	push	{r4, lr}
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d100      	bne.n	80054d0 <memcpy+0xa>
 80054ce:	bd10      	pop	{r4, pc}
 80054d0:	5ccc      	ldrb	r4, [r1, r3]
 80054d2:	54c4      	strb	r4, [r0, r3]
 80054d4:	3301      	adds	r3, #1
 80054d6:	e7f8      	b.n	80054ca <memcpy+0x4>

080054d8 <_realloc_r>:
 80054d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054da:	0006      	movs	r6, r0
 80054dc:	000c      	movs	r4, r1
 80054de:	0015      	movs	r5, r2
 80054e0:	2900      	cmp	r1, #0
 80054e2:	d105      	bne.n	80054f0 <_realloc_r+0x18>
 80054e4:	0011      	movs	r1, r2
 80054e6:	f7ff fc55 	bl	8004d94 <_malloc_r>
 80054ea:	0004      	movs	r4, r0
 80054ec:	0020      	movs	r0, r4
 80054ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	d103      	bne.n	80054fc <_realloc_r+0x24>
 80054f4:	f7ff fbe2 	bl	8004cbc <_free_r>
 80054f8:	002c      	movs	r4, r5
 80054fa:	e7f7      	b.n	80054ec <_realloc_r+0x14>
 80054fc:	f000 f81c 	bl	8005538 <_malloc_usable_size_r>
 8005500:	0007      	movs	r7, r0
 8005502:	4285      	cmp	r5, r0
 8005504:	d802      	bhi.n	800550c <_realloc_r+0x34>
 8005506:	0843      	lsrs	r3, r0, #1
 8005508:	42ab      	cmp	r3, r5
 800550a:	d3ef      	bcc.n	80054ec <_realloc_r+0x14>
 800550c:	0029      	movs	r1, r5
 800550e:	0030      	movs	r0, r6
 8005510:	f7ff fc40 	bl	8004d94 <_malloc_r>
 8005514:	9001      	str	r0, [sp, #4]
 8005516:	2800      	cmp	r0, #0
 8005518:	d101      	bne.n	800551e <_realloc_r+0x46>
 800551a:	9c01      	ldr	r4, [sp, #4]
 800551c:	e7e6      	b.n	80054ec <_realloc_r+0x14>
 800551e:	002a      	movs	r2, r5
 8005520:	42bd      	cmp	r5, r7
 8005522:	d900      	bls.n	8005526 <_realloc_r+0x4e>
 8005524:	003a      	movs	r2, r7
 8005526:	0021      	movs	r1, r4
 8005528:	9801      	ldr	r0, [sp, #4]
 800552a:	f7ff ffcc 	bl	80054c6 <memcpy>
 800552e:	0021      	movs	r1, r4
 8005530:	0030      	movs	r0, r6
 8005532:	f7ff fbc3 	bl	8004cbc <_free_r>
 8005536:	e7f0      	b.n	800551a <_realloc_r+0x42>

08005538 <_malloc_usable_size_r>:
 8005538:	1f0b      	subs	r3, r1, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	1f18      	subs	r0, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	da01      	bge.n	8005546 <_malloc_usable_size_r+0xe>
 8005542:	580b      	ldr	r3, [r1, r0]
 8005544:	18c0      	adds	r0, r0, r3
 8005546:	4770      	bx	lr

08005548 <_init>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr

08005554 <_fini>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555a:	bc08      	pop	{r3}
 800555c:	469e      	mov	lr, r3
 800555e:	4770      	bx	lr
