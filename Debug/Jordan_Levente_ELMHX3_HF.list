
Jordan_Levente_ELMHX3_HF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051cc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005288  08005288  00006288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005334  08005334  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005334  08005334  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005334  08005334  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800533c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  2000005c  08005398  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08005398  00007410  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eccc  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002472  00000000  00000000  00015d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000181c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acd  00000000  00000000  00018f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e4c  00000000  00000000  00019a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ed2  00000000  00000000  0001c8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac054  00000000  00000000  0002e773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da7c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000359c  00000000  00000000  000da80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000ddda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005270 	.word	0x08005270

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08005270 	.word	0x08005270

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <backlight_init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  * the configuration information for TIM1.
  * @retval None
  */
void backlight_init(TIM_HandleTypeDef *htim)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a05      	ldr	r2, [pc, #20]	@ (8000264 <backlight_init+0x24>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d104      	bne.n	800025c <backlight_init+0x1c>
  {
    // Start PWM on TIM1 Channel 1
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2100      	movs	r1, #0
 8000256:	0018      	movs	r0, r3
 8000258:	f003 f80c 	bl	8003274 <HAL_TIM_PWM_Start>
  }
}
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40012c00 	.word	0x40012c00

08000268 <backlight_set_brightness>:
  * the configuration information for TIM1.
  * @param  percentage: Brightness level from 0 (off) to 100 (full brightness).
  * @retval None
  */
void backlight_set_brightness(TIM_HandleTypeDef *htim, uint8_t percentage)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	000a      	movs	r2, r1
 8000272:	1cfb      	adds	r3, r7, #3
 8000274:	701a      	strb	r2, [r3, #0]
  if (htim->Instance == TIM1)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a11      	ldr	r2, [pc, #68]	@ (80002c0 <backlight_set_brightness+0x58>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d11a      	bne.n	80002b6 <backlight_set_brightness+0x4e>
  {
    uint32_t pulse_value = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
    uint32_t period_value = __HAL_TIM_GET_AUTORELOAD(htim); // Get the Period (ARR value)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800028a:	60bb      	str	r3, [r7, #8]

    if (percentage > 100)
 800028c:	1cfb      	adds	r3, r7, #3
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b64      	cmp	r3, #100	@ 0x64
 8000292:	d902      	bls.n	800029a <backlight_set_brightness+0x32>
    {
      percentage = 100;
 8000294:	1cfb      	adds	r3, r7, #3
 8000296:	2264      	movs	r2, #100	@ 0x64
 8000298:	701a      	strb	r2, [r3, #0]

    // Calculate pulse value based on percentage of the period
    // Note: period_value is ARR, so for 100% duty cycle, CCR should be ARR+1 if period is ARR.
    // However, it's common to set CCR from 0 to ARR.
    // If period is 65535, then pulse = (65535 * percentage) / 100
    pulse_value = (period_value * percentage) / 100;
 800029a:	1cfb      	adds	r3, r7, #3
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	4353      	muls	r3, r2
 80002a2:	2164      	movs	r1, #100	@ 0x64
 80002a4:	0018      	movs	r0, r3
 80002a6:	f7ff ff3f 	bl	8000128 <__udivsi3>
 80002aa:	0003      	movs	r3, r0
 80002ac:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, pulse_value);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b004      	add	sp, #16
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			@ (mov r8, r8)
 80002c0:	40012c00 	.word	0x40012c00

080002c4 <Display_On>:
#include "lcd_driver_bsp.h"
#include "main.h"


void Display_On(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

HAL_GPIO_WritePin(_RST_LCD_GPIO_Port, _RST_LCD_Pin, SET);
 80002c8:	4b32      	ldr	r3, [pc, #200]	@ (8000394 <Display_On+0xd0>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	2104      	movs	r1, #4
 80002ce:	0018      	movs	r0, r3
 80002d0:	f002 f918 	bl	8002504 <HAL_GPIO_WritePin>

HAL_Delay(10);
 80002d4:	200a      	movs	r0, #10
 80002d6:	f001 f84d 	bl	8001374 <HAL_Delay>

HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, RESET);
 80002da:	4b2e      	ldr	r3, [pc, #184]	@ (8000394 <Display_On+0xd0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	2101      	movs	r1, #1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f002 f90f 	bl	8002504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, RESET);
 80002e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000394 <Display_On+0xd0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	2102      	movs	r1, #2
 80002ec:	0018      	movs	r0, r3
 80002ee:	f002 f909 	bl	8002504 <HAL_GPIO_WritePin>

HAL_Delay(10);
 80002f2:	200a      	movs	r0, #10
 80002f4:	f001 f83e 	bl	8001374 <HAL_Delay>

HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, RESET);
 80002f8:	2380      	movs	r3, #128	@ 0x80
 80002fa:	015b      	lsls	r3, r3, #5
 80002fc:	4825      	ldr	r0, [pc, #148]	@ (8000394 <Display_On+0xd0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	0019      	movs	r1, r3
 8000302:	f002 f8ff 	bl	8002504 <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(Dir_R_W_LCD_GPIO_Port, Dir_R_W_LCD_Pin, RESET);
 8000306:	2390      	movs	r3, #144	@ 0x90
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	2200      	movs	r2, #0
 800030c:	2110      	movs	r1, #16
 800030e:	0018      	movs	r0, r3
 8000310:	f002 f8f8 	bl	8002504 <HAL_GPIO_WritePin>

HAL_Delay(10);
 8000314:	200a      	movs	r0, #10
 8000316:	f001 f82d 	bl	8001374 <HAL_Delay>

HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, RESET);
 800031a:	2380      	movs	r3, #128	@ 0x80
 800031c:	011b      	lsls	r3, r3, #4
 800031e:	481d      	ldr	r0, [pc, #116]	@ (8000394 <Display_On+0xd0>)
 8000320:	2200      	movs	r2, #0
 8000322:	0019      	movs	r1, r3
 8000324:	f002 f8ee 	bl	8002504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, RESET);
 8000328:	2380      	movs	r3, #128	@ 0x80
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	4819      	ldr	r0, [pc, #100]	@ (8000394 <Display_On+0xd0>)
 800032e:	2200      	movs	r2, #0
 8000330:	0019      	movs	r1, r3
 8000332:	f002 f8e7 	bl	8002504 <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, SET);
 8000336:	4b17      	ldr	r3, [pc, #92]	@ (8000394 <Display_On+0xd0>)
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	0018      	movs	r0, r3
 800033e:	f002 f8e1 	bl	8002504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, SET);
 8000342:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <Display_On+0xd0>)
 8000344:	2201      	movs	r2, #1
 8000346:	2140      	movs	r1, #64	@ 0x40
 8000348:	0018      	movs	r0, r3
 800034a:	f002 f8db 	bl	8002504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, SET);
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <Display_On+0xd0>)
 8000350:	2201      	movs	r2, #1
 8000352:	2180      	movs	r1, #128	@ 0x80
 8000354:	0018      	movs	r0, r3
 8000356:	f002 f8d5 	bl	8002504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, SET);
 800035a:	2380      	movs	r3, #128	@ 0x80
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	480d      	ldr	r0, [pc, #52]	@ (8000394 <Display_On+0xd0>)
 8000360:	2201      	movs	r2, #1
 8000362:	0019      	movs	r1, r3
 8000364:	f002 f8ce 	bl	8002504 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, SET);
 8000368:	2380      	movs	r3, #128	@ 0x80
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4809      	ldr	r0, [pc, #36]	@ (8000394 <Display_On+0xd0>)
 800036e:	2201      	movs	r2, #1
 8000370:	0019      	movs	r1, r3
 8000372:	f002 f8c7 	bl	8002504 <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, SET);
 8000376:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <Display_On+0xd0>)
 8000378:	2201      	movs	r2, #1
 800037a:	2110      	movs	r1, #16
 800037c:	0018      	movs	r0, r3
 800037e:	f002 f8c1 	bl	8002504 <HAL_GPIO_WritePin>

HAL_Delay(10);
 8000382:	200a      	movs	r0, #10
 8000384:	f000 fff6 	bl	8001374 <HAL_Delay>

E_Pulse();
 8000388:	f000 f928 	bl	80005dc <E_Pulse>

}
 800038c:	46c0      	nop			@ (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			@ (mov r8, r8)
 8000394:	48000400 	.word	0x48000400

08000398 <Set_Coloumn>:


int Set_Coloumn(uint8_t Y_address){
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	0002      	movs	r2, r0
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	701a      	strb	r2, [r3, #0]

	if(Y_address < 0 || Y_address >= 64){
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80003aa:	d901      	bls.n	80003b0 <Set_Coloumn+0x18>
		return 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	e091      	b.n	80004d4 <Set_Coloumn+0x13c>
	}

	HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, RESET);
 80003b0:	2380      	movs	r3, #128	@ 0x80
 80003b2:	011b      	lsls	r3, r3, #4
 80003b4:	4849      	ldr	r0, [pc, #292]	@ (80004dc <Set_Coloumn+0x144>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	0019      	movs	r1, r3
 80003ba:	f002 f8a3 	bl	8002504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, SET);
 80003be:	2380      	movs	r3, #128	@ 0x80
 80003c0:	00db      	lsls	r3, r3, #3
 80003c2:	4846      	ldr	r0, [pc, #280]	@ (80004dc <Set_Coloumn+0x144>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	0019      	movs	r1, r3
 80003c8:	f002 f89c 	bl	8002504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, RESET);
 80003cc:	2380      	movs	r3, #128	@ 0x80
 80003ce:	015b      	lsls	r3, r3, #5
 80003d0:	4842      	ldr	r0, [pc, #264]	@ (80004dc <Set_Coloumn+0x144>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	0019      	movs	r1, r3
 80003d6:	f002 f895 	bl	8002504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dir_R_W_LCD_GPIO_Port, Dir_R_W_LCD_Pin, RESET);
 80003da:	2390      	movs	r3, #144	@ 0x90
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	2200      	movs	r2, #0
 80003e0:	2110      	movs	r1, #16
 80003e2:	0018      	movs	r0, r3
 80003e4:	f002 f88e 	bl	8002504 <HAL_GPIO_WritePin>


	if(Y_address & 0b00000001){
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2201      	movs	r2, #1
 80003ee:	4013      	ands	r3, r2
 80003f0:	d006      	beq.n	8000400 <Set_Coloumn+0x68>
		HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, SET);
 80003f2:	4b3a      	ldr	r3, [pc, #232]	@ (80004dc <Set_Coloumn+0x144>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	2110      	movs	r1, #16
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 f883 	bl	8002504 <HAL_GPIO_WritePin>
 80003fe:	e005      	b.n	800040c <Set_Coloumn+0x74>
	}
	else{
		HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, RESET);
 8000400:	4b36      	ldr	r3, [pc, #216]	@ (80004dc <Set_Coloumn+0x144>)
 8000402:	2200      	movs	r2, #0
 8000404:	2110      	movs	r1, #16
 8000406:	0018      	movs	r0, r3
 8000408:	f002 f87c 	bl	8002504 <HAL_GPIO_WritePin>
	}

	if(Y_address & 0b00000010){
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2202      	movs	r2, #2
 8000412:	4013      	ands	r3, r2
 8000414:	d006      	beq.n	8000424 <Set_Coloumn+0x8c>
			HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, SET);
 8000416:	4b31      	ldr	r3, [pc, #196]	@ (80004dc <Set_Coloumn+0x144>)
 8000418:	2201      	movs	r2, #1
 800041a:	2120      	movs	r1, #32
 800041c:	0018      	movs	r0, r3
 800041e:	f002 f871 	bl	8002504 <HAL_GPIO_WritePin>
 8000422:	e005      	b.n	8000430 <Set_Coloumn+0x98>
		}
		else{
			HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, RESET);
 8000424:	4b2d      	ldr	r3, [pc, #180]	@ (80004dc <Set_Coloumn+0x144>)
 8000426:	2200      	movs	r2, #0
 8000428:	2120      	movs	r1, #32
 800042a:	0018      	movs	r0, r3
 800042c:	f002 f86a 	bl	8002504 <HAL_GPIO_WritePin>
		}

	if(Y_address & 0b00000100){
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2204      	movs	r2, #4
 8000436:	4013      	ands	r3, r2
 8000438:	d006      	beq.n	8000448 <Set_Coloumn+0xb0>
			HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, SET);
 800043a:	4b28      	ldr	r3, [pc, #160]	@ (80004dc <Set_Coloumn+0x144>)
 800043c:	2201      	movs	r2, #1
 800043e:	2140      	movs	r1, #64	@ 0x40
 8000440:	0018      	movs	r0, r3
 8000442:	f002 f85f 	bl	8002504 <HAL_GPIO_WritePin>
 8000446:	e005      	b.n	8000454 <Set_Coloumn+0xbc>
		}
		else{
			HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, RESET);
 8000448:	4b24      	ldr	r3, [pc, #144]	@ (80004dc <Set_Coloumn+0x144>)
 800044a:	2200      	movs	r2, #0
 800044c:	2140      	movs	r1, #64	@ 0x40
 800044e:	0018      	movs	r0, r3
 8000450:	f002 f858 	bl	8002504 <HAL_GPIO_WritePin>
		}

	if(Y_address & 0b00001000){
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2208      	movs	r2, #8
 800045a:	4013      	ands	r3, r2
 800045c:	d006      	beq.n	800046c <Set_Coloumn+0xd4>
			HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, SET);
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <Set_Coloumn+0x144>)
 8000460:	2201      	movs	r2, #1
 8000462:	2180      	movs	r1, #128	@ 0x80
 8000464:	0018      	movs	r0, r3
 8000466:	f002 f84d 	bl	8002504 <HAL_GPIO_WritePin>
 800046a:	e005      	b.n	8000478 <Set_Coloumn+0xe0>
		}
		else{
			HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, RESET);
 800046c:	4b1b      	ldr	r3, [pc, #108]	@ (80004dc <Set_Coloumn+0x144>)
 800046e:	2200      	movs	r2, #0
 8000470:	2180      	movs	r1, #128	@ 0x80
 8000472:	0018      	movs	r0, r3
 8000474:	f002 f846 	bl	8002504 <HAL_GPIO_WritePin>
		}

	if(Y_address & 0b00010000){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2210      	movs	r2, #16
 800047e:	4013      	ands	r3, r2
 8000480:	d007      	beq.n	8000492 <Set_Coloumn+0xfa>
			HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, SET);
 8000482:	2380      	movs	r3, #128	@ 0x80
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	4815      	ldr	r0, [pc, #84]	@ (80004dc <Set_Coloumn+0x144>)
 8000488:	2201      	movs	r2, #1
 800048a:	0019      	movs	r1, r3
 800048c:	f002 f83a 	bl	8002504 <HAL_GPIO_WritePin>
 8000490:	e006      	b.n	80004a0 <Set_Coloumn+0x108>
		}
		else{
			HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, RESET);
 8000492:	2380      	movs	r3, #128	@ 0x80
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	4811      	ldr	r0, [pc, #68]	@ (80004dc <Set_Coloumn+0x144>)
 8000498:	2200      	movs	r2, #0
 800049a:	0019      	movs	r1, r3
 800049c:	f002 f832 	bl	8002504 <HAL_GPIO_WritePin>
		}

	if(Y_address & 0b00100000){
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2220      	movs	r2, #32
 80004a6:	4013      	ands	r3, r2
 80004a8:	d007      	beq.n	80004ba <Set_Coloumn+0x122>
			HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, SET);
 80004aa:	2380      	movs	r3, #128	@ 0x80
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	480b      	ldr	r0, [pc, #44]	@ (80004dc <Set_Coloumn+0x144>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	0019      	movs	r1, r3
 80004b4:	f002 f826 	bl	8002504 <HAL_GPIO_WritePin>
 80004b8:	e006      	b.n	80004c8 <Set_Coloumn+0x130>
		}
		else{
			HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, RESET);
 80004ba:	2380      	movs	r3, #128	@ 0x80
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4807      	ldr	r0, [pc, #28]	@ (80004dc <Set_Coloumn+0x144>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	0019      	movs	r1, r3
 80004c4:	f002 f81e 	bl	8002504 <HAL_GPIO_WritePin>
		}

	HAL_Delay(10);
 80004c8:	200a      	movs	r0, #10
 80004ca:	f000 ff53 	bl	8001374 <HAL_Delay>

	E_Pulse();
 80004ce:	f000 f885 	bl	80005dc <E_Pulse>

	return 1;
 80004d2:	2301      	movs	r3, #1
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	48000400 	.word	0x48000400

080004e0 <Set_Page>:

int Set_Page(uint8_t X_address){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	0002      	movs	r2, r0
 80004e8:	1dfb      	adds	r3, r7, #7
 80004ea:	701a      	strb	r2, [r3, #0]

	if(X_address < 0 || X_address >= 8){
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b07      	cmp	r3, #7
 80004f2:	d901      	bls.n	80004f8 <Set_Page+0x18>
			return 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	e06b      	b.n	80005d0 <Set_Page+0xf0>
		}

		HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, SET);
 80004f8:	2380      	movs	r3, #128	@ 0x80
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	4836      	ldr	r0, [pc, #216]	@ (80005d8 <Set_Page+0xf8>)
 80004fe:	2201      	movs	r2, #1
 8000500:	0019      	movs	r1, r3
 8000502:	f001 ffff 	bl	8002504 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, RESET);
 8000506:	2380      	movs	r3, #128	@ 0x80
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	4833      	ldr	r0, [pc, #204]	@ (80005d8 <Set_Page+0xf8>)
 800050c:	2200      	movs	r2, #0
 800050e:	0019      	movs	r1, r3
 8000510:	f001 fff8 	bl	8002504 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, RESET);
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	015b      	lsls	r3, r3, #5
 8000518:	482f      	ldr	r0, [pc, #188]	@ (80005d8 <Set_Page+0xf8>)
 800051a:	2200      	movs	r2, #0
 800051c:	0019      	movs	r1, r3
 800051e:	f001 fff1 	bl	8002504 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Dir_R_W_LCD_GPIO_Port, Dir_R_W_LCD_Pin, RESET);
 8000522:	2390      	movs	r3, #144	@ 0x90
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2200      	movs	r2, #0
 8000528:	2110      	movs	r1, #16
 800052a:	0018      	movs	r0, r3
 800052c:	f001 ffea 	bl	8002504 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, SET);
 8000530:	4b29      	ldr	r3, [pc, #164]	@ (80005d8 <Set_Page+0xf8>)
 8000532:	2201      	movs	r2, #1
 8000534:	2180      	movs	r1, #128	@ 0x80
 8000536:	0018      	movs	r0, r3
 8000538:	f001 ffe4 	bl	8002504 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, SET);
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4825      	ldr	r0, [pc, #148]	@ (80005d8 <Set_Page+0xf8>)
 8000542:	2201      	movs	r2, #1
 8000544:	0019      	movs	r1, r3
 8000546:	f001 ffdd 	bl	8002504 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, SET);
 800054a:	2380      	movs	r3, #128	@ 0x80
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4822      	ldr	r0, [pc, #136]	@ (80005d8 <Set_Page+0xf8>)
 8000550:	2201      	movs	r2, #1
 8000552:	0019      	movs	r1, r3
 8000554:	f001 ffd6 	bl	8002504 <HAL_GPIO_WritePin>

	if(X_address & 0b00000001){
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2201      	movs	r2, #1
 800055e:	4013      	ands	r3, r2
 8000560:	d006      	beq.n	8000570 <Set_Page+0x90>
			HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, SET);
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <Set_Page+0xf8>)
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	0018      	movs	r0, r3
 800056a:	f001 ffcb 	bl	8002504 <HAL_GPIO_WritePin>
 800056e:	e005      	b.n	800057c <Set_Page+0x9c>
		}
		else{
			HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, RESET);
 8000570:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <Set_Page+0xf8>)
 8000572:	2200      	movs	r2, #0
 8000574:	2110      	movs	r1, #16
 8000576:	0018      	movs	r0, r3
 8000578:	f001 ffc4 	bl	8002504 <HAL_GPIO_WritePin>
		}

		if(X_address & 0b00000010){
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2202      	movs	r2, #2
 8000582:	4013      	ands	r3, r2
 8000584:	d006      	beq.n	8000594 <Set_Page+0xb4>
				HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, SET);
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <Set_Page+0xf8>)
 8000588:	2201      	movs	r2, #1
 800058a:	2120      	movs	r1, #32
 800058c:	0018      	movs	r0, r3
 800058e:	f001 ffb9 	bl	8002504 <HAL_GPIO_WritePin>
 8000592:	e005      	b.n	80005a0 <Set_Page+0xc0>
			}
			else{
				HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, RESET);
 8000594:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <Set_Page+0xf8>)
 8000596:	2200      	movs	r2, #0
 8000598:	2120      	movs	r1, #32
 800059a:	0018      	movs	r0, r3
 800059c:	f001 ffb2 	bl	8002504 <HAL_GPIO_WritePin>
			}

		if(X_address & 0b00000100){
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2204      	movs	r2, #4
 80005a6:	4013      	ands	r3, r2
 80005a8:	d006      	beq.n	80005b8 <Set_Page+0xd8>
				HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, SET);
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <Set_Page+0xf8>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	2140      	movs	r1, #64	@ 0x40
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 ffa7 	bl	8002504 <HAL_GPIO_WritePin>
 80005b6:	e005      	b.n	80005c4 <Set_Page+0xe4>
			}
			else{
				HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, RESET);
 80005b8:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <Set_Page+0xf8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 ffa0 	bl	8002504 <HAL_GPIO_WritePin>
			}

		HAL_Delay(10);
 80005c4:	200a      	movs	r0, #10
 80005c6:	f000 fed5 	bl	8001374 <HAL_Delay>

		E_Pulse();
 80005ca:	f000 f807 	bl	80005dc <E_Pulse>

		return 1;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b002      	add	sp, #8
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000400 	.word	0x48000400

080005dc <E_Pulse>:


void E_Pulse(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(E_LCD_GPIO_Port, E_LCD_Pin, SET);
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	019b      	lsls	r3, r3, #6
 80005e4:	4808      	ldr	r0, [pc, #32]	@ (8000608 <E_Pulse+0x2c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	0019      	movs	r1, r3
 80005ea:	f001 ff8b 	bl	8002504 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fec0 	bl	8001374 <HAL_Delay>

	HAL_GPIO_WritePin(E_LCD_GPIO_Port, E_LCD_Pin, RESET);
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	019b      	lsls	r3, r3, #6
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <E_Pulse+0x2c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	0019      	movs	r1, r3
 80005fe:	f001 ff81 	bl	8002504 <HAL_GPIO_WritePin>
}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	48000400 	.word	0x48000400

0800060c <Write_Data_Bits>:

void Write_Data_Bits(uint8_t data){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	0002      	movs	r2, r0
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	701a      	strb	r2, [r3, #0]

	if(data & 0b00000001){
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2201      	movs	r2, #1
 800061e:	4013      	ands	r3, r2
 8000620:	d006      	beq.n	8000630 <Write_Data_Bits+0x24>
			HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, SET);
 8000622:	4b4b      	ldr	r3, [pc, #300]	@ (8000750 <Write_Data_Bits+0x144>)
 8000624:	2201      	movs	r2, #1
 8000626:	2110      	movs	r1, #16
 8000628:	0018      	movs	r0, r3
 800062a:	f001 ff6b 	bl	8002504 <HAL_GPIO_WritePin>
 800062e:	e005      	b.n	800063c <Write_Data_Bits+0x30>
		}
		else{
			HAL_GPIO_WritePin(DB0_LCD_GPIO_Port, DB0_LCD_Pin, RESET);
 8000630:	4b47      	ldr	r3, [pc, #284]	@ (8000750 <Write_Data_Bits+0x144>)
 8000632:	2200      	movs	r2, #0
 8000634:	2110      	movs	r1, #16
 8000636:	0018      	movs	r0, r3
 8000638:	f001 ff64 	bl	8002504 <HAL_GPIO_WritePin>
		}

		if(data & 0b00000010){
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2202      	movs	r2, #2
 8000642:	4013      	ands	r3, r2
 8000644:	d006      	beq.n	8000654 <Write_Data_Bits+0x48>
				HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, SET);
 8000646:	4b42      	ldr	r3, [pc, #264]	@ (8000750 <Write_Data_Bits+0x144>)
 8000648:	2201      	movs	r2, #1
 800064a:	2120      	movs	r1, #32
 800064c:	0018      	movs	r0, r3
 800064e:	f001 ff59 	bl	8002504 <HAL_GPIO_WritePin>
 8000652:	e005      	b.n	8000660 <Write_Data_Bits+0x54>
			}
			else{
				HAL_GPIO_WritePin(DB1_LCD_GPIO_Port, DB1_LCD_Pin, RESET);
 8000654:	4b3e      	ldr	r3, [pc, #248]	@ (8000750 <Write_Data_Bits+0x144>)
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	0018      	movs	r0, r3
 800065c:	f001 ff52 	bl	8002504 <HAL_GPIO_WritePin>
			}

		if(data & 0b00000100){
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2204      	movs	r2, #4
 8000666:	4013      	ands	r3, r2
 8000668:	d006      	beq.n	8000678 <Write_Data_Bits+0x6c>
				HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, SET);
 800066a:	4b39      	ldr	r3, [pc, #228]	@ (8000750 <Write_Data_Bits+0x144>)
 800066c:	2201      	movs	r2, #1
 800066e:	2140      	movs	r1, #64	@ 0x40
 8000670:	0018      	movs	r0, r3
 8000672:	f001 ff47 	bl	8002504 <HAL_GPIO_WritePin>
 8000676:	e005      	b.n	8000684 <Write_Data_Bits+0x78>
			}
			else{
				HAL_GPIO_WritePin(DB2_LCD_GPIO_Port, DB2_LCD_Pin, RESET);
 8000678:	4b35      	ldr	r3, [pc, #212]	@ (8000750 <Write_Data_Bits+0x144>)
 800067a:	2200      	movs	r2, #0
 800067c:	2140      	movs	r1, #64	@ 0x40
 800067e:	0018      	movs	r0, r3
 8000680:	f001 ff40 	bl	8002504 <HAL_GPIO_WritePin>
			}

		if(data & 0b00001000){
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2208      	movs	r2, #8
 800068a:	4013      	ands	r3, r2
 800068c:	d006      	beq.n	800069c <Write_Data_Bits+0x90>
				HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, SET);
 800068e:	4b30      	ldr	r3, [pc, #192]	@ (8000750 <Write_Data_Bits+0x144>)
 8000690:	2201      	movs	r2, #1
 8000692:	2180      	movs	r1, #128	@ 0x80
 8000694:	0018      	movs	r0, r3
 8000696:	f001 ff35 	bl	8002504 <HAL_GPIO_WritePin>
 800069a:	e005      	b.n	80006a8 <Write_Data_Bits+0x9c>
			}
			else{
				HAL_GPIO_WritePin(DB3_LCD_GPIO_Port, DB3_LCD_Pin, RESET);
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <Write_Data_Bits+0x144>)
 800069e:	2200      	movs	r2, #0
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 ff2e 	bl	8002504 <HAL_GPIO_WritePin>
			}

		if(data & 0b00010000){
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2210      	movs	r2, #16
 80006ae:	4013      	ands	r3, r2
 80006b0:	d007      	beq.n	80006c2 <Write_Data_Bits+0xb6>
				HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, SET);
 80006b2:	2380      	movs	r3, #128	@ 0x80
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4826      	ldr	r0, [pc, #152]	@ (8000750 <Write_Data_Bits+0x144>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	0019      	movs	r1, r3
 80006bc:	f001 ff22 	bl	8002504 <HAL_GPIO_WritePin>
 80006c0:	e006      	b.n	80006d0 <Write_Data_Bits+0xc4>
			}
			else{
				HAL_GPIO_WritePin(DB4_LCD_GPIO_Port, DB4_LCD_Pin, RESET);
 80006c2:	2380      	movs	r3, #128	@ 0x80
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4822      	ldr	r0, [pc, #136]	@ (8000750 <Write_Data_Bits+0x144>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	0019      	movs	r1, r3
 80006cc:	f001 ff1a 	bl	8002504 <HAL_GPIO_WritePin>
			}

		if(data & 0b00100000){
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2220      	movs	r2, #32
 80006d6:	4013      	ands	r3, r2
 80006d8:	d007      	beq.n	80006ea <Write_Data_Bits+0xde>
				HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, SET);
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	481c      	ldr	r0, [pc, #112]	@ (8000750 <Write_Data_Bits+0x144>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	0019      	movs	r1, r3
 80006e4:	f001 ff0e 	bl	8002504 <HAL_GPIO_WritePin>
 80006e8:	e006      	b.n	80006f8 <Write_Data_Bits+0xec>
			}
			else{
				HAL_GPIO_WritePin(DB5_LCD_GPIO_Port, DB5_LCD_Pin, RESET);
 80006ea:	2380      	movs	r3, #128	@ 0x80
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <Write_Data_Bits+0x144>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	0019      	movs	r1, r3
 80006f4:	f001 ff06 	bl	8002504 <HAL_GPIO_WritePin>
			}

		if(data & 0b01000000){
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2240      	movs	r2, #64	@ 0x40
 80006fe:	4013      	ands	r3, r2
 8000700:	d007      	beq.n	8000712 <Write_Data_Bits+0x106>
						HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, SET);
 8000702:	2380      	movs	r3, #128	@ 0x80
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <Write_Data_Bits+0x144>)
 8000708:	2201      	movs	r2, #1
 800070a:	0019      	movs	r1, r3
 800070c:	f001 fefa 	bl	8002504 <HAL_GPIO_WritePin>
 8000710:	e006      	b.n	8000720 <Write_Data_Bits+0x114>
					}
					else{
						HAL_GPIO_WritePin(DB6_LCD_GPIO_Port, DB6_LCD_Pin, RESET);
 8000712:	2380      	movs	r3, #128	@ 0x80
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	480e      	ldr	r0, [pc, #56]	@ (8000750 <Write_Data_Bits+0x144>)
 8000718:	2200      	movs	r2, #0
 800071a:	0019      	movs	r1, r3
 800071c:	f001 fef2 	bl	8002504 <HAL_GPIO_WritePin>
					}
		if(data & 0b10000000){
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b25b      	sxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	da07      	bge.n	800073a <Write_Data_Bits+0x12e>
								HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, SET);
 800072a:	2380      	movs	r3, #128	@ 0x80
 800072c:	011b      	lsls	r3, r3, #4
 800072e:	4808      	ldr	r0, [pc, #32]	@ (8000750 <Write_Data_Bits+0x144>)
 8000730:	2201      	movs	r2, #1
 8000732:	0019      	movs	r1, r3
 8000734:	f001 fee6 	bl	8002504 <HAL_GPIO_WritePin>
							}
							else{
								HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, RESET);
							}

}
 8000738:	e006      	b.n	8000748 <Write_Data_Bits+0x13c>
								HAL_GPIO_WritePin(DB7_LCD_GPIO_Port, DB7_LCD_Pin, RESET);
 800073a:	2380      	movs	r3, #128	@ 0x80
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	4804      	ldr	r0, [pc, #16]	@ (8000750 <Write_Data_Bits+0x144>)
 8000740:	2200      	movs	r2, #0
 8000742:	0019      	movs	r1, r3
 8000744:	f001 fede 	bl	8002504 <HAL_GPIO_WritePin>
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b002      	add	sp, #8
 800074e:	bd80      	pop	{r7, pc}
 8000750:	48000400 	.word	0x48000400

08000754 <Draw_R_Letter>:

void Draw_R_Letter(){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS1_LCD_GPIO_Port, CS1_LCD_Pin, RESET);
 800075a:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <Draw_R_Letter+0x88>)
 800075c:	2200      	movs	r2, #0
 800075e:	2101      	movs	r1, #1
 8000760:	0018      	movs	r0, r3
 8000762:	f001 fecf 	bl	8002504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_LCD_GPIO_Port, CS2_LCD_Pin, RESET);
 8000766:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <Draw_R_Letter+0x88>)
 8000768:	2200      	movs	r2, #0
 800076a:	2102      	movs	r1, #2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fec9 	bl	8002504 <HAL_GPIO_WritePin>



	uint8_t R_array[] = {0, 0x7f, 0x09, 0x19, 0x29, 0x46};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4a1a      	ldr	r2, [pc, #104]	@ (80007e0 <Draw_R_Letter+0x8c>)
 8000776:	6811      	ldr	r1, [r2, #0]
 8000778:	6019      	str	r1, [r3, #0]
 800077a:	8892      	ldrh	r2, [r2, #4]
 800077c:	809a      	strh	r2, [r3, #4]

	Set_Coloumn(0);
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff fe0a 	bl	8000398 <Set_Coloumn>
	Set_Page(0);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff feab 	bl	80004e0 <Set_Page>

	HAL_GPIO_WritePin(D_I_LCD_GPIO_Port, D_I_LCD_Pin, SET);
 800078a:	2380      	movs	r3, #128	@ 0x80
 800078c:	015b      	lsls	r3, r3, #5
 800078e:	4813      	ldr	r0, [pc, #76]	@ (80007dc <Draw_R_Letter+0x88>)
 8000790:	2201      	movs	r2, #1
 8000792:	0019      	movs	r1, r3
 8000794:	f001 feb6 	bl	8002504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dir_R_W_LCD_GPIO_Port, Dir_R_W_LCD_Pin, RESET);
 8000798:	2390      	movs	r3, #144	@ 0x90
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 feaf 	bl	8002504 <HAL_GPIO_WritePin>


	for(int i = 0; i < 6; i++){
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e00e      	b.n	80007ca <Draw_R_Letter+0x76>

		Write_Data_Bits(R_array[i]);
 80007ac:	1d3a      	adds	r2, r7, #4
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	18d3      	adds	r3, r2, r3
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff ff29 	bl	800060c <Write_Data_Bits>
		HAL_Delay(10);
 80007ba:	200a      	movs	r0, #10
 80007bc:	f000 fdda 	bl	8001374 <HAL_Delay>
		E_Pulse();
 80007c0:	f7ff ff0c 	bl	80005dc <E_Pulse>
	for(int i = 0; i < 6; i++){
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	dded      	ble.n	80007ac <Draw_R_Letter+0x58>

	}



}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	48000400 	.word	0x48000400
 80007e0:	08005288 	.word	0x08005288

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fd60 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f896 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f000 fa9e 	bl	8000d30 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f4:	f000 fa7e 	bl	8000cf4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007f8:	f000 fa1c 	bl	8000c34 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007fc:	f000 f964 	bl	8000ac8 <MX_TIM1_Init>
  MX_ADC_Init();
 8000800:	f000 f8fa 	bl	80009f8 <MX_ADC_Init>
  MX_USART3_UART_Init();
 8000804:	f000 fa46 	bl	8000c94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	backlight_init(&htim1); // Initialize and start the backlight PWM
 8000808:	4b38      	ldr	r3, [pc, #224]	@ (80008ec <main+0x108>)
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff fd18 	bl	8000240 <backlight_init>

	backlight_set_brightness(&htim1, 100); // Set backlight to 50% brightness
 8000810:	4b36      	ldr	r3, [pc, #216]	@ (80008ec <main+0x108>)
 8000812:	2164      	movs	r1, #100	@ 0x64
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff fd27 	bl	8000268 <backlight_set_brightness>

	Display_On();
 800081a:	f7ff fd53 	bl	80002c4 <Display_On>

	Draw_R_Letter();
 800081e:	f7ff ff99 	bl	8000754 <Draw_R_Letter>

	HAL_ADCEx_Calibration_Start(&hadc);
 8000822:	4b33      	ldr	r3, [pc, #204]	@ (80008f0 <main+0x10c>)
 8000824:	0018      	movs	r0, r3
 8000826:	f001 f9b9 	bl	8001b9c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_data, 2);
 800082a:	4932      	ldr	r1, [pc, #200]	@ (80008f4 <main+0x110>)
 800082c:	4b30      	ldr	r3, [pc, #192]	@ (80008f0 <main+0x10c>)
 800082e:	2202      	movs	r2, #2
 8000830:	0018      	movs	r0, r3
 8000832:	f000 ff03 	bl	800163c <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(InfraLedTr1_GPIO_Port, InfraLedTr1_Pin, SET);
 8000836:	2390      	movs	r3, #144	@ 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2201      	movs	r2, #1
 800083c:	2120      	movs	r1, #32
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fe60 	bl	8002504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(InfraLedTr2_GPIO_Port, InfraLedTr2_Pin, SET);
 8000844:	2390      	movs	r3, #144	@ 0x90
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	2201      	movs	r2, #1
 800084a:	2140      	movs	r1, #64	@ 0x40
 800084c:	0018      	movs	r0, r3
 800084e:	f001 fe59 	bl	8002504 <HAL_GPIO_WritePin>

//		uint16_t sensor1_raw_value = adc_data[0];
//		uint16_t sensor2_raw_value = adc_data[1];


		if ((adc_data[0] >= SENSOR_PRESSED_THRESHOLD_LOW) && (adc_data[0] <= SENSOR_PRESSED_THRESHOLD_HIGH))
 8000852:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <main+0x110>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	b29b      	uxth	r3, r3
 8000858:	4a27      	ldr	r2, [pc, #156]	@ (80008f8 <main+0x114>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d909      	bls.n	8000872 <main+0x8e>
 800085e:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <main+0x110>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4a25      	ldr	r2, [pc, #148]	@ (80008fc <main+0x118>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d803      	bhi.n	8000872 <main+0x8e>
		{
			sensor1_state = SENSOR_STATE_PRESSED;
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <main+0x11c>)
 800086c:	2201      	movs	r2, #1
 800086e:	801a      	strh	r2, [r3, #0]
 8000870:	e002      	b.n	8000878 <main+0x94>
		}
		else
		{
			sensor1_state = SENSOR_STATE_NOT_PRESSED;
 8000872:	4b23      	ldr	r3, [pc, #140]	@ (8000900 <main+0x11c>)
 8000874:	2200      	movs	r2, #0
 8000876:	801a      	strh	r2, [r3, #0]
		}


		if ((adc_data[1] >= SENSOR_PRESSED_THRESHOLD_LOW) && (adc_data[1] <= SENSOR_PRESSED_THRESHOLD_HIGH))
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <main+0x110>)
 800087a:	885b      	ldrh	r3, [r3, #2]
 800087c:	b29b      	uxth	r3, r3
 800087e:	4a1e      	ldr	r2, [pc, #120]	@ (80008f8 <main+0x114>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d909      	bls.n	8000898 <main+0xb4>
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <main+0x110>)
 8000886:	885b      	ldrh	r3, [r3, #2]
 8000888:	b29b      	uxth	r3, r3
 800088a:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <main+0x118>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d803      	bhi.n	8000898 <main+0xb4>
		{
			sensor2_state = SENSOR_STATE_PRESSED;
 8000890:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <main+0x120>)
 8000892:	2201      	movs	r2, #1
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	e002      	b.n	800089e <main+0xba>
		}
		else
		{
			sensor2_state = SENSOR_STATE_NOT_PRESSED;
 8000898:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <main+0x120>)
 800089a:	2200      	movs	r2, #0
 800089c:	801a      	strh	r2, [r3, #0]
		}

		sprintf(uart_buf, "Szenzor1: %s, Szenzor2: %s ",
		            (sensor1_state == SENSOR_STATE_PRESSED) ? "LENYOMVA" : "NINCS LENYOMVA",
 800089e:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <main+0x11c>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	b29b      	uxth	r3, r3
		sprintf(uart_buf, "Szenzor1: %s, Szenzor2: %s ",
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d101      	bne.n	80008ac <main+0xc8>
 80008a8:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <main+0x124>)
 80008aa:	e000      	b.n	80008ae <main+0xca>
 80008ac:	4a17      	ldr	r2, [pc, #92]	@ (800090c <main+0x128>)
		            (sensor2_state == SENSOR_STATE_PRESSED) ? "LENYOMVA" : "NINCS LENYOMVA" );
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <main+0x120>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	b29b      	uxth	r3, r3
		sprintf(uart_buf, "Szenzor1: %s, Szenzor2: %s ",
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d101      	bne.n	80008bc <main+0xd8>
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <main+0x124>)
 80008ba:	e000      	b.n	80008be <main+0xda>
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <main+0x128>)
 80008be:	4914      	ldr	r1, [pc, #80]	@ (8000910 <main+0x12c>)
 80008c0:	4814      	ldr	r0, [pc, #80]	@ (8000914 <main+0x130>)
 80008c2:	f004 f839 	bl	8004938 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t*)uart_buf, strlen(uart_buf), 1000);
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <main+0x130>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff fc1b 	bl	8000104 <strlen>
 80008ce:	0003      	movs	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	23fa      	movs	r3, #250	@ 0xfa
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	490f      	ldr	r1, [pc, #60]	@ (8000914 <main+0x130>)
 80008d8:	480f      	ldr	r0, [pc, #60]	@ (8000918 <main+0x134>)
 80008da:	f003 fb75 	bl	8003fc8 <HAL_UART_Transmit>

		HAL_Delay(1000);
 80008de:	23fa      	movs	r3, #250	@ 0xfa
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 fd46 	bl	8001374 <HAL_Delay>
		if ((adc_data[0] >= SENSOR_PRESSED_THRESHOLD_LOW) && (adc_data[0] <= SENSOR_PRESSED_THRESHOLD_HIGH))
 80008e8:	e7b3      	b.n	8000852 <main+0x6e>
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	200000fc 	.word	0x200000fc
 80008f0:	20000078 	.word	0x20000078
 80008f4:	20000254 	.word	0x20000254
 80008f8:	00000b85 	.word	0x00000b85
 80008fc:	00000ce4 	.word	0x00000ce4
 8000900:	20000258 	.word	0x20000258
 8000904:	2000025a 	.word	0x2000025a
 8000908:	08005290 	.word	0x08005290
 800090c:	0800529c 	.word	0x0800529c
 8000910:	080052ac 	.word	0x080052ac
 8000914:	2000025c 	.word	0x2000025c
 8000918:	200001cc 	.word	0x200001cc

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b099      	sub	sp, #100	@ 0x64
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	242c      	movs	r4, #44	@ 0x2c
 8000924:	193b      	adds	r3, r7, r4
 8000926:	0018      	movs	r0, r3
 8000928:	2334      	movs	r3, #52	@ 0x34
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f004 f825 	bl	800497c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000932:	231c      	movs	r3, #28
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	0018      	movs	r0, r3
 8000938:	2310      	movs	r3, #16
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f004 f81d 	bl	800497c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000942:	003b      	movs	r3, r7
 8000944:	0018      	movs	r0, r3
 8000946:	231c      	movs	r3, #28
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f004 f816 	bl	800497c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2212      	movs	r2, #18
 8000956:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2201      	movs	r2, #1
 8000962:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2210      	movs	r2, #16
 8000968:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2210      	movs	r2, #16
 800096e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2202      	movs	r2, #2
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	0212      	lsls	r2, r2, #8
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	22a0      	movs	r2, #160	@ 0xa0
 8000982:	0392      	lsls	r2, r2, #14
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2201      	movs	r2, #1
 800098a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	187b      	adds	r3, r7, r1
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fdd6 	bl	8002540 <HAL_RCC_OscConfig>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000998:	f000 fa66 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	211c      	movs	r1, #28
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2202      	movs	r2, #2
 80009a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2101      	movs	r1, #1
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 f946 	bl	8002c4c <HAL_RCC_ClockConfig>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80009c4:	f000 fa50 	bl	8000e68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 80009c8:	003b      	movs	r3, r7
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <SystemClock_Config+0xd8>)
 80009cc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ce:	003b      	movs	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009d4:	003b      	movs	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009da:	003b      	movs	r3, r7
 80009dc:	0018      	movs	r0, r3
 80009de:	f002 faa1 	bl	8002f24 <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009e6:	f000 fa3f 	bl	8000e68 <Error_Handler>
  }
}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b019      	add	sp, #100	@ 0x64
 80009f0:	bd90      	pop	{r4, r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	00040002 	.word	0x00040002

080009f8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	0018      	movs	r0, r3
 8000a02:	230c      	movs	r3, #12
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f003 ffb8 	bl	800497c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ac4 <MX_ADC_Init+0xcc>)
 8000a10:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a18:	4b29      	ldr	r3, [pc, #164]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a24:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a36:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a4a:	22c2      	movs	r2, #194	@ 0xc2
 8000a4c:	32ff      	adds	r2, #255	@ 0xff
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a58:	2224      	movs	r2, #36	@ 0x24
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a64:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fca8 	bl	80013bc <HAL_ADC_Init>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 f9fa 	bl	8000e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2280      	movs	r2, #128	@ 0x80
 8000a7e:	0152      	lsls	r2, r2, #5
 8000a80:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2203      	movs	r2, #3
 8000a86:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a88:	1d3a      	adds	r2, r7, #4
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fe6e 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000a98:	f000 f9e6 	bl	8000e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aa2:	1d3a      	adds	r2, r7, #4
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_ADC_Init+0xc8>)
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fe61 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000ab2:	f000 f9d9 	bl	8000e68 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */


  /* USER CODE END ADC_Init 2 */

}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b004      	add	sp, #16
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	20000078 	.word	0x20000078
 8000ac4:	40012400 	.word	0x40012400

08000ac8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b096      	sub	sp, #88	@ 0x58
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	2348      	movs	r3, #72	@ 0x48
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f003 ff4f 	bl	800497c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	2340      	movs	r3, #64	@ 0x40
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f003 ff47 	bl	800497c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aee:	2324      	movs	r3, #36	@ 0x24
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	0018      	movs	r0, r3
 8000af4:	231c      	movs	r3, #28
 8000af6:	001a      	movs	r2, r3
 8000af8:	2100      	movs	r1, #0
 8000afa:	f003 ff3f 	bl	800497c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	0018      	movs	r0, r3
 8000b02:	2320      	movs	r3, #32
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f003 ff38 	bl	800497c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b0c:	4b46      	ldr	r3, [pc, #280]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b0e:	4a47      	ldr	r2, [pc, #284]	@ (8000c2c <MX_TIM1_Init+0x164>)
 8000b10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b12:	4b45      	ldr	r3, [pc, #276]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b43      	ldr	r3, [pc, #268]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b1e:	4b42      	ldr	r3, [pc, #264]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b20:	4a43      	ldr	r2, [pc, #268]	@ (8000c30 <MX_TIM1_Init+0x168>)
 8000b22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b24:	4b40      	ldr	r3, [pc, #256]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b3d      	ldr	r3, [pc, #244]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b36:	4b3c      	ldr	r3, [pc, #240]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f002 faf3 	bl	8003124 <HAL_TIM_Base_Init>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000b42:	f000 f991 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	2148      	movs	r1, #72	@ 0x48
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2280      	movs	r2, #128	@ 0x80
 8000b4c:	0152      	lsls	r2, r2, #5
 8000b4e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b50:	187a      	adds	r2, r7, r1
 8000b52:	4b35      	ldr	r3, [pc, #212]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b54:	0011      	movs	r1, r2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 fd0a 	bl	8003570 <HAL_TIM_ConfigClockSource>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000b60:	f000 f982 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b64:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f002 fb2c 	bl	80031c4 <HAL_TIM_PWM_Init>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000b70:	f000 f97a 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2140      	movs	r1, #64	@ 0x40
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b82:	187a      	adds	r2, r7, r1
 8000b84:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f003 f90d 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	1e03      	subs	r3, r0, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000b92:	f000 f969 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b96:	2124      	movs	r1, #36	@ 0x24
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2260      	movs	r2, #96	@ 0x60
 8000b9c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc2:	1879      	adds	r1, r7, r1
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f002 fc0b 	bl	80033e4 <HAL_TIM_PWM_ConfigChannel>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000bd2:	f000 f949 	bl	8000e68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2280      	movs	r2, #128	@ 0x80
 8000bf8:	0192      	lsls	r2, r2, #6
 8000bfa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c02:	1d3a      	adds	r2, r7, #4
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f003 f92b 	bl	8003e64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000c12:	f000 f929 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <MX_TIM1_Init+0x160>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 f9f3 	bl	8001004 <HAL_TIM_MspPostInit>

}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b016      	add	sp, #88	@ 0x58
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	200000fc 	.word	0x200000fc
 8000c2c:	40012c00 	.word	0x40012c00
 8000c30:	0000ffff 	.word	0x0000ffff

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c3a:	4a15      	ldr	r2, [pc, #84]	@ (8000c90 <MX_USART2_UART_Init+0x5c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c40:	22e1      	movs	r2, #225	@ 0xe1
 8000c42:	0252      	lsls	r2, r2, #9
 8000c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f003 f951 	bl	8003f20 <HAL_UART_Init>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c82:	f000 f8f1 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000144 	.word	0x20000144
 8000c90:	40004400 	.word	0x40004400

08000c94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <MX_USART3_UART_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000ca0:	22e1      	movs	r2, #225	@ 0xe1
 8000ca2:	0252      	lsls	r2, r2, #9
 8000ca4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd6:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f003 f921 	bl	8003f20 <HAL_UART_Init>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f000 f8c1 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001cc 	.word	0x200001cc
 8000cf0:	40004800 	.word	0x40004800

08000cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <MX_DMA_Init+0x38>)
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <MX_DMA_Init+0x38>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	430a      	orrs	r2, r1
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <MX_DMA_Init+0x38>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2009      	movs	r0, #9
 8000d18:	f001 f894 	bl	8001e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000d1c:	2009      	movs	r0, #9
 8000d1e:	f001 f8a6 	bl	8001e6e <HAL_NVIC_EnableIRQ>

}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	40021000 	.word	0x40021000

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	@ 0x2c
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	2414      	movs	r4, #20
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2314      	movs	r3, #20
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	f003 fe1b 	bl	800497c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	4b43      	ldr	r3, [pc, #268]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d48:	695a      	ldr	r2, [r3, #20]
 8000d4a:	4b42      	ldr	r3, [pc, #264]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d4c:	2180      	movs	r1, #128	@ 0x80
 8000d4e:	0309      	lsls	r1, r1, #12
 8000d50:	430a      	orrs	r2, r1
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	4b3f      	ldr	r3, [pc, #252]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	2380      	movs	r3, #128	@ 0x80
 8000d5a:	031b      	lsls	r3, r3, #12
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d62:	4b3c      	ldr	r3, [pc, #240]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d64:	695a      	ldr	r2, [r3, #20]
 8000d66:	4b3b      	ldr	r3, [pc, #236]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d68:	2180      	movs	r1, #128	@ 0x80
 8000d6a:	03c9      	lsls	r1, r1, #15
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	4b38      	ldr	r3, [pc, #224]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	2380      	movs	r3, #128	@ 0x80
 8000d76:	03db      	lsls	r3, r3, #15
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b35      	ldr	r3, [pc, #212]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d84:	2180      	movs	r1, #128	@ 0x80
 8000d86:	0289      	lsls	r1, r1, #10
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d8e:	695a      	ldr	r2, [r3, #20]
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	029b      	lsls	r3, r3, #10
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000da0:	2180      	movs	r1, #128	@ 0x80
 8000da2:	02c9      	lsls	r1, r1, #11
 8000da4:	430a      	orrs	r2, r1
 8000da6:	615a      	str	r2, [r3, #20]
 8000da8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <MX_GPIO_Init+0x124>)
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	2380      	movs	r3, #128	@ 0x80
 8000dae:	02db      	lsls	r3, r3, #11
 8000db0:	4013      	ands	r3, r2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Dir_R_W_LCD_Pin|InfraLedTr1_Pin|InfraLedTr2_Pin, GPIO_PIN_RESET);
 8000db6:	2390      	movs	r3, #144	@ 0x90
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2170      	movs	r1, #112	@ 0x70
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f001 fba0 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_LCD_Pin|CS2_LCD_Pin|_RST_LCD_Pin, GPIO_PIN_SET);
 8000dc4:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0x128>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2107      	movs	r1, #7
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f001 fb9a 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB6_LCD_Pin|DB7_LCD_Pin|D_I_LCD_Pin|E_LCD_Pin
 8000dd0:	4922      	ldr	r1, [pc, #136]	@ (8000e5c <MX_GPIO_Init+0x12c>)
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_GPIO_Init+0x128>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f001 fb94 	bl	8002504 <HAL_GPIO_WritePin>
                          |DB0_LCD_Pin|DB1_LCD_Pin|DB2_LCD_Pin|DB3_LCD_Pin
                          |DB4_LCD_Pin|DB5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	2280      	movs	r2, #128	@ 0x80
 8000de0:	0192      	lsls	r2, r2, #6
 8000de2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	2284      	movs	r2, #132	@ 0x84
 8000de8:	0392      	lsls	r2, r2, #14
 8000dea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	4a1a      	ldr	r2, [pc, #104]	@ (8000e60 <MX_GPIO_Init+0x130>)
 8000df6:	0019      	movs	r1, r3
 8000df8:	0010      	movs	r0, r2
 8000dfa:	f001 fa0b 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dir_R_W_LCD_Pin InfraLedTr1_Pin InfraLedTr2_Pin */
  GPIO_InitStruct.Pin = Dir_R_W_LCD_Pin|InfraLedTr1_Pin|InfraLedTr2_Pin;
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	2270      	movs	r2, #112	@ 0x70
 8000e02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2201      	movs	r2, #1
 8000e08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	193a      	adds	r2, r7, r4
 8000e18:	2390      	movs	r3, #144	@ 0x90
 8000e1a:	05db      	lsls	r3, r3, #23
 8000e1c:	0011      	movs	r1, r2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f001 f9f8 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_LCD_Pin CS2_LCD_Pin _RST_LCD_Pin DB6_LCD_Pin
                           DB7_LCD_Pin D_I_LCD_Pin E_LCD_Pin DB0_LCD_Pin
                           DB1_LCD_Pin DB2_LCD_Pin DB3_LCD_Pin DB4_LCD_Pin
                           DB5_LCD_Pin */
  GPIO_InitStruct.Pin = CS1_LCD_Pin|CS2_LCD_Pin|_RST_LCD_Pin|DB6_LCD_Pin
 8000e24:	0021      	movs	r1, r4
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	4a0e      	ldr	r2, [pc, #56]	@ (8000e64 <MX_GPIO_Init+0x134>)
 8000e2a:	601a      	str	r2, [r3, #0]
                          |DB7_LCD_Pin|D_I_LCD_Pin|E_LCD_Pin|DB0_LCD_Pin
                          |DB1_LCD_Pin|DB2_LCD_Pin|DB3_LCD_Pin|DB4_LCD_Pin
                          |DB5_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2201      	movs	r2, #1
 8000e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <MX_GPIO_Init+0x128>)
 8000e42:	0019      	movs	r1, r3
 8000e44:	0010      	movs	r0, r2
 8000e46:	f001 f9e5 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b00b      	add	sp, #44	@ 0x2c
 8000e50:	bd90      	pop	{r4, r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	00003ff0 	.word	0x00003ff0
 8000e60:	48000800 	.word	0x48000800
 8000e64:	00003ff7 	.word	0x00003ff7

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x8>

08000e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <HAL_MspInit+0x44>)
 8000e7c:	699a      	ldr	r2, [r3, #24]
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_MspInit+0x44>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	430a      	orrs	r2, r1
 8000e84:	619a      	str	r2, [r3, #24]
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <HAL_MspInit+0x44>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <HAL_MspInit+0x44>)
 8000e94:	69da      	ldr	r2, [r3, #28]
 8000e96:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_MspInit+0x44>)
 8000e98:	2180      	movs	r1, #128	@ 0x80
 8000e9a:	0549      	lsls	r1, r1, #21
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	61da      	str	r2, [r3, #28]
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_MspInit+0x44>)
 8000ea2:	69da      	ldr	r2, [r3, #28]
 8000ea4:	2380      	movs	r3, #128	@ 0x80
 8000ea6:	055b      	lsls	r3, r3, #21
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b08b      	sub	sp, #44	@ 0x2c
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	2414      	movs	r4, #20
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	0018      	movs	r0, r3
 8000eca:	2314      	movs	r3, #20
 8000ecc:	001a      	movs	r2, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f003 fd54 	bl	800497c <memset>
  if(hadc->Instance==ADC1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a35      	ldr	r2, [pc, #212]	@ (8000fb0 <HAL_ADC_MspInit+0xf4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d163      	bne.n	8000fa6 <HAL_ADC_MspInit+0xea>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ede:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <HAL_ADC_MspInit+0xf8>)
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	4b34      	ldr	r3, [pc, #208]	@ (8000fb4 <HAL_ADC_MspInit+0xf8>)
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	0089      	lsls	r1, r1, #2
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <HAL_ADC_MspInit+0xf8>)
 8000eee:	699a      	ldr	r2, [r3, #24]
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb4 <HAL_ADC_MspInit+0xf8>)
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <HAL_ADC_MspInit+0xf8>)
 8000f00:	2180      	movs	r1, #128	@ 0x80
 8000f02:	0289      	lsls	r1, r1, #10
 8000f04:	430a      	orrs	r2, r1
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <HAL_ADC_MspInit+0xf8>)
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = Sens1_Pin|Sens2_Pin;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	2203      	movs	r2, #3
 8000f20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	193a      	adds	r2, r7, r4
 8000f2a:	2390      	movs	r3, #144	@ 0x90
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f001 f96f 	bl	8002214 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f38:	4a20      	ldr	r2, [pc, #128]	@ (8000fbc <HAL_ADC_MspInit+0x100>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f4a:	2280      	movs	r2, #128	@ 0x80
 8000f4c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f50:	2280      	movs	r2, #128	@ 0x80
 8000f52:	0052      	lsls	r2, r2, #1
 8000f54:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f56:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f58:	2280      	movs	r2, #128	@ 0x80
 8000f5a:	00d2      	lsls	r2, r2, #3
 8000f5c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f60:	2220      	movs	r2, #32
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 ff9b 	bl	8001ea8 <HAL_DMA_Init>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000f76:	f7ff ff77 	bl	8000e68 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8000f7a:	4a11      	ldr	r2, [pc, #68]	@ (8000fc0 <HAL_ADC_MspInit+0x104>)
 8000f7c:	23a8      	movs	r3, #168	@ 0xa8
 8000f7e:	58d3      	ldr	r3, [r2, r3]
 8000f80:	490f      	ldr	r1, [pc, #60]	@ (8000fc0 <HAL_ADC_MspInit+0x104>)
 8000f82:	220f      	movs	r2, #15
 8000f84:	4393      	bics	r3, r2
 8000f86:	22a8      	movs	r2, #168	@ 0xa8
 8000f88:	508b      	str	r3, [r1, r2]
 8000f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <HAL_ADC_MspInit+0x104>)
 8000f8c:	23a8      	movs	r3, #168	@ 0xa8
 8000f8e:	58d3      	ldr	r3, [r2, r3]
 8000f90:	490b      	ldr	r1, [pc, #44]	@ (8000fc0 <HAL_ADC_MspInit+0x104>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	4313      	orrs	r3, r2
 8000f96:	22a8      	movs	r2, #168	@ 0xa8
 8000f98:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <HAL_ADC_MspInit+0xfc>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b00b      	add	sp, #44	@ 0x2c
 8000fac:	bd90      	pop	{r4, r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	40012400 	.word	0x40012400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	200000b8 	.word	0x200000b8
 8000fbc:	40020008 	.word	0x40020008
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <HAL_TIM_Base_MspInit+0x38>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_TIM_Base_MspInit+0x3c>)
 8000fd8:	699a      	ldr	r2, [r3, #24]
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_TIM_Base_MspInit+0x3c>)
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	0109      	lsls	r1, r1, #4
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	619a      	str	r2, [r3, #24]
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_TIM_Base_MspInit+0x3c>)
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b004      	add	sp, #16
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	40012c00 	.word	0x40012c00
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	240c      	movs	r4, #12
 800100e:	193b      	adds	r3, r7, r4
 8001010:	0018      	movs	r0, r3
 8001012:	2314      	movs	r3, #20
 8001014:	001a      	movs	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	f003 fcb0 	bl	800497c <memset>
  if(htim->Instance==TIM1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a16      	ldr	r2, [pc, #88]	@ (800107c <HAL_TIM_MspPostInit+0x78>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d125      	bne.n	8001072 <HAL_TIM_MspPostInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <HAL_TIM_MspPostInit+0x7c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_TIM_MspPostInit+0x7c>)
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	0289      	lsls	r1, r1, #10
 8001030:	430a      	orrs	r2, r1
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_TIM_MspPostInit+0x7c>)
 8001036:	695a      	ldr	r2, [r3, #20]
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_LED_LCD_Pin;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	0021      	movs	r1, r4
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2202      	movs	r2, #2
 8001050:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2202      	movs	r2, #2
 8001062:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_LED_LCD_GPIO_Port, &GPIO_InitStruct);
 8001064:	187a      	adds	r2, r7, r1
 8001066:	2390      	movs	r3, #144	@ 0x90
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f001 f8d1 	bl	8002214 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b009      	add	sp, #36	@ 0x24
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	40012c00 	.word	0x40012c00
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b08d      	sub	sp, #52	@ 0x34
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	241c      	movs	r4, #28
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	2314      	movs	r3, #20
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f003 fc70 	bl	800497c <memset>
  if(huart->Instance==USART2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a38      	ldr	r2, [pc, #224]	@ (8001184 <HAL_UART_MspInit+0x100>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d133      	bne.n	800110e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a6:	4b38      	ldr	r3, [pc, #224]	@ (8001188 <HAL_UART_MspInit+0x104>)
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	4b37      	ldr	r3, [pc, #220]	@ (8001188 <HAL_UART_MspInit+0x104>)
 80010ac:	2180      	movs	r1, #128	@ 0x80
 80010ae:	0289      	lsls	r1, r1, #10
 80010b0:	430a      	orrs	r2, r1
 80010b2:	61da      	str	r2, [r3, #28]
 80010b4:	4b34      	ldr	r3, [pc, #208]	@ (8001188 <HAL_UART_MspInit+0x104>)
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	029b      	lsls	r3, r3, #10
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <HAL_UART_MspInit+0x104>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <HAL_UART_MspInit+0x104>)
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	0289      	lsls	r1, r1, #10
 80010cc:	430a      	orrs	r2, r1
 80010ce:	615a      	str	r2, [r3, #20]
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <HAL_UART_MspInit+0x104>)
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	029b      	lsls	r3, r3, #10
 80010d8:	4013      	ands	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010de:	0021      	movs	r1, r4
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2202      	movs	r2, #2
 80010ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2201      	movs	r2, #1
 80010fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	187a      	adds	r2, r7, r1
 8001100:	2390      	movs	r3, #144	@ 0x90
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	0011      	movs	r1, r2
 8001106:	0018      	movs	r0, r3
 8001108:	f001 f884 	bl	8002214 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800110c:	e036      	b.n	800117c <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART3)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a1e      	ldr	r2, [pc, #120]	@ (800118c <HAL_UART_MspInit+0x108>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d131      	bne.n	800117c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <HAL_UART_MspInit+0x104>)
 800111a:	69da      	ldr	r2, [r3, #28]
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_UART_MspInit+0x104>)
 800111e:	2180      	movs	r1, #128	@ 0x80
 8001120:	02c9      	lsls	r1, r1, #11
 8001122:	430a      	orrs	r2, r1
 8001124:	61da      	str	r2, [r3, #28]
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_UART_MspInit+0x104>)
 8001128:	69da      	ldr	r2, [r3, #28]
 800112a:	2380      	movs	r3, #128	@ 0x80
 800112c:	02db      	lsls	r3, r3, #11
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <HAL_UART_MspInit+0x104>)
 8001136:	695a      	ldr	r2, [r3, #20]
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_UART_MspInit+0x104>)
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	0309      	lsls	r1, r1, #12
 800113e:	430a      	orrs	r2, r1
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_UART_MspInit+0x104>)
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	2380      	movs	r3, #128	@ 0x80
 8001148:	031b      	lsls	r3, r3, #12
 800114a:	4013      	ands	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001150:	211c      	movs	r1, #28
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2230      	movs	r2, #48	@ 0x30
 8001156:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2202      	movs	r2, #2
 800115c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2203      	movs	r2, #3
 8001168:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2201      	movs	r2, #1
 800116e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	187b      	adds	r3, r7, r1
 8001172:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <HAL_UART_MspInit+0x10c>)
 8001174:	0019      	movs	r1, r3
 8001176:	0010      	movs	r0, r2
 8001178:	f001 f84c 	bl	8002214 <HAL_GPIO_Init>
}
 800117c:	46c0      	nop			@ (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b00d      	add	sp, #52	@ 0x34
 8001182:	bd90      	pop	{r4, r7, pc}
 8001184:	40004400 	.word	0x40004400
 8001188:	40021000 	.word	0x40021000
 800118c:	40004800 	.word	0x40004800
 8001190:	48000800 	.word	0x48000800

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	e7fd      	b.n	8001198 <NMI_Handler+0x4>

0800119c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a0:	46c0      	nop			@ (mov r8, r8)
 80011a2:	e7fd      	b.n	80011a0 <HardFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f8be 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <DMA1_Ch1_IRQHandler+0x14>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 ff18 	bl	8002004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	200000b8 	.word	0x200000b8

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	@ (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	18d3      	adds	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f003 fbbc 	bl	800498c <__errno>
 8001214:	0003      	movs	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	2301      	movs	r3, #1
 800121c:	425b      	negs	r3, r3
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	18d2      	adds	r2, r2, r3
 800122e:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <_sbrk+0x64>)
 8001230:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b006      	add	sp, #24
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20008000 	.word	0x20008000
 8001240:	00000400 	.word	0x00000400
 8001244:	200002c0 	.word	0x200002c0
 8001248:	20000410 	.word	0x20000410

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001250:	46c0      	nop			@ (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001258:	480d      	ldr	r0, [pc, #52]	@ (8001290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800125a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800125c:	f7ff fff6 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <LoopForever+0x6>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <LoopForever+0xe>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	@ (80012a4 <LoopForever+0x16>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001286:	f003 fb87 	bl	8004998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128a:	f7ff faab 	bl	80007e4 <main>

0800128e <LoopForever>:

LoopForever:
    b LoopForever
 800128e:	e7fe      	b.n	800128e <LoopForever>
  ldr   r0, =_estack
 8001290:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800129c:	0800533c 	.word	0x0800533c
  ldr r2, =_sbss
 80012a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012a4:	20000410 	.word	0x20000410

080012a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_COMP_IRQHandler>
	...

080012ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <HAL_Init+0x24>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_Init+0x24>)
 80012b6:	2110      	movs	r1, #16
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 f809 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c2:	f7ff fdd7 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	40022000 	.word	0x40022000

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <HAL_InitTick+0x5c>)
 80012de:	681c      	ldr	r4, [r3, #0]
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_InitTick+0x60>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	0019      	movs	r1, r3
 80012e6:	23fa      	movs	r3, #250	@ 0xfa
 80012e8:	0098      	lsls	r0, r3, #2
 80012ea:	f7fe ff1d 	bl	8000128 <__udivsi3>
 80012ee:	0003      	movs	r3, r0
 80012f0:	0019      	movs	r1, r3
 80012f2:	0020      	movs	r0, r4
 80012f4:	f7fe ff18 	bl	8000128 <__udivsi3>
 80012f8:	0003      	movs	r3, r0
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 fdc7 	bl	8001e8e <HAL_SYSTICK_Config>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d001      	beq.n	8001308 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e00f      	b.n	8001328 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d80b      	bhi.n	8001326 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	2301      	movs	r3, #1
 8001312:	425b      	negs	r3, r3
 8001314:	2200      	movs	r2, #0
 8001316:	0018      	movs	r0, r3
 8001318:	f000 fd94 	bl	8001e44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_InitTick+0x64>)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b003      	add	sp, #12
 800132e:	bd90      	pop	{r4, r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000008 	.word	0x20000008
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_IncTick+0x1c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	001a      	movs	r2, r3
 8001346:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_IncTick+0x20>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	18d2      	adds	r2, r2, r3
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_IncTick+0x20>)
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	20000008 	.word	0x20000008
 800135c:	200002c4 	.word	0x200002c4

08001360 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b02      	ldr	r3, [pc, #8]	@ (8001370 <HAL_GetTick+0x10>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	200002c4 	.word	0x200002c4

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff fff0 	bl	8001360 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3301      	adds	r3, #1
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_Delay+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	001a      	movs	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	189b      	adds	r3, r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	f7ff ffe0 	bl	8001360 <HAL_GetTick>
 80013a0:	0002      	movs	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	46c0      	nop			@ (mov r8, r8)
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b004      	add	sp, #16
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	20000008 	.word	0x20000008

080013bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c4:	230f      	movs	r3, #15
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e125      	b.n	8001626 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10a      	bne.n	80013f8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2234      	movs	r2, #52	@ 0x34
 80013ec:	2100      	movs	r1, #0
 80013ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff fd62 	bl	8000ebc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013fc:	2210      	movs	r2, #16
 80013fe:	4013      	ands	r3, r2
 8001400:	d000      	beq.n	8001404 <HAL_ADC_Init+0x48>
 8001402:	e103      	b.n	800160c <HAL_ADC_Init+0x250>
 8001404:	230f      	movs	r3, #15
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d000      	beq.n	8001410 <HAL_ADC_Init+0x54>
 800140e:	e0fd      	b.n	800160c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2204      	movs	r2, #4
 8001418:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800141a:	d000      	beq.n	800141e <HAL_ADC_Init+0x62>
 800141c:	e0f6      	b.n	800160c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001422:	4a83      	ldr	r2, [pc, #524]	@ (8001630 <HAL_ADC_Init+0x274>)
 8001424:	4013      	ands	r3, r2
 8001426:	2202      	movs	r2, #2
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2203      	movs	r2, #3
 8001436:	4013      	ands	r3, r2
 8001438:	2b01      	cmp	r3, #1
 800143a:	d112      	bne.n	8001462 <HAL_ADC_Init+0xa6>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	4013      	ands	r3, r2
 8001446:	2b01      	cmp	r3, #1
 8001448:	d009      	beq.n	800145e <HAL_ADC_Init+0xa2>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	401a      	ands	r2, r3
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	429a      	cmp	r2, r3
 800145c:	d101      	bne.n	8001462 <HAL_ADC_Init+0xa6>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_ADC_Init+0xa8>
 8001462:	2300      	movs	r3, #0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d116      	bne.n	8001496 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2218      	movs	r2, #24
 8001470:	4393      	bics	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	0899      	lsrs	r1, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4964      	ldr	r1, [pc, #400]	@ (8001634 <HAL_ADC_Init+0x278>)
 80014a2:	400a      	ands	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7e1b      	ldrb	r3, [r3, #24]
 80014aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e5b      	ldrb	r3, [r3, #25]
 80014b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e9b      	ldrb	r3, [r3, #26]
 80014b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80014ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d002      	beq.n	80014ca <HAL_ADC_Init+0x10e>
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	015b      	lsls	r3, r3, #5
 80014c8:	e000      	b.n	80014cc <HAL_ADC_Init+0x110>
 80014ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80014d2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d101      	bne.n	80014e0 <HAL_ADC_Init+0x124>
 80014dc:	2304      	movs	r3, #4
 80014de:	e000      	b.n	80014e2 <HAL_ADC_Init+0x126>
 80014e0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80014e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2124      	movs	r1, #36	@ 0x24
 80014e8:	5c5b      	ldrb	r3, [r3, r1]
 80014ea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80014ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7edb      	ldrb	r3, [r3, #27]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d115      	bne.n	8001528 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7e9b      	ldrb	r3, [r3, #26]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	0252      	lsls	r2, r2, #9
 800150a:	4313      	orrs	r3, r2
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	e00b      	b.n	8001528 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001514:	2220      	movs	r2, #32
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001520:	2201      	movs	r2, #1
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69da      	ldr	r2, [r3, #28]
 800152c:	23c2      	movs	r3, #194	@ 0xc2
 800152e:	33ff      	adds	r3, #255	@ 0xff
 8001530:	429a      	cmp	r2, r3
 8001532:	d007      	beq.n	8001544 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800153c:	4313      	orrs	r3, r2
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	4313      	orrs	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68d9      	ldr	r1, [r3, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	430a      	orrs	r2, r1
 8001552:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	429a      	cmp	r2, r3
 800155e:	d01b      	beq.n	8001598 <HAL_ADC_Init+0x1dc>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001564:	2b01      	cmp	r3, #1
 8001566:	d017      	beq.n	8001598 <HAL_ADC_Init+0x1dc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156c:	2b02      	cmp	r3, #2
 800156e:	d013      	beq.n	8001598 <HAL_ADC_Init+0x1dc>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001574:	2b03      	cmp	r3, #3
 8001576:	d00f      	beq.n	8001598 <HAL_ADC_Init+0x1dc>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157c:	2b04      	cmp	r3, #4
 800157e:	d00b      	beq.n	8001598 <HAL_ADC_Init+0x1dc>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	2b05      	cmp	r3, #5
 8001586:	d007      	beq.n	8001598 <HAL_ADC_Init+0x1dc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158c:	2b06      	cmp	r3, #6
 800158e:	d003      	beq.n	8001598 <HAL_ADC_Init+0x1dc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001594:	2b07      	cmp	r3, #7
 8001596:	d112      	bne.n	80015be <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2107      	movs	r1, #7
 80015a4:	438a      	bics	r2, r1
 80015a6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6959      	ldr	r1, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	2207      	movs	r2, #7
 80015b4:	401a      	ands	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <HAL_ADC_Init+0x27c>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d10b      	bne.n	80015e6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d8:	2203      	movs	r2, #3
 80015da:	4393      	bics	r3, r2
 80015dc:	2201      	movs	r2, #1
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80015e4:	e01c      	b.n	8001620 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ea:	2212      	movs	r2, #18
 80015ec:	4393      	bics	r3, r2
 80015ee:	2210      	movs	r2, #16
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fa:	2201      	movs	r2, #1
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001602:	230f      	movs	r3, #15
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800160a:	e009      	b.n	8001620 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001610:	2210      	movs	r2, #16
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001618:	230f      	movs	r3, #15
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001620:	230f      	movs	r3, #15
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	781b      	ldrb	r3, [r3, #0]
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b004      	add	sp, #16
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	fffffefd 	.word	0xfffffefd
 8001634:	fffe0219 	.word	0xfffe0219
 8001638:	833fffe7 	.word	0x833fffe7

0800163c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001648:	2317      	movs	r3, #23
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2204      	movs	r2, #4
 8001658:	4013      	ands	r3, r2
 800165a:	d15e      	bne.n	800171a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2234      	movs	r2, #52	@ 0x34
 8001660:	5c9b      	ldrb	r3, [r3, r2]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ADC_Start_DMA+0x2e>
 8001666:	2302      	movs	r3, #2
 8001668:	e05e      	b.n	8001728 <HAL_ADC_Start_DMA+0xec>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2234      	movs	r2, #52	@ 0x34
 800166e:	2101      	movs	r1, #1
 8001670:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	7e5b      	ldrb	r3, [r3, #25]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d007      	beq.n	800168a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800167a:	2317      	movs	r3, #23
 800167c:	18fc      	adds	r4, r7, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	0018      	movs	r0, r3
 8001682:	f000 f983 	bl	800198c <ADC_Enable>
 8001686:	0003      	movs	r3, r0
 8001688:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800168a:	2317      	movs	r3, #23
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d146      	bne.n	8001722 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001698:	4a25      	ldr	r2, [pc, #148]	@ (8001730 <HAL_ADC_Start_DMA+0xf4>)
 800169a:	4013      	ands	r3, r2
 800169c:	2280      	movs	r2, #128	@ 0x80
 800169e:	0052      	lsls	r2, r2, #1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2234      	movs	r2, #52	@ 0x34
 80016b0:	2100      	movs	r1, #0
 80016b2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001734 <HAL_ADC_Start_DMA+0xf8>)
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <HAL_ADC_Start_DMA+0xfc>)
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c8:	4a1c      	ldr	r2, [pc, #112]	@ (800173c <HAL_ADC_Start_DMA+0x100>)
 80016ca:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	221c      	movs	r2, #28
 80016d2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2110      	movs	r1, #16
 80016e0:	430a      	orrs	r2, r1
 80016e2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2101      	movs	r1, #1
 80016f0:	430a      	orrs	r2, r1
 80016f2:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3340      	adds	r3, #64	@ 0x40
 80016fe:	0019      	movs	r1, r3
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f000 fc18 	bl	8001f38 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2104      	movs	r1, #4
 8001714:	430a      	orrs	r2, r1
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	e003      	b.n	8001722 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800171a:	2317      	movs	r3, #23
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2202      	movs	r2, #2
 8001720:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001722:	2317      	movs	r3, #23
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	781b      	ldrb	r3, [r3, #0]
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b007      	add	sp, #28
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	fffff0fe 	.word	0xfffff0fe
 8001734:	08001a95 	.word	0x08001a95
 8001738:	08001b49 	.word	0x08001b49
 800173c:	08001b67 	.word	0x08001b67

08001740 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b002      	add	sp, #8
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177a:	230f      	movs	r3, #15
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	055b      	lsls	r3, r3, #21
 800178e:	429a      	cmp	r2, r3
 8001790:	d011      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0x46>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001796:	2b01      	cmp	r3, #1
 8001798:	d00d      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0x46>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d009      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0x46>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d005      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0x46>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d001      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0x46>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2234      	movs	r2, #52	@ 0x34
 80017ba:	5c9b      	ldrb	r3, [r3, r2]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x54>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e0d0      	b.n	8001966 <HAL_ADC_ConfigChannel+0x1f6>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2234      	movs	r2, #52	@ 0x34
 80017c8:	2101      	movs	r1, #1
 80017ca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2204      	movs	r2, #4
 80017d4:	4013      	ands	r3, r2
 80017d6:	d000      	beq.n	80017da <HAL_ADC_ConfigChannel+0x6a>
 80017d8:	e0b4      	b.n	8001944 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a64      	ldr	r2, [pc, #400]	@ (8001970 <HAL_ADC_ConfigChannel+0x200>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x76>
 80017e4:	e082      	b.n	80018ec <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	055b      	lsls	r3, r3, #21
 8001804:	429a      	cmp	r2, r3
 8001806:	d037      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x108>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	2b01      	cmp	r3, #1
 800180e:	d033      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x108>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001814:	2b02      	cmp	r3, #2
 8001816:	d02f      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x108>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	2b03      	cmp	r3, #3
 800181e:	d02b      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x108>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	2b04      	cmp	r3, #4
 8001826:	d027      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x108>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	2b05      	cmp	r3, #5
 800182e:	d023      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x108>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	2b06      	cmp	r3, #6
 8001836:	d01f      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x108>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	2b07      	cmp	r3, #7
 800183e:	d01b      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2107      	movs	r1, #7
 800184c:	400b      	ands	r3, r1
 800184e:	429a      	cmp	r2, r3
 8001850:	d012      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2107      	movs	r1, #7
 800185e:	438a      	bics	r2, r1
 8001860:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6959      	ldr	r1, [r3, #20]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2207      	movs	r2, #7
 800186e:	401a      	ands	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b10      	cmp	r3, #16
 800187e:	d007      	beq.n	8001890 <HAL_ADC_ConfigChannel+0x120>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b11      	cmp	r3, #17
 8001886:	d003      	beq.n	8001890 <HAL_ADC_ConfigChannel+0x120>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b12      	cmp	r3, #18
 800188e:	d163      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001890:	4b38      	ldr	r3, [pc, #224]	@ (8001974 <HAL_ADC_ConfigChannel+0x204>)
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b10      	cmp	r3, #16
 800189a:	d009      	beq.n	80018b0 <HAL_ADC_ConfigChannel+0x140>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b11      	cmp	r3, #17
 80018a2:	d102      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x13a>
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	03db      	lsls	r3, r3, #15
 80018a8:	e004      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x144>
 80018aa:	2380      	movs	r3, #128	@ 0x80
 80018ac:	045b      	lsls	r3, r3, #17
 80018ae:	e001      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x144>
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001974 <HAL_ADC_ConfigChannel+0x204>)
 80018b6:	430b      	orrs	r3, r1
 80018b8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d14a      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <HAL_ADC_ConfigChannel+0x208>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	492d      	ldr	r1, [pc, #180]	@ (800197c <HAL_ADC_ConfigChannel+0x20c>)
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7fe fc2d 	bl	8000128 <__udivsi3>
 80018ce:	0003      	movs	r3, r0
 80018d0:	001a      	movs	r2, r3
 80018d2:	0013      	movs	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	189b      	adds	r3, r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <HAL_ADC_ConfigChannel+0x16e>
 80018ea:	e035      	b.n	8001958 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2101      	movs	r1, #1
 80018f8:	4099      	lsls	r1, r3
 80018fa:	000b      	movs	r3, r1
 80018fc:	43d9      	mvns	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	400a      	ands	r2, r1
 8001904:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b10      	cmp	r3, #16
 800190c:	d007      	beq.n	800191e <HAL_ADC_ConfigChannel+0x1ae>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b11      	cmp	r3, #17
 8001914:	d003      	beq.n	800191e <HAL_ADC_ConfigChannel+0x1ae>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b12      	cmp	r3, #18
 800191c:	d11c      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_ADC_ConfigChannel+0x204>)
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b10      	cmp	r3, #16
 8001928:	d007      	beq.n	800193a <HAL_ADC_ConfigChannel+0x1ca>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b11      	cmp	r3, #17
 8001930:	d101      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x1c6>
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <HAL_ADC_ConfigChannel+0x210>)
 8001934:	e002      	b.n	800193c <HAL_ADC_ConfigChannel+0x1cc>
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <HAL_ADC_ConfigChannel+0x214>)
 8001938:	e000      	b.n	800193c <HAL_ADC_ConfigChannel+0x1cc>
 800193a:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <HAL_ADC_ConfigChannel+0x218>)
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <HAL_ADC_ConfigChannel+0x204>)
 800193e:	400b      	ands	r3, r1
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e009      	b.n	8001958 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001948:	2220      	movs	r2, #32
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001950:	230f      	movs	r3, #15
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2234      	movs	r2, #52	@ 0x34
 800195c:	2100      	movs	r1, #0
 800195e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001960:	230f      	movs	r3, #15
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	781b      	ldrb	r3, [r3, #0]
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	00001001 	.word	0x00001001
 8001974:	40012708 	.word	0x40012708
 8001978:	20000000 	.word	0x20000000
 800197c:	000f4240 	.word	0x000f4240
 8001980:	ffbfffff 	.word	0xffbfffff
 8001984:	feffffff 	.word	0xfeffffff
 8001988:	ff7fffff 	.word	0xff7fffff

0800198c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2203      	movs	r2, #3
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d112      	bne.n	80019d0 <ADC_Enable+0x44>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d009      	beq.n	80019cc <ADC_Enable+0x40>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	401a      	ands	r2, r3
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d101      	bne.n	80019d0 <ADC_Enable+0x44>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <ADC_Enable+0x46>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d152      	bne.n	8001a7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001a88 <ADC_Enable+0xfc>)
 80019de:	4013      	ands	r3, r2
 80019e0:	d00d      	beq.n	80019fe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e6:	2210      	movs	r2, #16
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f2:	2201      	movs	r2, #1
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e03f      	b.n	8001a7e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <ADC_Enable+0x100>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	491f      	ldr	r1, [pc, #124]	@ (8001a90 <ADC_Enable+0x104>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7fe fb87 	bl	8000128 <__udivsi3>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a1e:	e002      	b.n	8001a26 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f9      	bne.n	8001a20 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff fc98 	bl	8001360 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a34:	e01b      	b.n	8001a6e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a36:	f7ff fc93 	bl	8001360 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d914      	bls.n	8001a6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d00d      	beq.n	8001a6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a56:	2210      	movs	r2, #16
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a62:	2201      	movs	r2, #1
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e007      	b.n	8001a7e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d1dc      	bne.n	8001a36 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b004      	add	sp, #16
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	80000017 	.word	0x80000017
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	000f4240 	.word	0x000f4240

08001a94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa6:	2250      	movs	r2, #80	@ 0x50
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d140      	bne.n	8001b2e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	23c0      	movs	r3, #192	@ 0xc0
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d12d      	bne.n	8001b24 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d129      	bne.n	8001b24 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d122      	bne.n	8001b24 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d110      	bne.n	8001b0c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	210c      	movs	r1, #12
 8001af6:	438a      	bics	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afe:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <ADC_DMAConvCplt+0xb0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	2201      	movs	r2, #1
 8001b04:	431a      	orrs	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b0a:	e00b      	b.n	8001b24 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b10:	2220      	movs	r2, #32
 8001b12:	431a      	orrs	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff fe0a 	bl	8001740 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001b2c:	e005      	b.n	8001b3a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	0010      	movs	r0, r2
 8001b38:	4798      	blx	r3
}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b004      	add	sp, #16
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	fffffefe 	.word	0xfffffefe

08001b48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff fdf9 	bl	8001750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b78:	2240      	movs	r2, #64	@ 0x40
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b84:	2204      	movs	r2, #4
 8001b86:	431a      	orrs	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7ff fde6 	bl	8001760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba4:	2317      	movs	r3, #23
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2234      	movs	r2, #52	@ 0x34
 8001bb8:	5c9b      	ldrb	r3, [r3, r2]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADCEx_Calibration_Start+0x26>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e08d      	b.n	8001cde <HAL_ADCEx_Calibration_Start+0x142>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2234      	movs	r2, #52	@ 0x34
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d112      	bne.n	8001bfe <HAL_ADCEx_Calibration_Start+0x62>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d009      	beq.n	8001bfa <HAL_ADCEx_Calibration_Start+0x5e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADCEx_Calibration_Start+0x62>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_ADCEx_Calibration_Start+0x64>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d15b      	bne.n	8001cbc <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c08:	4a37      	ldr	r2, [pc, #220]	@ (8001ce8 <HAL_ADCEx_Calibration_Start+0x14c>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2180      	movs	r1, #128	@ 0x80
 8001c3c:	0609      	lsls	r1, r1, #24
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001c42:	f7ff fb8d 	bl	8001360 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c4a:	e01d      	b.n	8001c88 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c4c:	f7ff fb88 	bl	8001360 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d916      	bls.n	8001c88 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	0fdb      	lsrs	r3, r3, #31
 8001c62:	07da      	lsls	r2, r3, #31
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	061b      	lsls	r3, r3, #24
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d10d      	bne.n	8001c88 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c70:	2212      	movs	r2, #18
 8001c72:	4393      	bics	r3, r2
 8001c74:	2210      	movs	r2, #16
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2234      	movs	r2, #52	@ 0x34
 8001c80:	2100      	movs	r1, #0
 8001c82:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02a      	b.n	8001cde <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0fdb      	lsrs	r3, r3, #31
 8001c90:	07da      	lsls	r2, r3, #31
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d0d8      	beq.n	8001c4c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68d9      	ldr	r1, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cae:	2203      	movs	r2, #3
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cba:	e009      	b.n	8001cd0 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001cc8:	2317      	movs	r3, #23
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2234      	movs	r2, #52	@ 0x34
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001cd8:	2317      	movs	r3, #23
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	781b      	ldrb	r3, [r3, #0]
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b006      	add	sp, #24
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	fffffefd 	.word	0xfffffefd

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cfe:	d809      	bhi.n	8001d14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	001a      	movs	r2, r3
 8001d06:	231f      	movs	r3, #31
 8001d08:	401a      	ands	r2, r3
 8001d0a:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <__NVIC_EnableIRQ+0x30>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4091      	lsls	r1, r2
 8001d10:	000a      	movs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
  }
}
 8001d14:	46c0      	nop			@ (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	0002      	movs	r2, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d34:	d828      	bhi.n	8001d88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d36:	4a2f      	ldr	r2, [pc, #188]	@ (8001df4 <__NVIC_SetPriority+0xd4>)
 8001d38:	1dfb      	adds	r3, r7, #7
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	33c0      	adds	r3, #192	@ 0xc0
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	589b      	ldr	r3, [r3, r2]
 8001d46:	1dfa      	adds	r2, r7, #7
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	0011      	movs	r1, r2
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	400a      	ands	r2, r1
 8001d50:	00d2      	lsls	r2, r2, #3
 8001d52:	21ff      	movs	r1, #255	@ 0xff
 8001d54:	4091      	lsls	r1, r2
 8001d56:	000a      	movs	r2, r1
 8001d58:	43d2      	mvns	r2, r2
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	22ff      	movs	r2, #255	@ 0xff
 8001d64:	401a      	ands	r2, r3
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	4003      	ands	r3, r0
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d74:	481f      	ldr	r0, [pc, #124]	@ (8001df4 <__NVIC_SetPriority+0xd4>)
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	33c0      	adds	r3, #192	@ 0xc0
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d86:	e031      	b.n	8001dec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d88:	4a1b      	ldr	r2, [pc, #108]	@ (8001df8 <__NVIC_SetPriority+0xd8>)
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	0019      	movs	r1, r3
 8001d90:	230f      	movs	r3, #15
 8001d92:	400b      	ands	r3, r1
 8001d94:	3b08      	subs	r3, #8
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3306      	adds	r3, #6
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	18d3      	adds	r3, r2, r3
 8001d9e:	3304      	adds	r3, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	1dfa      	adds	r2, r7, #7
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	0011      	movs	r1, r2
 8001da8:	2203      	movs	r2, #3
 8001daa:	400a      	ands	r2, r1
 8001dac:	00d2      	lsls	r2, r2, #3
 8001dae:	21ff      	movs	r1, #255	@ 0xff
 8001db0:	4091      	lsls	r1, r2
 8001db2:	000a      	movs	r2, r1
 8001db4:	43d2      	mvns	r2, r2
 8001db6:	401a      	ands	r2, r3
 8001db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	22ff      	movs	r2, #255	@ 0xff
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	2303      	movs	r3, #3
 8001dca:	4003      	ands	r3, r0
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd0:	4809      	ldr	r0, [pc, #36]	@ (8001df8 <__NVIC_SetPriority+0xd8>)
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	001c      	movs	r4, r3
 8001dd8:	230f      	movs	r3, #15
 8001dda:	4023      	ands	r3, r4
 8001ddc:	3b08      	subs	r3, #8
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	430a      	orrs	r2, r1
 8001de2:	3306      	adds	r3, #6
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	18c3      	adds	r3, r0, r3
 8001de8:	3304      	adds	r3, #4
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	46c0      	nop			@ (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b003      	add	sp, #12
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	045b      	lsls	r3, r3, #17
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d301      	bcc.n	8001e14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e10:	2301      	movs	r3, #1
 8001e12:	e010      	b.n	8001e36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <SysTick_Config+0x44>)
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	3a01      	subs	r2, #1
 8001e1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	425b      	negs	r3, r3
 8001e20:	2103      	movs	r1, #3
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff ff7c 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x44>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x44>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b002      	add	sp, #8
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	210f      	movs	r1, #15
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	1c02      	adds	r2, r0, #0
 8001e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	0011      	movs	r1, r2
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b004      	add	sp, #16
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	0002      	movs	r2, r0
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff ff33 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff ffaf 	bl	8001dfc <SysTick_Config>
 8001e9e:	0003      	movs	r3, r0
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e036      	b.n	8001f2c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2221      	movs	r2, #33	@ 0x21
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a18      	ldr	r2, [pc, #96]	@ (8001f34 <HAL_DMA_Init+0x8c>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 f946 	bl	80021a0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2221      	movs	r2, #33	@ 0x21
 8001f1e:	2101      	movs	r1, #1
 8001f20:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b004      	add	sp, #16
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	ffffc00f 	.word	0xffffc00f

08001f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2317      	movs	r3, #23
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2220      	movs	r2, #32
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_DMA_Start_IT+0x24>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e04f      	b.n	8001ffc <HAL_DMA_Start_IT+0xc4>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	2101      	movs	r1, #1
 8001f62:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2221      	movs	r2, #33	@ 0x21
 8001f68:	5c9b      	ldrb	r3, [r3, r2]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d13a      	bne.n	8001fe6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2221      	movs	r2, #33	@ 0x21
 8001f74:	2102      	movs	r1, #2
 8001f76:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	438a      	bics	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f8d7 	bl	8002148 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	210e      	movs	r1, #14
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e00f      	b.n	8001fd4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	210a      	movs	r1, #10
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2104      	movs	r1, #4
 8001fd0:	438a      	bics	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e007      	b.n	8001ff6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	2100      	movs	r1, #0
 8001fec:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fee:	2317      	movs	r3, #23
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ff6:	2317      	movs	r3, #23
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b006      	add	sp, #24
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	2204      	movs	r2, #4
 8002022:	409a      	lsls	r2, r3
 8002024:	0013      	movs	r3, r2
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	d024      	beq.n	8002076 <HAL_DMA_IRQHandler+0x72>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	d020      	beq.n	8002076 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2220      	movs	r2, #32
 800203c:	4013      	ands	r3, r2
 800203e:	d107      	bne.n	8002050 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2104      	movs	r1, #4
 800204c:	438a      	bics	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002058:	2104      	movs	r1, #4
 800205a:	4091      	lsls	r1, r2
 800205c:	000a      	movs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d100      	bne.n	800206a <HAL_DMA_IRQHandler+0x66>
 8002068:	e06a      	b.n	8002140 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	0010      	movs	r0, r2
 8002072:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002074:	e064      	b.n	8002140 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	2202      	movs	r2, #2
 800207c:	409a      	lsls	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	d02b      	beq.n	80020de <HAL_DMA_IRQHandler+0xda>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2202      	movs	r2, #2
 800208a:	4013      	ands	r3, r2
 800208c:	d027      	beq.n	80020de <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2220      	movs	r2, #32
 8002096:	4013      	ands	r3, r2
 8002098:	d10b      	bne.n	80020b2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	210a      	movs	r1, #10
 80020a6:	438a      	bics	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2221      	movs	r2, #33	@ 0x21
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ba:	2102      	movs	r1, #2
 80020bc:	4091      	lsls	r1, r2
 80020be:	000a      	movs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d036      	beq.n	8002140 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	0010      	movs	r0, r2
 80020da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020dc:	e030      	b.n	8002140 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	2208      	movs	r2, #8
 80020e4:	409a      	lsls	r2, r3
 80020e6:	0013      	movs	r3, r2
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	d028      	beq.n	8002140 <HAL_DMA_IRQHandler+0x13c>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2208      	movs	r2, #8
 80020f2:	4013      	ands	r3, r2
 80020f4:	d024      	beq.n	8002140 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	210e      	movs	r1, #14
 8002102:	438a      	bics	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210e:	2101      	movs	r1, #1
 8002110:	4091      	lsls	r1, r2
 8002112:	000a      	movs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2221      	movs	r2, #33	@ 0x21
 8002120:	2101      	movs	r1, #1
 8002122:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	2100      	movs	r1, #0
 800212a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	0010      	movs	r0, r2
 800213c:	4798      	blx	r3
    }
  }
}
 800213e:	e7ff      	b.n	8002140 <HAL_DMA_IRQHandler+0x13c>
 8002140:	46c0      	nop			@ (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b004      	add	sp, #16
 8002146:	bd80      	pop	{r7, pc}

08002148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215e:	2101      	movs	r1, #1
 8002160:	4091      	lsls	r1, r2
 8002162:	000a      	movs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b10      	cmp	r3, #16
 8002174:	d108      	bne.n	8002188 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002186:	e007      	b.n	8002198 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	60da      	str	r2, [r3, #12]
}
 8002198:	46c0      	nop			@ (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b004      	add	sp, #16
 800219e:	bd80      	pop	{r7, pc}

080021a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	001a      	movs	r2, r3
 80021ae:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <DMA_CalcBaseAndBitshift+0x60>)
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d810      	bhi.n	80021d6 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <DMA_CalcBaseAndBitshift+0x64>)
 80021ba:	4694      	mov	ip, r2
 80021bc:	4463      	add	r3, ip
 80021be:	2114      	movs	r1, #20
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7fd ffb1 	bl	8000128 <__udivsi3>
 80021c6:	0003      	movs	r3, r0
 80021c8:	009a      	lsls	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002208 <DMA_CalcBaseAndBitshift+0x68>)
 80021d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80021d4:	e00f      	b.n	80021f6 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <DMA_CalcBaseAndBitshift+0x6c>)
 80021dc:	4694      	mov	ip, r2
 80021de:	4463      	add	r3, ip
 80021e0:	2114      	movs	r1, #20
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7fd ffa0 	bl	8000128 <__udivsi3>
 80021e8:	0003      	movs	r3, r0
 80021ea:	009a      	lsls	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <DMA_CalcBaseAndBitshift+0x70>)
 80021f4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b002      	add	sp, #8
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	40020407 	.word	0x40020407
 8002204:	bffdfff8 	.word	0xbffdfff8
 8002208:	40020000 	.word	0x40020000
 800220c:	bffdfbf8 	.word	0xbffdfbf8
 8002210:	40020400 	.word	0x40020400

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	e155      	b.n	80024d0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4091      	lsls	r1, r2
 800222e:	000a      	movs	r2, r1
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d100      	bne.n	800223c <HAL_GPIO_Init+0x28>
 800223a:	e146      	b.n	80024ca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2203      	movs	r2, #3
 8002242:	4013      	ands	r3, r2
 8002244:	2b01      	cmp	r3, #1
 8002246:	d005      	beq.n	8002254 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002250:	2b02      	cmp	r3, #2
 8002252:	d130      	bne.n	80022b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	409a      	lsls	r2, r3
 8002262:	0013      	movs	r3, r2
 8002264:	43da      	mvns	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	409a      	lsls	r2, r3
 8002276:	0013      	movs	r3, r2
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228a:	2201      	movs	r2, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	2201      	movs	r2, #1
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2203      	movs	r2, #3
 80022bc:	4013      	ands	r3, r2
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d017      	beq.n	80022f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	409a      	lsls	r2, r3
 80022d0:	0013      	movs	r3, r2
 80022d2:	43da      	mvns	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	409a      	lsls	r2, r3
 80022e4:	0013      	movs	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	58d3      	ldr	r3, [r2, r3]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2207      	movs	r2, #7
 8002310:	4013      	ands	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	43da      	mvns	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2107      	movs	r1, #7
 800232a:	400b      	ands	r3, r1
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	0092      	lsls	r2, r2, #2
 8002342:	6939      	ldr	r1, [r7, #16]
 8002344:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	409a      	lsls	r2, r3
 8002354:	0013      	movs	r3, r2
 8002356:	43da      	mvns	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2203      	movs	r2, #3
 8002364:	401a      	ands	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	23c0      	movs	r3, #192	@ 0xc0
 8002380:	029b      	lsls	r3, r3, #10
 8002382:	4013      	ands	r3, r2
 8002384:	d100      	bne.n	8002388 <HAL_GPIO_Init+0x174>
 8002386:	e0a0      	b.n	80024ca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002388:	4b57      	ldr	r3, [pc, #348]	@ (80024e8 <HAL_GPIO_Init+0x2d4>)
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	4b56      	ldr	r3, [pc, #344]	@ (80024e8 <HAL_GPIO_Init+0x2d4>)
 800238e:	2101      	movs	r1, #1
 8002390:	430a      	orrs	r2, r1
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	4b54      	ldr	r3, [pc, #336]	@ (80024e8 <HAL_GPIO_Init+0x2d4>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2201      	movs	r2, #1
 800239a:	4013      	ands	r3, r2
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023a0:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_GPIO_Init+0x2d8>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	589b      	ldr	r3, [r3, r2]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2203      	movs	r2, #3
 80023b2:	4013      	ands	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	409a      	lsls	r2, r3
 80023ba:	0013      	movs	r3, r2
 80023bc:	43da      	mvns	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	2390      	movs	r3, #144	@ 0x90
 80023c8:	05db      	lsls	r3, r3, #23
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d019      	beq.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a47      	ldr	r2, [pc, #284]	@ (80024f0 <HAL_GPIO_Init+0x2dc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0x1ea>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a46      	ldr	r2, [pc, #280]	@ (80024f4 <HAL_GPIO_Init+0x2e0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_GPIO_Init+0x1e6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a45      	ldr	r2, [pc, #276]	@ (80024f8 <HAL_GPIO_Init+0x2e4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x1e2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a44      	ldr	r2, [pc, #272]	@ (80024fc <HAL_GPIO_Init+0x2e8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_Init+0x1de>
 80023ee:	2304      	movs	r3, #4
 80023f0:	e008      	b.n	8002404 <HAL_GPIO_Init+0x1f0>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x1f0>
 80023f6:	2303      	movs	r3, #3
 80023f8:	e004      	b.n	8002404 <HAL_GPIO_Init+0x1f0>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e002      	b.n	8002404 <HAL_GPIO_Init+0x1f0>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_GPIO_Init+0x1f0>
 8002402:	2300      	movs	r3, #0
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	2103      	movs	r1, #3
 8002408:	400a      	ands	r2, r1
 800240a:	0092      	lsls	r2, r2, #2
 800240c:	4093      	lsls	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002414:	4935      	ldr	r1, [pc, #212]	@ (80024ec <HAL_GPIO_Init+0x2d8>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002422:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <HAL_GPIO_Init+0x2ec>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	43da      	mvns	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	035b      	lsls	r3, r3, #13
 800243a:	4013      	ands	r3, r2
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002446:	4b2e      	ldr	r3, [pc, #184]	@ (8002500 <HAL_GPIO_Init+0x2ec>)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800244c:	4b2c      	ldr	r3, [pc, #176]	@ (8002500 <HAL_GPIO_Init+0x2ec>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43da      	mvns	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	039b      	lsls	r3, r3, #14
 8002464:	4013      	ands	r3, r2
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002470:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <HAL_GPIO_Init+0x2ec>)
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002476:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <HAL_GPIO_Init+0x2ec>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43da      	mvns	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	2380      	movs	r3, #128	@ 0x80
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	4013      	ands	r3, r2
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800249a:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_GPIO_Init+0x2ec>)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80024a0:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <HAL_GPIO_Init+0x2ec>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43da      	mvns	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	025b      	lsls	r3, r3, #9
 80024b8:	4013      	ands	r3, r2
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <HAL_GPIO_Init+0x2ec>)
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	40da      	lsrs	r2, r3
 80024d8:	1e13      	subs	r3, r2, #0
 80024da:	d000      	beq.n	80024de <HAL_GPIO_Init+0x2ca>
 80024dc:	e6a2      	b.n	8002224 <HAL_GPIO_Init+0x10>
  } 
}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	46c0      	nop			@ (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b006      	add	sp, #24
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010000 	.word	0x40010000
 80024f0:	48000400 	.word	0x48000400
 80024f4:	48000800 	.word	0x48000800
 80024f8:	48000c00 	.word	0x48000c00
 80024fc:	48001000 	.word	0x48001000
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	0008      	movs	r0, r1
 800250e:	0011      	movs	r1, r2
 8002510:	1cbb      	adds	r3, r7, #2
 8002512:	1c02      	adds	r2, r0, #0
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	1c7b      	adds	r3, r7, #1
 8002518:	1c0a      	adds	r2, r1, #0
 800251a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800251c:	1c7b      	adds	r3, r7, #1
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002524:	1cbb      	adds	r3, r7, #2
 8002526:	881a      	ldrh	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800252c:	e003      	b.n	8002536 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252e:	1cbb      	adds	r3, r7, #2
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b002      	add	sp, #8
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f000 fb76 	bl	8002c40 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2201      	movs	r2, #1
 800255a:	4013      	ands	r3, r2
 800255c:	d100      	bne.n	8002560 <HAL_RCC_OscConfig+0x20>
 800255e:	e08e      	b.n	800267e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002560:	4bc5      	ldr	r3, [pc, #788]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	220c      	movs	r2, #12
 8002566:	4013      	ands	r3, r2
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00e      	beq.n	800258a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800256c:	4bc2      	ldr	r3, [pc, #776]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	220c      	movs	r2, #12
 8002572:	4013      	ands	r3, r2
 8002574:	2b08      	cmp	r3, #8
 8002576:	d117      	bne.n	80025a8 <HAL_RCC_OscConfig+0x68>
 8002578:	4bbf      	ldr	r3, [pc, #764]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	23c0      	movs	r3, #192	@ 0xc0
 800257e:	025b      	lsls	r3, r3, #9
 8002580:	401a      	ands	r2, r3
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	025b      	lsls	r3, r3, #9
 8002586:	429a      	cmp	r2, r3
 8002588:	d10e      	bne.n	80025a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258a:	4bbb      	ldr	r3, [pc, #748]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	2380      	movs	r3, #128	@ 0x80
 8002590:	029b      	lsls	r3, r3, #10
 8002592:	4013      	ands	r3, r2
 8002594:	d100      	bne.n	8002598 <HAL_RCC_OscConfig+0x58>
 8002596:	e071      	b.n	800267c <HAL_RCC_OscConfig+0x13c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d000      	beq.n	80025a2 <HAL_RCC_OscConfig+0x62>
 80025a0:	e06c      	b.n	800267c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f000 fb4c 	bl	8002c40 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_OscConfig+0x80>
 80025b0:	4bb1      	ldr	r3, [pc, #708]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025b6:	2180      	movs	r1, #128	@ 0x80
 80025b8:	0249      	lsls	r1, r1, #9
 80025ba:	430a      	orrs	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e02f      	b.n	8002620 <HAL_RCC_OscConfig+0xe0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCC_OscConfig+0xa2>
 80025c8:	4bab      	ldr	r3, [pc, #684]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4baa      	ldr	r3, [pc, #680]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025ce:	49ab      	ldr	r1, [pc, #684]	@ (800287c <HAL_RCC_OscConfig+0x33c>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	4ba8      	ldr	r3, [pc, #672]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4ba7      	ldr	r3, [pc, #668]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025da:	49a9      	ldr	r1, [pc, #676]	@ (8002880 <HAL_RCC_OscConfig+0x340>)
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e01e      	b.n	8002620 <HAL_RCC_OscConfig+0xe0>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d10e      	bne.n	8002608 <HAL_RCC_OscConfig+0xc8>
 80025ea:	4ba3      	ldr	r3, [pc, #652]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4ba2      	ldr	r3, [pc, #648]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025f0:	2180      	movs	r1, #128	@ 0x80
 80025f2:	02c9      	lsls	r1, r1, #11
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	4b9f      	ldr	r3, [pc, #636]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b9e      	ldr	r3, [pc, #632]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80025fe:	2180      	movs	r1, #128	@ 0x80
 8002600:	0249      	lsls	r1, r1, #9
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xe0>
 8002608:	4b9b      	ldr	r3, [pc, #620]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b9a      	ldr	r3, [pc, #616]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800260e:	499b      	ldr	r1, [pc, #620]	@ (800287c <HAL_RCC_OscConfig+0x33c>)
 8002610:	400a      	ands	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	4b98      	ldr	r3, [pc, #608]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b97      	ldr	r3, [pc, #604]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800261a:	4999      	ldr	r1, [pc, #612]	@ (8002880 <HAL_RCC_OscConfig+0x340>)
 800261c:	400a      	ands	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d014      	beq.n	8002652 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fe9a 	bl	8001360 <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002632:	f7fe fe95 	bl	8001360 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	@ 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e2fd      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002644:	4b8c      	ldr	r3, [pc, #560]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	029b      	lsls	r3, r3, #10
 800264c:	4013      	ands	r3, r2
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0xf2>
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7fe fe85 	bl	8001360 <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7fe fe80 	bl	8001360 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	@ 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e2e8      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	4b82      	ldr	r3, [pc, #520]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	4013      	ands	r3, r2
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x11c>
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2202      	movs	r2, #2
 8002684:	4013      	ands	r3, r2
 8002686:	d100      	bne.n	800268a <HAL_RCC_OscConfig+0x14a>
 8002688:	e06c      	b.n	8002764 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800268a:	4b7b      	ldr	r3, [pc, #492]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	220c      	movs	r2, #12
 8002690:	4013      	ands	r3, r2
 8002692:	d00e      	beq.n	80026b2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002694:	4b78      	ldr	r3, [pc, #480]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	220c      	movs	r2, #12
 800269a:	4013      	ands	r3, r2
 800269c:	2b08      	cmp	r3, #8
 800269e:	d11f      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1a0>
 80026a0:	4b75      	ldr	r3, [pc, #468]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	23c0      	movs	r3, #192	@ 0xc0
 80026a6:	025b      	lsls	r3, r3, #9
 80026a8:	401a      	ands	r2, r3
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d116      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	4b71      	ldr	r3, [pc, #452]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2202      	movs	r2, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x188>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e2bb      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	22f8      	movs	r2, #248	@ 0xf8
 80026ce:	4393      	bics	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00da      	lsls	r2, r3, #3
 80026d8:	4b67      	ldr	r3, [pc, #412]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	e041      	b.n	8002764 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d024      	beq.n	8002732 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e8:	4b63      	ldr	r3, [pc, #396]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b62      	ldr	r3, [pc, #392]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fe34 	bl	8001360 <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe fe2f 	bl	8001360 <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e297      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d0f1      	beq.n	80026fe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b57      	ldr	r3, [pc, #348]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	22f8      	movs	r2, #248	@ 0xf8
 8002720:	4393      	bics	r3, r2
 8002722:	0019      	movs	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	00da      	lsls	r2, r3, #3
 800272a:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e018      	b.n	8002764 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002732:	4b51      	ldr	r3, [pc, #324]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b50      	ldr	r3, [pc, #320]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002738:	2101      	movs	r1, #1
 800273a:	438a      	bics	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe fe0f 	bl	8001360 <HAL_GetTick>
 8002742:	0003      	movs	r3, r0
 8002744:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002748:	f7fe fe0a 	bl	8001360 <HAL_GetTick>
 800274c:	0002      	movs	r2, r0
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e272      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	d1f1      	bne.n	8002748 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2208      	movs	r2, #8
 800276a:	4013      	ands	r3, r2
 800276c:	d036      	beq.n	80027dc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d019      	beq.n	80027aa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002776:	4b40      	ldr	r3, [pc, #256]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800277a:	4b3f      	ldr	r3, [pc, #252]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800277c:	2101      	movs	r1, #1
 800277e:	430a      	orrs	r2, r1
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7fe fded 	bl	8001360 <HAL_GetTick>
 8002786:	0003      	movs	r3, r0
 8002788:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe fde8 	bl	8001360 <HAL_GetTick>
 8002790:	0002      	movs	r2, r0
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e250      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	4b36      	ldr	r3, [pc, #216]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	2202      	movs	r2, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d0f1      	beq.n	800278c <HAL_RCC_OscConfig+0x24c>
 80027a8:	e018      	b.n	80027dc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027aa:	4b33      	ldr	r3, [pc, #204]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80027ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027ae:	4b32      	ldr	r3, [pc, #200]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80027b0:	2101      	movs	r1, #1
 80027b2:	438a      	bics	r2, r1
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7fe fdd3 	bl	8001360 <HAL_GetTick>
 80027ba:	0003      	movs	r3, r0
 80027bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe fdce 	bl	8001360 <HAL_GetTick>
 80027c4:	0002      	movs	r2, r0
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e236      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d2:	4b29      	ldr	r3, [pc, #164]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	2202      	movs	r2, #2
 80027d8:	4013      	ands	r3, r2
 80027da:	d1f1      	bne.n	80027c0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2204      	movs	r2, #4
 80027e2:	4013      	ands	r3, r2
 80027e4:	d100      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2a8>
 80027e6:	e0b5      	b.n	8002954 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e8:	201f      	movs	r0, #31
 80027ea:	183b      	adds	r3, r7, r0
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f0:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	4013      	ands	r3, r2
 80027fa:	d110      	bne.n	800281e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 8002802:	2180      	movs	r1, #128	@ 0x80
 8002804:	0549      	lsls	r1, r1, #21
 8002806:	430a      	orrs	r2, r1
 8002808:	61da      	str	r2, [r3, #28]
 800280a:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	055b      	lsls	r3, r3, #21
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002818:	183b      	adds	r3, r7, r0
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_RCC_OscConfig+0x344>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4013      	ands	r3, r2
 8002828:	d11a      	bne.n	8002860 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282a:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <HAL_RCC_OscConfig+0x344>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_RCC_OscConfig+0x344>)
 8002830:	2180      	movs	r1, #128	@ 0x80
 8002832:	0049      	lsls	r1, r1, #1
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002838:	f7fe fd92 	bl	8001360 <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7fe fd8d 	bl	8001360 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	@ 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1f5      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_RCC_OscConfig+0x344>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4013      	ands	r3, r2
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10f      	bne.n	8002888 <HAL_RCC_OscConfig+0x348>
 8002868:	4b03      	ldr	r3, [pc, #12]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800286a:	6a1a      	ldr	r2, [r3, #32]
 800286c:	4b02      	ldr	r3, [pc, #8]	@ (8002878 <HAL_RCC_OscConfig+0x338>)
 800286e:	2101      	movs	r1, #1
 8002870:	430a      	orrs	r2, r1
 8002872:	621a      	str	r2, [r3, #32]
 8002874:	e036      	b.n	80028e4 <HAL_RCC_OscConfig+0x3a4>
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	40021000 	.word	0x40021000
 800287c:	fffeffff 	.word	0xfffeffff
 8002880:	fffbffff 	.word	0xfffbffff
 8002884:	40007000 	.word	0x40007000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10c      	bne.n	80028aa <HAL_RCC_OscConfig+0x36a>
 8002890:	4bca      	ldr	r3, [pc, #808]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002892:	6a1a      	ldr	r2, [r3, #32]
 8002894:	4bc9      	ldr	r3, [pc, #804]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002896:	2101      	movs	r1, #1
 8002898:	438a      	bics	r2, r1
 800289a:	621a      	str	r2, [r3, #32]
 800289c:	4bc7      	ldr	r3, [pc, #796]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	4bc6      	ldr	r3, [pc, #792]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80028a2:	2104      	movs	r1, #4
 80028a4:	438a      	bics	r2, r1
 80028a6:	621a      	str	r2, [r3, #32]
 80028a8:	e01c      	b.n	80028e4 <HAL_RCC_OscConfig+0x3a4>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0x38c>
 80028b2:	4bc2      	ldr	r3, [pc, #776]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	4bc1      	ldr	r3, [pc, #772]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80028b8:	2104      	movs	r1, #4
 80028ba:	430a      	orrs	r2, r1
 80028bc:	621a      	str	r2, [r3, #32]
 80028be:	4bbf      	ldr	r3, [pc, #764]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	4bbe      	ldr	r3, [pc, #760]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	430a      	orrs	r2, r1
 80028c8:	621a      	str	r2, [r3, #32]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0x3a4>
 80028cc:	4bbb      	ldr	r3, [pc, #748]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	4bba      	ldr	r3, [pc, #744]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80028d2:	2101      	movs	r1, #1
 80028d4:	438a      	bics	r2, r1
 80028d6:	621a      	str	r2, [r3, #32]
 80028d8:	4bb8      	ldr	r3, [pc, #736]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80028da:	6a1a      	ldr	r2, [r3, #32]
 80028dc:	4bb7      	ldr	r3, [pc, #732]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80028de:	2104      	movs	r1, #4
 80028e0:	438a      	bics	r2, r1
 80028e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d014      	beq.n	8002916 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ec:	f7fe fd38 	bl	8001360 <HAL_GetTick>
 80028f0:	0003      	movs	r3, r0
 80028f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f4:	e009      	b.n	800290a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7fe fd33 	bl	8001360 <HAL_GetTick>
 80028fa:	0002      	movs	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	4aaf      	ldr	r2, [pc, #700]	@ (8002bc0 <HAL_RCC_OscConfig+0x680>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e19a      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290a:	4bac      	ldr	r3, [pc, #688]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	2202      	movs	r2, #2
 8002910:	4013      	ands	r3, r2
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x3b6>
 8002914:	e013      	b.n	800293e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fd23 	bl	8001360 <HAL_GetTick>
 800291a:	0003      	movs	r3, r0
 800291c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291e:	e009      	b.n	8002934 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7fe fd1e 	bl	8001360 <HAL_GetTick>
 8002924:	0002      	movs	r2, r0
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	4aa5      	ldr	r2, [pc, #660]	@ (8002bc0 <HAL_RCC_OscConfig+0x680>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e185      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002934:	4ba1      	ldr	r3, [pc, #644]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800293e:	231f      	movs	r3, #31
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002948:	4b9c      	ldr	r3, [pc, #624]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	4b9b      	ldr	r3, [pc, #620]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 800294e:	499d      	ldr	r1, [pc, #628]	@ (8002bc4 <HAL_RCC_OscConfig+0x684>)
 8002950:	400a      	ands	r2, r1
 8002952:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2210      	movs	r2, #16
 800295a:	4013      	ands	r3, r2
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d12a      	bne.n	80029bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002966:	4b95      	ldr	r3, [pc, #596]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800296a:	4b94      	ldr	r3, [pc, #592]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 800296c:	2104      	movs	r1, #4
 800296e:	430a      	orrs	r2, r1
 8002970:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002972:	4b92      	ldr	r3, [pc, #584]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002976:	4b91      	ldr	r3, [pc, #580]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002978:	2101      	movs	r1, #1
 800297a:	430a      	orrs	r2, r1
 800297c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe fcef 	bl	8001360 <HAL_GetTick>
 8002982:	0003      	movs	r3, r0
 8002984:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002988:	f7fe fcea 	bl	8001360 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e152      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800299a:	4b88      	ldr	r3, [pc, #544]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 800299c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299e:	2202      	movs	r2, #2
 80029a0:	4013      	ands	r3, r2
 80029a2:	d0f1      	beq.n	8002988 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029a4:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a8:	22f8      	movs	r2, #248	@ 0xf8
 80029aa:	4393      	bics	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	00da      	lsls	r2, r3, #3
 80029b4:	4b81      	ldr	r3, [pc, #516]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80029ba:	e034      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	3305      	adds	r3, #5
 80029c2:	d111      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80029c4:	4b7d      	ldr	r3, [pc, #500]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029c8:	4b7c      	ldr	r3, [pc, #496]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029ca:	2104      	movs	r1, #4
 80029cc:	438a      	bics	r2, r1
 80029ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029d0:	4b7a      	ldr	r3, [pc, #488]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d4:	22f8      	movs	r2, #248	@ 0xf8
 80029d6:	4393      	bics	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	00da      	lsls	r2, r3, #3
 80029e0:	4b76      	ldr	r3, [pc, #472]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029e2:	430a      	orrs	r2, r1
 80029e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80029e6:	e01e      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029e8:	4b74      	ldr	r3, [pc, #464]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ec:	4b73      	ldr	r3, [pc, #460]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029ee:	2104      	movs	r1, #4
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80029f4:	4b71      	ldr	r3, [pc, #452]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f8:	4b70      	ldr	r3, [pc, #448]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 80029fa:	2101      	movs	r1, #1
 80029fc:	438a      	bics	r2, r1
 80029fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fcae 	bl	8001360 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a0a:	f7fe fca9 	bl	8001360 <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e111      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a1c:	4b67      	ldr	r3, [pc, #412]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a20:	2202      	movs	r2, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	d1f1      	bne.n	8002a0a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d05c      	beq.n	8002aea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002a30:	4b62      	ldr	r3, [pc, #392]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	220c      	movs	r2, #12
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	d00e      	beq.n	8002a5a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	220c      	movs	r2, #12
 8002a42:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d114      	bne.n	8002a72 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002a48:	4b5c      	ldr	r3, [pc, #368]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	23c0      	movs	r3, #192	@ 0xc0
 8002a4e:	025b      	lsls	r3, r3, #9
 8002a50:	401a      	ands	r2, r3
 8002a52:	23c0      	movs	r3, #192	@ 0xc0
 8002a54:	025b      	lsls	r3, r3, #9
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a5a:	4b58      	ldr	r3, [pc, #352]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	029b      	lsls	r3, r3, #10
 8002a62:	4013      	ands	r3, r2
 8002a64:	d040      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x5a8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d03c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0e6      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01b      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002a7a:	4b50      	ldr	r3, [pc, #320]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002a80:	2180      	movs	r1, #128	@ 0x80
 8002a82:	0249      	lsls	r1, r1, #9
 8002a84:	430a      	orrs	r2, r1
 8002a86:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fc6a 	bl	8001360 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a92:	f7fe fc65 	bl	8001360 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0cd      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002aa4:	4b45      	ldr	r3, [pc, #276]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	029b      	lsls	r3, r3, #10
 8002aac:	4013      	ands	r3, r2
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x552>
 8002ab0:	e01b      	b.n	8002aea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002ab2:	4b42      	ldr	r3, [pc, #264]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ab6:	4b41      	ldr	r3, [pc, #260]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002ab8:	4943      	ldr	r1, [pc, #268]	@ (8002bc8 <HAL_RCC_OscConfig+0x688>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe fc4f 	bl	8001360 <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac8:	f7fe fc4a 	bl	8001360 <HAL_GetTick>
 8002acc:	0002      	movs	r2, r0
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0b2      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002ada:	4b38      	ldr	r3, [pc, #224]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	029b      	lsls	r3, r3, #10
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x588>
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ae8:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d100      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5b4>
 8002af2:	e0a4      	b.n	8002c3e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af4:	4b31      	ldr	r3, [pc, #196]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	220c      	movs	r2, #12
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d100      	bne.n	8002b02 <HAL_RCC_OscConfig+0x5c2>
 8002b00:	e078      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d14c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b10:	492e      	ldr	r1, [pc, #184]	@ (8002bcc <HAL_RCC_OscConfig+0x68c>)
 8002b12:	400a      	ands	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fe fc23 	bl	8001360 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fc1e 	bl	8001360 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e086      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b32:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	049b      	lsls	r3, r3, #18
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	220f      	movs	r2, #15
 8002b44:	4393      	bics	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b52:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd0 <HAL_RCC_OscConfig+0x690>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	431a      	orrs	r2, r3
 8002b66:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b72:	2180      	movs	r1, #128	@ 0x80
 8002b74:	0449      	lsls	r1, r1, #17
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fbf1 	bl	8001360 <HAL_GetTick>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fbec 	bl	8001360 <HAL_GetTick>
 8002b88:	0002      	movs	r2, r0
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e054      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b96:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	049b      	lsls	r3, r3, #18
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x644>
 8002ba2:	e04c      	b.n	8002c3e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba4:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <HAL_RCC_OscConfig+0x67c>)
 8002baa:	4908      	ldr	r1, [pc, #32]	@ (8002bcc <HAL_RCC_OscConfig+0x68c>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fbd6 	bl	8001360 <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb8:	e015      	b.n	8002be6 <HAL_RCC_OscConfig+0x6a6>
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	00001388 	.word	0x00001388
 8002bc4:	efffffff 	.word	0xefffffff
 8002bc8:	fffeffff 	.word	0xfffeffff
 8002bcc:	feffffff 	.word	0xfeffffff
 8002bd0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe fbc4 	bl	8001360 <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e02c      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_RCC_OscConfig+0x708>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	@ 0x80
 8002bec:	049b      	lsls	r3, r3, #18
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x694>
 8002bf2:	e024      	b.n	8002c3e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e01f      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_OscConfig+0x708>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_RCC_OscConfig+0x708>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	23c0      	movs	r3, #192	@ 0xc0
 8002c10:	025b      	lsls	r3, r3, #9
 8002c12:	401a      	ands	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d10e      	bne.n	8002c3a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	220f      	movs	r2, #15
 8002c20:	401a      	ands	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	23f0      	movs	r3, #240	@ 0xf0
 8002c2e:	039b      	lsls	r3, r3, #14
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b008      	add	sp, #32
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000

08002c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0bf      	b.n	8002de0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b61      	ldr	r3, [pc, #388]	@ (8002de8 <HAL_RCC_ClockConfig+0x19c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d911      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b5e      	ldr	r3, [pc, #376]	@ (8002de8 <HAL_RCC_ClockConfig+0x19c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2201      	movs	r2, #1
 8002c74:	4393      	bics	r3, r2
 8002c76:	0019      	movs	r1, r3
 8002c78:	4b5b      	ldr	r3, [pc, #364]	@ (8002de8 <HAL_RCC_ClockConfig+0x19c>)
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c80:	4b59      	ldr	r3, [pc, #356]	@ (8002de8 <HAL_RCC_ClockConfig+0x19c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0a6      	b.n	8002de0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2202      	movs	r2, #2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d015      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d006      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ca6:	4b51      	ldr	r3, [pc, #324]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	4b50      	ldr	r3, [pc, #320]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002cac:	21e0      	movs	r1, #224	@ 0xe0
 8002cae:	00c9      	lsls	r1, r1, #3
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	22f0      	movs	r2, #240	@ 0xf0
 8002cba:	4393      	bics	r3, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d04c      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b44      	ldr	r3, [pc, #272]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d120      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e07a      	b.n	8002de0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	2380      	movs	r3, #128	@ 0x80
 8002cf8:	049b      	lsls	r3, r3, #18
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d114      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06e      	b.n	8002de0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d0a:	4b38      	ldr	r3, [pc, #224]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	029b      	lsls	r3, r3, #10
 8002d12:	4013      	ands	r3, r2
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e062      	b.n	8002de0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b34      	ldr	r3, [pc, #208]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e05b      	b.n	8002de0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d28:	4b30      	ldr	r3, [pc, #192]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	4393      	bics	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4b2d      	ldr	r3, [pc, #180]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7fe fb10 	bl	8001360 <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d44:	e009      	b.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d46:	f7fe fb0b 	bl	8001360 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	4a27      	ldr	r2, [pc, #156]	@ (8002df0 <HAL_RCC_ClockConfig+0x1a4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e042      	b.n	8002de0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b24      	ldr	r3, [pc, #144]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	220c      	movs	r2, #12
 8002d60:	401a      	ands	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1ec      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <HAL_RCC_ClockConfig+0x19c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2201      	movs	r2, #1
 8002d72:	4013      	ands	r3, r2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d211      	bcs.n	8002d9e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <HAL_RCC_ClockConfig+0x19c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4393      	bics	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	4b18      	ldr	r3, [pc, #96]	@ (8002de8 <HAL_RCC_ClockConfig+0x19c>)
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8c:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <HAL_RCC_ClockConfig+0x19c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2201      	movs	r2, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e020      	b.n	8002de0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2204      	movs	r2, #4
 8002da4:	4013      	ands	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a11      	ldr	r2, [pc, #68]	@ (8002df4 <HAL_RCC_ClockConfig+0x1a8>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dbc:	f000 f820 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8002dc0:	0001      	movs	r1, r0
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <HAL_RCC_ClockConfig+0x1a0>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	220f      	movs	r2, #15
 8002dca:	4013      	ands	r3, r2
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <HAL_RCC_ClockConfig+0x1ac>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	000a      	movs	r2, r1
 8002dd2:	40da      	lsrs	r2, r3
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_RCC_ClockConfig+0x1b0>)
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fe fa7b 	bl	80012d4 <HAL_InitTick>
  
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40021000 	.word	0x40021000
 8002df0:	00001388 	.word	0x00001388
 8002df4:	fffff8ff 	.word	0xfffff8ff
 8002df8:	080052c8 	.word	0x080052c8
 8002dfc:	20000000 	.word	0x20000000

08002e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	220c      	movs	r2, #12
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d046      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xb8>
 8002e2a:	d848      	bhi.n	8002ebe <HAL_RCC_GetSysClockFreq+0xbe>
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d002      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x36>
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d003      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x3c>
 8002e34:	e043      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e36:	4b27      	ldr	r3, [pc, #156]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e38:	613b      	str	r3, [r7, #16]
      break;
 8002e3a:	e043      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	0c9b      	lsrs	r3, r3, #18
 8002e40:	220f      	movs	r2, #15
 8002e42:	4013      	ands	r3, r2
 8002e44:	4a24      	ldr	r2, [pc, #144]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e4a:	4b21      	ldr	r3, [pc, #132]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	220f      	movs	r2, #15
 8002e50:	4013      	ands	r3, r2
 8002e52:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xdc>)
 8002e54:	5cd3      	ldrb	r3, [r2, r3]
 8002e56:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	23c0      	movs	r3, #192	@ 0xc0
 8002e5c:	025b      	lsls	r3, r3, #9
 8002e5e:	401a      	ands	r2, r3
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	025b      	lsls	r3, r3, #9
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d109      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	481a      	ldr	r0, [pc, #104]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e6c:	f7fd f95c 	bl	8000128 <__udivsi3>
 8002e70:	0003      	movs	r3, r0
 8002e72:	001a      	movs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4353      	muls	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e01a      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	23c0      	movs	r3, #192	@ 0xc0
 8002e80:	025b      	lsls	r3, r3, #9
 8002e82:	401a      	ands	r2, r3
 8002e84:	23c0      	movs	r3, #192	@ 0xc0
 8002e86:	025b      	lsls	r3, r3, #9
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d109      	bne.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	4814      	ldr	r0, [pc, #80]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002e90:	f7fd f94a 	bl	8000128 <__udivsi3>
 8002e94:	0003      	movs	r3, r0
 8002e96:	001a      	movs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4353      	muls	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	480c      	ldr	r0, [pc, #48]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ea4:	f7fd f940 	bl	8000128 <__udivsi3>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	001a      	movs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4353      	muls	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	613b      	str	r3, [r7, #16]
      break;
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002eba:	613b      	str	r3, [r7, #16]
      break;
 8002ebc:	e002      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ebe:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ec0:	613b      	str	r3, [r7, #16]
      break;
 8002ec2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ec4:	693b      	ldr	r3, [r7, #16]
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b006      	add	sp, #24
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	007a1200 	.word	0x007a1200
 8002ed8:	080052e0 	.word	0x080052e0
 8002edc:	080052f0 	.word	0x080052f0
 8002ee0:	02dc6c00 	.word	0x02dc6c00

08002ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b02      	ldr	r3, [pc, #8]	@ (8002ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			@ (mov r8, r8)
 8002ef4:	20000000 	.word	0x20000000

08002ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002efc:	f7ff fff2 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f00:	0001      	movs	r1, r0
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	2207      	movs	r2, #7
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	40d9      	lsrs	r1, r3
 8002f12:	000b      	movs	r3, r1
}    
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	080052d8 	.word	0x080052d8

08002f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	025b      	lsls	r3, r3, #9
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d100      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002f40:	e08e      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2017      	movs	r0, #23
 8002f44:	183b      	adds	r3, r7, r0
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4a:	4b6e      	ldr	r3, [pc, #440]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	055b      	lsls	r3, r3, #21
 8002f52:	4013      	ands	r3, r2
 8002f54:	d110      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	4b6b      	ldr	r3, [pc, #428]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f5c:	2180      	movs	r1, #128	@ 0x80
 8002f5e:	0549      	lsls	r1, r1, #21
 8002f60:	430a      	orrs	r2, r1
 8002f62:	61da      	str	r2, [r3, #28]
 8002f64:	4b67      	ldr	r3, [pc, #412]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	2380      	movs	r3, #128	@ 0x80
 8002f6a:	055b      	lsls	r3, r3, #21
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f72:	183b      	adds	r3, r7, r0
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b63      	ldr	r3, [pc, #396]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	@ 0x80
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4013      	ands	r3, r2
 8002f82:	d11a      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f84:	4b60      	ldr	r3, [pc, #384]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b5f      	ldr	r3, [pc, #380]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002f8a:	2180      	movs	r1, #128	@ 0x80
 8002f8c:	0049      	lsls	r1, r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe f9e5 	bl	8001360 <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	e008      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9c:	f7fe f9e0 	bl	8001360 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	@ 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0a6      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fae:	4b56      	ldr	r3, [pc, #344]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	@ 0x80
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fba:	4b52      	ldr	r3, [pc, #328]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	23c0      	movs	r3, #192	@ 0xc0
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d034      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	23c0      	movs	r3, #192	@ 0xc0
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d02c      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fdc:	4b49      	ldr	r3, [pc, #292]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fe6:	4b47      	ldr	r3, [pc, #284]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	4b46      	ldr	r3, [pc, #280]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	0249      	lsls	r1, r1, #9
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff4:	4b43      	ldr	r3, [pc, #268]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	4b42      	ldr	r3, [pc, #264]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ffa:	4945      	ldr	r1, [pc, #276]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003000:	4b40      	ldr	r3, [pc, #256]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	4013      	ands	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe f9a7 	bl	8001360 <HAL_GetTick>
 8003012:	0003      	movs	r3, r0
 8003014:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	e009      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f7fe f9a2 	bl	8001360 <HAL_GetTick>
 800301c:	0002      	movs	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	4a3c      	ldr	r2, [pc, #240]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e067      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	4b35      	ldr	r3, [pc, #212]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	2202      	movs	r2, #2
 8003032:	4013      	ands	r3, r2
 8003034:	d0f0      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003036:	4b33      	ldr	r3, [pc, #204]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a34      	ldr	r2, [pc, #208]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800303c:	4013      	ands	r3, r2
 800303e:	0019      	movs	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4b2f      	ldr	r3, [pc, #188]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003046:	430a      	orrs	r2, r1
 8003048:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800304a:	2317      	movs	r3, #23
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4b2b      	ldr	r3, [pc, #172]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	4b2a      	ldr	r3, [pc, #168]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800305a:	492f      	ldr	r1, [pc, #188]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800305c:	400a      	ands	r2, r1
 800305e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2201      	movs	r2, #1
 8003066:	4013      	ands	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800306a:	4b26      	ldr	r3, [pc, #152]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	2203      	movs	r2, #3
 8003070:	4393      	bics	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	4b22      	ldr	r3, [pc, #136]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800307a:	430a      	orrs	r2, r1
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2202      	movs	r2, #2
 8003084:	4013      	ands	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003088:	4b1e      	ldr	r3, [pc, #120]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	4a23      	ldr	r2, [pc, #140]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003098:	430a      	orrs	r2, r1
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	@ 0x80
 80030a2:	02db      	lsls	r3, r3, #11
 80030a4:	4013      	ands	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a8:	4b16      	ldr	r3, [pc, #88]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2220      	movs	r2, #32
 80030c2:	4013      	ands	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	2210      	movs	r2, #16
 80030cc:	4393      	bics	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	@ 0x80
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4013      	ands	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030e6:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	2240      	movs	r2, #64	@ 0x40
 80030ec:	4393      	bics	r3, r2
 80030ee:	0019      	movs	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	4b03      	ldr	r3, [pc, #12]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030f6:	430a      	orrs	r2, r1
 80030f8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b006      	add	sp, #24
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	40007000 	.word	0x40007000
 800310c:	fffffcff 	.word	0xfffffcff
 8003110:	fffeffff 	.word	0xfffeffff
 8003114:	00001388 	.word	0x00001388
 8003118:	efffffff 	.word	0xefffffff
 800311c:	fffcffff 	.word	0xfffcffff
 8003120:	fff3ffff 	.word	0xfff3ffff

08003124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e042      	b.n	80031bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	223d      	movs	r2, #61	@ 0x3d
 800313a:	5c9b      	ldrb	r3, [r3, r2]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d107      	bne.n	8003152 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	223c      	movs	r2, #60	@ 0x3c
 8003146:	2100      	movs	r1, #0
 8003148:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f7fd ff39 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	223d      	movs	r2, #61	@ 0x3d
 8003156:	2102      	movs	r1, #2
 8003158:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	0019      	movs	r1, r3
 8003164:	0010      	movs	r0, r2
 8003166:	f000 fad7 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2246      	movs	r2, #70	@ 0x46
 800316e:	2101      	movs	r1, #1
 8003170:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	223e      	movs	r2, #62	@ 0x3e
 8003176:	2101      	movs	r1, #1
 8003178:	5499      	strb	r1, [r3, r2]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	223f      	movs	r2, #63	@ 0x3f
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2240      	movs	r2, #64	@ 0x40
 8003186:	2101      	movs	r1, #1
 8003188:	5499      	strb	r1, [r3, r2]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2241      	movs	r2, #65	@ 0x41
 800318e:	2101      	movs	r1, #1
 8003190:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2242      	movs	r2, #66	@ 0x42
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2243      	movs	r2, #67	@ 0x43
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2244      	movs	r2, #68	@ 0x44
 80031a6:	2101      	movs	r1, #1
 80031a8:	5499      	strb	r1, [r3, r2]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2245      	movs	r2, #69	@ 0x45
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	223d      	movs	r2, #61	@ 0x3d
 80031b6:	2101      	movs	r1, #1
 80031b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e042      	b.n	800325c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	223d      	movs	r2, #61	@ 0x3d
 80031da:	5c9b      	ldrb	r3, [r3, r2]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d107      	bne.n	80031f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	223c      	movs	r2, #60	@ 0x3c
 80031e6:	2100      	movs	r1, #0
 80031e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 f839 	bl	8003264 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	223d      	movs	r2, #61	@ 0x3d
 80031f6:	2102      	movs	r1, #2
 80031f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	0019      	movs	r1, r3
 8003204:	0010      	movs	r0, r2
 8003206:	f000 fa87 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2246      	movs	r2, #70	@ 0x46
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	223e      	movs	r2, #62	@ 0x3e
 8003216:	2101      	movs	r1, #1
 8003218:	5499      	strb	r1, [r3, r2]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	223f      	movs	r2, #63	@ 0x3f
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2240      	movs	r2, #64	@ 0x40
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2241      	movs	r2, #65	@ 0x41
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2242      	movs	r2, #66	@ 0x42
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2243      	movs	r2, #67	@ 0x43
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2244      	movs	r2, #68	@ 0x44
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2245      	movs	r2, #69	@ 0x45
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	223d      	movs	r2, #61	@ 0x3d
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d108      	bne.n	8003296 <HAL_TIM_PWM_Start+0x22>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	223e      	movs	r2, #62	@ 0x3e
 8003288:	5c9b      	ldrb	r3, [r3, r2]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	1e5a      	subs	r2, r3, #1
 8003290:	4193      	sbcs	r3, r2
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e01f      	b.n	80032d6 <HAL_TIM_PWM_Start+0x62>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d108      	bne.n	80032ae <HAL_TIM_PWM_Start+0x3a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	223f      	movs	r2, #63	@ 0x3f
 80032a0:	5c9b      	ldrb	r3, [r3, r2]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	1e5a      	subs	r2, r3, #1
 80032a8:	4193      	sbcs	r3, r2
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	e013      	b.n	80032d6 <HAL_TIM_PWM_Start+0x62>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d108      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x52>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2240      	movs	r2, #64	@ 0x40
 80032b8:	5c9b      	ldrb	r3, [r3, r2]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	1e5a      	subs	r2, r3, #1
 80032c0:	4193      	sbcs	r3, r2
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e007      	b.n	80032d6 <HAL_TIM_PWM_Start+0x62>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2241      	movs	r2, #65	@ 0x41
 80032ca:	5c9b      	ldrb	r3, [r3, r2]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	1e5a      	subs	r2, r3, #1
 80032d2:	4193      	sbcs	r3, r2
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e074      	b.n	80033c8 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_PWM_Start+0x7a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	223e      	movs	r2, #62	@ 0x3e
 80032e8:	2102      	movs	r1, #2
 80032ea:	5499      	strb	r1, [r3, r2]
 80032ec:	e013      	b.n	8003316 <HAL_TIM_PWM_Start+0xa2>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_PWM_Start+0x8a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	223f      	movs	r2, #63	@ 0x3f
 80032f8:	2102      	movs	r1, #2
 80032fa:	5499      	strb	r1, [r3, r2]
 80032fc:	e00b      	b.n	8003316 <HAL_TIM_PWM_Start+0xa2>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d104      	bne.n	800330e <HAL_TIM_PWM_Start+0x9a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2240      	movs	r2, #64	@ 0x40
 8003308:	2102      	movs	r1, #2
 800330a:	5499      	strb	r1, [r3, r2]
 800330c:	e003      	b.n	8003316 <HAL_TIM_PWM_Start+0xa2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2241      	movs	r2, #65	@ 0x41
 8003312:	2102      	movs	r1, #2
 8003314:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6839      	ldr	r1, [r7, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	0018      	movs	r0, r3
 8003320:	f000 fd1e 	bl	8003d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a29      	ldr	r2, [pc, #164]	@ (80033d0 <HAL_TIM_PWM_Start+0x15c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00e      	beq.n	800334c <HAL_TIM_PWM_Start+0xd8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a28      	ldr	r2, [pc, #160]	@ (80033d4 <HAL_TIM_PWM_Start+0x160>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d009      	beq.n	800334c <HAL_TIM_PWM_Start+0xd8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a26      	ldr	r2, [pc, #152]	@ (80033d8 <HAL_TIM_PWM_Start+0x164>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_TIM_PWM_Start+0xd8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a25      	ldr	r2, [pc, #148]	@ (80033dc <HAL_TIM_PWM_Start+0x168>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_TIM_PWM_Start+0xdc>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_TIM_PWM_Start+0xde>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2180      	movs	r1, #128	@ 0x80
 8003362:	0209      	lsls	r1, r1, #8
 8003364:	430a      	orrs	r2, r1
 8003366:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <HAL_TIM_PWM_Start+0x15c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <HAL_TIM_PWM_Start+0x11e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	05db      	lsls	r3, r3, #23
 800337a:	429a      	cmp	r2, r3
 800337c:	d009      	beq.n	8003392 <HAL_TIM_PWM_Start+0x11e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a17      	ldr	r2, [pc, #92]	@ (80033e0 <HAL_TIM_PWM_Start+0x16c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIM_PWM_Start+0x11e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a11      	ldr	r2, [pc, #68]	@ (80033d4 <HAL_TIM_PWM_Start+0x160>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d111      	bne.n	80033b6 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2207      	movs	r2, #7
 800339a:	4013      	ands	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	d010      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2101      	movs	r1, #1
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b4:	e007      	b.n	80033c6 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800
 80033e0:	40000400 	.word	0x40000400

080033e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2317      	movs	r3, #23
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	223c      	movs	r2, #60	@ 0x3c
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003402:	2302      	movs	r3, #2
 8003404:	e0ad      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	223c      	movs	r2, #60	@ 0x3c
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d100      	bne.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003414:	e076      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d900      	bls.n	800341e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800341c:	e095      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x166>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d04e      	beq.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b08      	cmp	r3, #8
 8003428:	d900      	bls.n	800342c <HAL_TIM_PWM_ConfigChannel+0x48>
 800342a:	e08e      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x166>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d021      	beq.n	800347c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003438:	e087      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f000 f9f6 	bl	8003834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2108      	movs	r1, #8
 8003454:	430a      	orrs	r2, r1
 8003456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2104      	movs	r1, #4
 8003464:	438a      	bics	r2, r1
 8003466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6999      	ldr	r1, [r3, #24]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	619a      	str	r2, [r3, #24]
      break;
 800347a:	e06b      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	0011      	movs	r1, r2
 8003484:	0018      	movs	r0, r3
 8003486:	f000 fa5d 	bl	8003944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2180      	movs	r1, #128	@ 0x80
 8003496:	0109      	lsls	r1, r1, #4
 8003498:	430a      	orrs	r2, r1
 800349a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4931      	ldr	r1, [pc, #196]	@ (800356c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6999      	ldr	r1, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	021a      	lsls	r2, r3, #8
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]
      break;
 80034c0:	e048      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 fabe 	bl	8003a4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2108      	movs	r1, #8
 80034dc:	430a      	orrs	r2, r1
 80034de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2104      	movs	r1, #4
 80034ec:	438a      	bics	r2, r1
 80034ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69d9      	ldr	r1, [r3, #28]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	61da      	str	r2, [r3, #28]
      break;
 8003502:	e027      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f000 fb23 	bl	8003b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2180      	movs	r1, #128	@ 0x80
 800351e:	0109      	lsls	r1, r1, #4
 8003520:	430a      	orrs	r2, r1
 8003522:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	490f      	ldr	r1, [pc, #60]	@ (800356c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003530:	400a      	ands	r2, r1
 8003532:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69d9      	ldr	r1, [r3, #28]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	021a      	lsls	r2, r3, #8
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	61da      	str	r2, [r3, #28]
      break;
 8003548:	e004      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800354a:	2317      	movs	r3, #23
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
      break;
 8003552:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	223c      	movs	r2, #60	@ 0x3c
 8003558:	2100      	movs	r1, #0
 800355a:	5499      	strb	r1, [r3, r2]

  return status;
 800355c:	2317      	movs	r3, #23
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	781b      	ldrb	r3, [r3, #0]
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b006      	add	sp, #24
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	fffffbff 	.word	0xfffffbff

08003570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	230f      	movs	r3, #15
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	223c      	movs	r2, #60	@ 0x3c
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIM_ConfigClockSource+0x20>
 800358c:	2302      	movs	r3, #2
 800358e:	e0bc      	b.n	800370a <HAL_TIM_ConfigClockSource+0x19a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	223c      	movs	r2, #60	@ 0x3c
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223d      	movs	r2, #61	@ 0x3d
 800359c:	2102      	movs	r1, #2
 800359e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2277      	movs	r2, #119	@ 0x77
 80035ac:	4393      	bics	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4a58      	ldr	r2, [pc, #352]	@ (8003714 <HAL_TIM_ConfigClockSource+0x1a4>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2280      	movs	r2, #128	@ 0x80
 80035c6:	0192      	lsls	r2, r2, #6
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_TIM_ConfigClockSource+0xde>
 80035cc:	2280      	movs	r2, #128	@ 0x80
 80035ce:	0192      	lsls	r2, r2, #6
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d900      	bls.n	80035d6 <HAL_TIM_ConfigClockSource+0x66>
 80035d4:	e088      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 80035d6:	2280      	movs	r2, #128	@ 0x80
 80035d8:	0152      	lsls	r2, r2, #5
 80035da:	4293      	cmp	r3, r2
 80035dc:	d100      	bne.n	80035e0 <HAL_TIM_ConfigClockSource+0x70>
 80035de:	e088      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x182>
 80035e0:	2280      	movs	r2, #128	@ 0x80
 80035e2:	0152      	lsls	r2, r2, #5
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d900      	bls.n	80035ea <HAL_TIM_ConfigClockSource+0x7a>
 80035e8:	e07e      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 80035ea:	2b70      	cmp	r3, #112	@ 0x70
 80035ec:	d018      	beq.n	8003620 <HAL_TIM_ConfigClockSource+0xb0>
 80035ee:	d900      	bls.n	80035f2 <HAL_TIM_ConfigClockSource+0x82>
 80035f0:	e07a      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 80035f2:	2b60      	cmp	r3, #96	@ 0x60
 80035f4:	d04f      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x126>
 80035f6:	d900      	bls.n	80035fa <HAL_TIM_ConfigClockSource+0x8a>
 80035f8:	e076      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 80035fa:	2b50      	cmp	r3, #80	@ 0x50
 80035fc:	d03b      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x106>
 80035fe:	d900      	bls.n	8003602 <HAL_TIM_ConfigClockSource+0x92>
 8003600:	e072      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d057      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x146>
 8003606:	d900      	bls.n	800360a <HAL_TIM_ConfigClockSource+0x9a>
 8003608:	e06e      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 800360a:	2b30      	cmp	r3, #48	@ 0x30
 800360c:	d063      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x166>
 800360e:	d86b      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 8003610:	2b20      	cmp	r3, #32
 8003612:	d060      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x166>
 8003614:	d868      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d05d      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x166>
 800361a:	2b10      	cmp	r3, #16
 800361c:	d05b      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x166>
 800361e:	e063      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003630:	f000 fb76 	bl	8003d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2277      	movs	r2, #119	@ 0x77
 8003640:	4313      	orrs	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
      break;
 800364c:	e052      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800365e:	f000 fb5f 	bl	8003d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2180      	movs	r1, #128	@ 0x80
 800366e:	01c9      	lsls	r1, r1, #7
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
      break;
 8003674:	e03e      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003682:	001a      	movs	r2, r3
 8003684:	f000 fad2 	bl	8003c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2150      	movs	r1, #80	@ 0x50
 800368e:	0018      	movs	r0, r3
 8003690:	f000 fb2c 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 8003694:	e02e      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036a2:	001a      	movs	r2, r3
 80036a4:	f000 faf0 	bl	8003c88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2160      	movs	r1, #96	@ 0x60
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 fb1c 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 80036b4:	e01e      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c2:	001a      	movs	r2, r3
 80036c4:	f000 fab2 	bl	8003c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2140      	movs	r1, #64	@ 0x40
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 fb0c 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 80036d4:	e00e      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0019      	movs	r1, r3
 80036e0:	0010      	movs	r0, r2
 80036e2:	f000 fb03 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 80036e6:	e005      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036e8:	230f      	movs	r3, #15
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
      break;
 80036f0:	e000      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036f2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	223d      	movs	r2, #61	@ 0x3d
 80036f8:	2101      	movs	r1, #1
 80036fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	223c      	movs	r2, #60	@ 0x3c
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]

  return status;
 8003704:	230f      	movs	r3, #15
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
}
 800370a:	0018      	movs	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	ffff00ff 	.word	0xffff00ff

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3b      	ldr	r2, [pc, #236]	@ (8003818 <TIM_Base_SetConfig+0x100>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d008      	beq.n	8003742 <TIM_Base_SetConfig+0x2a>
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	05db      	lsls	r3, r3, #23
 8003736:	429a      	cmp	r2, r3
 8003738:	d003      	beq.n	8003742 <TIM_Base_SetConfig+0x2a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a37      	ldr	r2, [pc, #220]	@ (800381c <TIM_Base_SetConfig+0x104>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d108      	bne.n	8003754 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2270      	movs	r2, #112	@ 0x70
 8003746:	4393      	bics	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a30      	ldr	r2, [pc, #192]	@ (8003818 <TIM_Base_SetConfig+0x100>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d018      	beq.n	800378e <TIM_Base_SetConfig+0x76>
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	05db      	lsls	r3, r3, #23
 8003762:	429a      	cmp	r2, r3
 8003764:	d013      	beq.n	800378e <TIM_Base_SetConfig+0x76>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2c      	ldr	r2, [pc, #176]	@ (800381c <TIM_Base_SetConfig+0x104>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00f      	beq.n	800378e <TIM_Base_SetConfig+0x76>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2b      	ldr	r2, [pc, #172]	@ (8003820 <TIM_Base_SetConfig+0x108>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00b      	beq.n	800378e <TIM_Base_SetConfig+0x76>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2a      	ldr	r2, [pc, #168]	@ (8003824 <TIM_Base_SetConfig+0x10c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <TIM_Base_SetConfig+0x76>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a29      	ldr	r2, [pc, #164]	@ (8003828 <TIM_Base_SetConfig+0x110>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d003      	beq.n	800378e <TIM_Base_SetConfig+0x76>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a28      	ldr	r2, [pc, #160]	@ (800382c <TIM_Base_SetConfig+0x114>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d108      	bne.n	80037a0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a27      	ldr	r2, [pc, #156]	@ (8003830 <TIM_Base_SetConfig+0x118>)
 8003792:	4013      	ands	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2280      	movs	r2, #128	@ 0x80
 80037a4:	4393      	bics	r3, r2
 80037a6:	001a      	movs	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a13      	ldr	r2, [pc, #76]	@ (8003818 <TIM_Base_SetConfig+0x100>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <TIM_Base_SetConfig+0xce>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a14      	ldr	r2, [pc, #80]	@ (8003824 <TIM_Base_SetConfig+0x10c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <TIM_Base_SetConfig+0xce>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a13      	ldr	r2, [pc, #76]	@ (8003828 <TIM_Base_SetConfig+0x110>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <TIM_Base_SetConfig+0xce>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a12      	ldr	r2, [pc, #72]	@ (800382c <TIM_Base_SetConfig+0x114>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d103      	bne.n	80037ee <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2201      	movs	r2, #1
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d106      	bne.n	800380e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2201      	movs	r2, #1
 8003806:	4393      	bics	r3, r2
 8003808:	001a      	movs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	611a      	str	r2, [r3, #16]
  }
}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40000400 	.word	0x40000400
 8003820:	40002000 	.word	0x40002000
 8003824:	40014000 	.word	0x40014000
 8003828:	40014400 	.word	0x40014400
 800382c:	40014800 	.word	0x40014800
 8003830:	fffffcff 	.word	0xfffffcff

08003834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	2201      	movs	r2, #1
 800384a:	4393      	bics	r3, r2
 800384c:	001a      	movs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2270      	movs	r2, #112	@ 0x70
 8003862:	4393      	bics	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2203      	movs	r2, #3
 800386a:	4393      	bics	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2202      	movs	r2, #2
 800387c:	4393      	bics	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a27      	ldr	r2, [pc, #156]	@ (800392c <TIM_OC1_SetConfig+0xf8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00b      	beq.n	80038aa <TIM_OC1_SetConfig+0x76>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <TIM_OC1_SetConfig+0xfc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <TIM_OC1_SetConfig+0x76>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a25      	ldr	r2, [pc, #148]	@ (8003934 <TIM_OC1_SetConfig+0x100>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_OC1_SetConfig+0x76>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a24      	ldr	r2, [pc, #144]	@ (8003938 <TIM_OC1_SetConfig+0x104>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10c      	bne.n	80038c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2208      	movs	r2, #8
 80038ae:	4393      	bics	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2204      	movs	r2, #4
 80038c0:	4393      	bics	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a19      	ldr	r2, [pc, #100]	@ (800392c <TIM_OC1_SetConfig+0xf8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_OC1_SetConfig+0xb0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <TIM_OC1_SetConfig+0xfc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_OC1_SetConfig+0xb0>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <TIM_OC1_SetConfig+0x100>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_OC1_SetConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a16      	ldr	r2, [pc, #88]	@ (8003938 <TIM_OC1_SetConfig+0x104>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4a15      	ldr	r2, [pc, #84]	@ (800393c <TIM_OC1_SetConfig+0x108>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4a14      	ldr	r2, [pc, #80]	@ (8003940 <TIM_OC1_SetConfig+0x10c>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b006      	add	sp, #24
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40014000 	.word	0x40014000
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800
 800393c:	fffffeff 	.word	0xfffffeff
 8003940:	fffffdff 	.word	0xfffffdff

08003944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	2210      	movs	r2, #16
 800395a:	4393      	bics	r3, r2
 800395c:	001a      	movs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a2e      	ldr	r2, [pc, #184]	@ (8003a2c <TIM_OC2_SetConfig+0xe8>)
 8003972:	4013      	ands	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a2d      	ldr	r2, [pc, #180]	@ (8003a30 <TIM_OC2_SetConfig+0xec>)
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2220      	movs	r2, #32
 800398e:	4393      	bics	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a24      	ldr	r2, [pc, #144]	@ (8003a34 <TIM_OC2_SetConfig+0xf0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10d      	bne.n	80039c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2280      	movs	r2, #128	@ 0x80
 80039aa:	4393      	bics	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2240      	movs	r2, #64	@ 0x40
 80039be:	4393      	bics	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a34 <TIM_OC2_SetConfig+0xf0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <TIM_OC2_SetConfig+0x9e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a38 <TIM_OC2_SetConfig+0xf4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <TIM_OC2_SetConfig+0x9e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a19      	ldr	r2, [pc, #100]	@ (8003a3c <TIM_OC2_SetConfig+0xf8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_OC2_SetConfig+0x9e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a18      	ldr	r2, [pc, #96]	@ (8003a40 <TIM_OC2_SetConfig+0xfc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d113      	bne.n	8003a0a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <TIM_OC2_SetConfig+0x100>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4a16      	ldr	r2, [pc, #88]	@ (8003a48 <TIM_OC2_SetConfig+0x104>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	621a      	str	r2, [r3, #32]
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b006      	add	sp, #24
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	ffff8fff 	.word	0xffff8fff
 8003a30:	fffffcff 	.word	0xfffffcff
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	fffffbff 	.word	0xfffffbff
 8003a48:	fffff7ff 	.word	0xfffff7ff

08003a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	4a33      	ldr	r2, [pc, #204]	@ (8003b30 <TIM_OC3_SetConfig+0xe4>)
 8003a62:	401a      	ands	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2270      	movs	r2, #112	@ 0x70
 8003a78:	4393      	bics	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	4393      	bics	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4a28      	ldr	r2, [pc, #160]	@ (8003b34 <TIM_OC3_SetConfig+0xe8>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a24      	ldr	r2, [pc, #144]	@ (8003b38 <TIM_OC3_SetConfig+0xec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10d      	bne.n	8003ac6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	4a23      	ldr	r2, [pc, #140]	@ (8003b3c <TIM_OC3_SetConfig+0xf0>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b40 <TIM_OC3_SetConfig+0xf4>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <TIM_OC3_SetConfig+0xec>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_OC3_SetConfig+0x9a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b44 <TIM_OC3_SetConfig+0xf8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_OC3_SetConfig+0x9a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b48 <TIM_OC3_SetConfig+0xfc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_OC3_SetConfig+0x9a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b4c <TIM_OC3_SetConfig+0x100>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d113      	bne.n	8003b0e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	@ (8003b50 <TIM_OC3_SetConfig+0x104>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4a18      	ldr	r2, [pc, #96]	@ (8003b54 <TIM_OC3_SetConfig+0x108>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b006      	add	sp, #24
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	fffffeff 	.word	0xfffffeff
 8003b34:	fffffdff 	.word	0xfffffdff
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	fffff7ff 	.word	0xfffff7ff
 8003b40:	fffffbff 	.word	0xfffffbff
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40014400 	.word	0x40014400
 8003b4c:	40014800 	.word	0x40014800
 8003b50:	ffffefff 	.word	0xffffefff
 8003b54:	ffffdfff 	.word	0xffffdfff

08003b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4a26      	ldr	r2, [pc, #152]	@ (8003c08 <TIM_OC4_SetConfig+0xb0>)
 8003b6e:	401a      	ands	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a22      	ldr	r2, [pc, #136]	@ (8003c0c <TIM_OC4_SetConfig+0xb4>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a21      	ldr	r2, [pc, #132]	@ (8003c10 <TIM_OC4_SetConfig+0xb8>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c14 <TIM_OC4_SetConfig+0xbc>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	031b      	lsls	r3, r3, #12
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a19      	ldr	r2, [pc, #100]	@ (8003c18 <TIM_OC4_SetConfig+0xc0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_OC4_SetConfig+0x78>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <TIM_OC4_SetConfig+0xc4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_OC4_SetConfig+0x78>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <TIM_OC4_SetConfig+0xc8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC4_SetConfig+0x78>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a16      	ldr	r2, [pc, #88]	@ (8003c24 <TIM_OC4_SetConfig+0xcc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d109      	bne.n	8003be4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <TIM_OC4_SetConfig+0xd0>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b006      	add	sp, #24
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	ffffefff 	.word	0xffffefff
 8003c0c:	ffff8fff 	.word	0xffff8fff
 8003c10:	fffffcff 	.word	0xfffffcff
 8003c14:	ffffdfff 	.word	0xffffdfff
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	ffffbfff 	.word	0xffffbfff

08003c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	2201      	movs	r2, #1
 8003c44:	4393      	bics	r3, r2
 8003c46:	001a      	movs	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	22f0      	movs	r2, #240	@ 0xf0
 8003c56:	4393      	bics	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	220a      	movs	r2, #10
 8003c68:	4393      	bics	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	46c0      	nop			@ (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b006      	add	sp, #24
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce8 <TIM_TI2_ConfigInputStage+0x60>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	22a0      	movs	r2, #160	@ 0xa0
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b006      	add	sp, #24
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	ffff0fff 	.word	0xffff0fff

08003cec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2270      	movs	r2, #112	@ 0x70
 8003d00:	4393      	bics	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	2207      	movs	r2, #7
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b004      	add	sp, #16
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <TIM_ETR_SetConfig+0x3c>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	021a      	lsls	r2, r3, #8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	609a      	str	r2, [r3, #8]
}
 8003d54:	46c0      	nop			@ (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b006      	add	sp, #24
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	ffff00ff 	.word	0xffff00ff

08003d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	221f      	movs	r2, #31
 8003d70:	4013      	ands	r3, r2
 8003d72:	2201      	movs	r2, #1
 8003d74:	409a      	lsls	r2, r3
 8003d76:	0013      	movs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	43d2      	mvns	r2, r2
 8003d82:	401a      	ands	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	211f      	movs	r1, #31
 8003d90:	400b      	ands	r3, r1
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4099      	lsls	r1, r3
 8003d96:	000b      	movs	r3, r1
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b006      	add	sp, #24
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	223c      	movs	r2, #60	@ 0x3c
 8003db6:	5c9b      	ldrb	r3, [r3, r2]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e047      	b.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	223c      	movs	r2, #60	@ 0x3c
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	223d      	movs	r2, #61	@ 0x3d
 8003dcc:	2102      	movs	r1, #2
 8003dce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2270      	movs	r2, #112	@ 0x70
 8003de4:	4393      	bics	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a16      	ldr	r2, [pc, #88]	@ (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00f      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	05db      	lsls	r3, r3, #23
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d009      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a11      	ldr	r2, [pc, #68]	@ (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a10      	ldr	r2, [pc, #64]	@ (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10c      	bne.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2280      	movs	r2, #128	@ 0x80
 8003e28:	4393      	bics	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223d      	movs	r2, #61	@ 0x3d
 8003e42:	2101      	movs	r1, #1
 8003e44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	223c      	movs	r2, #60	@ 0x3c
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40014000 	.word	0x40014000

08003e64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	223c      	movs	r2, #60	@ 0x3c
 8003e76:	5c9b      	ldrb	r3, [r3, r2]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e03e      	b.n	8003efe <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	223c      	movs	r2, #60	@ 0x3c
 8003e84:	2101      	movs	r1, #1
 8003e86:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	22ff      	movs	r2, #255	@ 0xff
 8003e8c:	4393      	bics	r3, r2
 8003e8e:	001a      	movs	r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f08 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a18      	ldr	r2, [pc, #96]	@ (8003f0c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003eaa:	401a      	ands	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	@ (8003f10 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003eb8:	401a      	ands	r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a13      	ldr	r2, [pc, #76]	@ (8003f14 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a11      	ldr	r2, [pc, #68]	@ (8003f18 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8003f1c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223c      	movs	r2, #60	@ 0x3c
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b004      	add	sp, #16
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	fffffcff 	.word	0xfffffcff
 8003f0c:	fffffbff 	.word	0xfffffbff
 8003f10:	fffff7ff 	.word	0xfffff7ff
 8003f14:	ffffefff 	.word	0xffffefff
 8003f18:	ffffdfff 	.word	0xffffdfff
 8003f1c:	ffffbfff 	.word	0xffffbfff

08003f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e044      	b.n	8003fbc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d107      	bne.n	8003f4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2278      	movs	r2, #120	@ 0x78
 8003f3e:	2100      	movs	r1, #0
 8003f40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7fd f89d 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2224      	movs	r2, #36	@ 0x24
 8003f4e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	438a      	bics	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fab4 	bl	80044d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 f8c8 	bl	8004108 <UART_SetConfig>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e01c      	b.n	8003fbc <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	490d      	ldr	r1, [pc, #52]	@ (8003fc4 <HAL_UART_Init+0xa4>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	212a      	movs	r1, #42	@ 0x2a
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2101      	movs	r1, #1
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 fb43 	bl	8004640 <UART_CheckIdleState>
 8003fba:	0003      	movs	r3, r0
}
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	ffffb7ff 	.word	0xffffb7ff

08003fc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	@ 0x28
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	1dbb      	adds	r3, r7, #6
 8003fd6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d000      	beq.n	8003fe2 <HAL_UART_Transmit+0x1a>
 8003fe0:	e08c      	b.n	80040fc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_UART_Transmit+0x28>
 8003fe8:	1dbb      	adds	r3, r7, #6
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e084      	b.n	80040fe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d109      	bne.n	8004014 <HAL_UART_Transmit+0x4c>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2201      	movs	r2, #1
 800400c:	4013      	ands	r3, r2
 800400e:	d001      	beq.n	8004014 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e074      	b.n	80040fe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2284      	movs	r2, #132	@ 0x84
 8004018:	2100      	movs	r1, #0
 800401a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2221      	movs	r2, #33	@ 0x21
 8004020:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004022:	f7fd f99d 	bl	8001360 <HAL_GetTick>
 8004026:	0003      	movs	r3, r0
 8004028:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1dba      	adds	r2, r7, #6
 800402e:	2150      	movs	r1, #80	@ 0x50
 8004030:	8812      	ldrh	r2, [r2, #0]
 8004032:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1dba      	adds	r2, r7, #6
 8004038:	2152      	movs	r1, #82	@ 0x52
 800403a:	8812      	ldrh	r2, [r2, #0]
 800403c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	2380      	movs	r3, #128	@ 0x80
 8004044:	015b      	lsls	r3, r3, #5
 8004046:	429a      	cmp	r2, r3
 8004048:	d108      	bne.n	800405c <HAL_UART_Transmit+0x94>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d104      	bne.n	800405c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	e003      	b.n	8004064 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004064:	e02f      	b.n	80040c6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	0013      	movs	r3, r2
 8004070:	2200      	movs	r2, #0
 8004072:	2180      	movs	r1, #128	@ 0x80
 8004074:	f000 fb8c 	bl	8004790 <UART_WaitOnFlagUntilTimeout>
 8004078:	1e03      	subs	r3, r0, #0
 800407a:	d004      	beq.n	8004086 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e03b      	b.n	80040fe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10b      	bne.n	80040a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	881a      	ldrh	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	05d2      	lsls	r2, r2, #23
 8004096:	0dd2      	lsrs	r2, r2, #23
 8004098:	b292      	uxth	r2, r2
 800409a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	3302      	adds	r3, #2
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	e007      	b.n	80040b4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2252      	movs	r2, #82	@ 0x52
 80040b8:	5a9b      	ldrh	r3, [r3, r2]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b299      	uxth	r1, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2252      	movs	r2, #82	@ 0x52
 80040c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2252      	movs	r2, #82	@ 0x52
 80040ca:	5a9b      	ldrh	r3, [r3, r2]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1c9      	bne.n	8004066 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	0013      	movs	r3, r2
 80040dc:	2200      	movs	r2, #0
 80040de:	2140      	movs	r1, #64	@ 0x40
 80040e0:	f000 fb56 	bl	8004790 <UART_WaitOnFlagUntilTimeout>
 80040e4:	1e03      	subs	r3, r0, #0
 80040e6:	d004      	beq.n	80040f2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e005      	b.n	80040fe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b008      	add	sp, #32
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004110:	231e      	movs	r3, #30
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4abe      	ldr	r2, [pc, #760]	@ (8004430 <UART_SetConfig+0x328>)
 8004138:	4013      	ands	r3, r2
 800413a:	0019      	movs	r1, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4ab9      	ldr	r2, [pc, #740]	@ (8004434 <UART_SetConfig+0x32c>)
 800414e:	4013      	ands	r3, r2
 8004150:	0019      	movs	r1, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4ab0      	ldr	r2, [pc, #704]	@ (8004438 <UART_SetConfig+0x330>)
 8004176:	4013      	ands	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4aac      	ldr	r2, [pc, #688]	@ (800443c <UART_SetConfig+0x334>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d127      	bne.n	80041de <UART_SetConfig+0xd6>
 800418e:	4bac      	ldr	r3, [pc, #688]	@ (8004440 <UART_SetConfig+0x338>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	2203      	movs	r2, #3
 8004194:	4013      	ands	r3, r2
 8004196:	2b03      	cmp	r3, #3
 8004198:	d00d      	beq.n	80041b6 <UART_SetConfig+0xae>
 800419a:	d81b      	bhi.n	80041d4 <UART_SetConfig+0xcc>
 800419c:	2b02      	cmp	r3, #2
 800419e:	d014      	beq.n	80041ca <UART_SetConfig+0xc2>
 80041a0:	d818      	bhi.n	80041d4 <UART_SetConfig+0xcc>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <UART_SetConfig+0xa4>
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d00a      	beq.n	80041c0 <UART_SetConfig+0xb8>
 80041aa:	e013      	b.n	80041d4 <UART_SetConfig+0xcc>
 80041ac:	231f      	movs	r3, #31
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	e0bd      	b.n	8004332 <UART_SetConfig+0x22a>
 80041b6:	231f      	movs	r3, #31
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	2202      	movs	r2, #2
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e0b8      	b.n	8004332 <UART_SetConfig+0x22a>
 80041c0:	231f      	movs	r3, #31
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	2204      	movs	r2, #4
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	e0b3      	b.n	8004332 <UART_SetConfig+0x22a>
 80041ca:	231f      	movs	r3, #31
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	2208      	movs	r2, #8
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	e0ae      	b.n	8004332 <UART_SetConfig+0x22a>
 80041d4:	231f      	movs	r3, #31
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	2210      	movs	r2, #16
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e0a9      	b.n	8004332 <UART_SetConfig+0x22a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a98      	ldr	r2, [pc, #608]	@ (8004444 <UART_SetConfig+0x33c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d134      	bne.n	8004252 <UART_SetConfig+0x14a>
 80041e8:	4b95      	ldr	r3, [pc, #596]	@ (8004440 <UART_SetConfig+0x338>)
 80041ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ec:	23c0      	movs	r3, #192	@ 0xc0
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	4013      	ands	r3, r2
 80041f2:	22c0      	movs	r2, #192	@ 0xc0
 80041f4:	0292      	lsls	r2, r2, #10
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d017      	beq.n	800422a <UART_SetConfig+0x122>
 80041fa:	22c0      	movs	r2, #192	@ 0xc0
 80041fc:	0292      	lsls	r2, r2, #10
 80041fe:	4293      	cmp	r3, r2
 8004200:	d822      	bhi.n	8004248 <UART_SetConfig+0x140>
 8004202:	2280      	movs	r2, #128	@ 0x80
 8004204:	0292      	lsls	r2, r2, #10
 8004206:	4293      	cmp	r3, r2
 8004208:	d019      	beq.n	800423e <UART_SetConfig+0x136>
 800420a:	2280      	movs	r2, #128	@ 0x80
 800420c:	0292      	lsls	r2, r2, #10
 800420e:	4293      	cmp	r3, r2
 8004210:	d81a      	bhi.n	8004248 <UART_SetConfig+0x140>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d004      	beq.n	8004220 <UART_SetConfig+0x118>
 8004216:	2280      	movs	r2, #128	@ 0x80
 8004218:	0252      	lsls	r2, r2, #9
 800421a:	4293      	cmp	r3, r2
 800421c:	d00a      	beq.n	8004234 <UART_SetConfig+0x12c>
 800421e:	e013      	b.n	8004248 <UART_SetConfig+0x140>
 8004220:	231f      	movs	r3, #31
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	e083      	b.n	8004332 <UART_SetConfig+0x22a>
 800422a:	231f      	movs	r3, #31
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	2202      	movs	r2, #2
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e07e      	b.n	8004332 <UART_SetConfig+0x22a>
 8004234:	231f      	movs	r3, #31
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	2204      	movs	r2, #4
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e079      	b.n	8004332 <UART_SetConfig+0x22a>
 800423e:	231f      	movs	r3, #31
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	2208      	movs	r2, #8
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e074      	b.n	8004332 <UART_SetConfig+0x22a>
 8004248:	231f      	movs	r3, #31
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	2210      	movs	r2, #16
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	e06f      	b.n	8004332 <UART_SetConfig+0x22a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a7c      	ldr	r2, [pc, #496]	@ (8004448 <UART_SetConfig+0x340>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d134      	bne.n	80042c6 <UART_SetConfig+0x1be>
 800425c:	4b78      	ldr	r3, [pc, #480]	@ (8004440 <UART_SetConfig+0x338>)
 800425e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004260:	23c0      	movs	r3, #192	@ 0xc0
 8004262:	031b      	lsls	r3, r3, #12
 8004264:	4013      	ands	r3, r2
 8004266:	22c0      	movs	r2, #192	@ 0xc0
 8004268:	0312      	lsls	r2, r2, #12
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <UART_SetConfig+0x196>
 800426e:	22c0      	movs	r2, #192	@ 0xc0
 8004270:	0312      	lsls	r2, r2, #12
 8004272:	4293      	cmp	r3, r2
 8004274:	d822      	bhi.n	80042bc <UART_SetConfig+0x1b4>
 8004276:	2280      	movs	r2, #128	@ 0x80
 8004278:	0312      	lsls	r2, r2, #12
 800427a:	4293      	cmp	r3, r2
 800427c:	d019      	beq.n	80042b2 <UART_SetConfig+0x1aa>
 800427e:	2280      	movs	r2, #128	@ 0x80
 8004280:	0312      	lsls	r2, r2, #12
 8004282:	4293      	cmp	r3, r2
 8004284:	d81a      	bhi.n	80042bc <UART_SetConfig+0x1b4>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <UART_SetConfig+0x18c>
 800428a:	2280      	movs	r2, #128	@ 0x80
 800428c:	02d2      	lsls	r2, r2, #11
 800428e:	4293      	cmp	r3, r2
 8004290:	d00a      	beq.n	80042a8 <UART_SetConfig+0x1a0>
 8004292:	e013      	b.n	80042bc <UART_SetConfig+0x1b4>
 8004294:	231f      	movs	r3, #31
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e049      	b.n	8004332 <UART_SetConfig+0x22a>
 800429e:	231f      	movs	r3, #31
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e044      	b.n	8004332 <UART_SetConfig+0x22a>
 80042a8:	231f      	movs	r3, #31
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	2204      	movs	r2, #4
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e03f      	b.n	8004332 <UART_SetConfig+0x22a>
 80042b2:	231f      	movs	r3, #31
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	2208      	movs	r2, #8
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e03a      	b.n	8004332 <UART_SetConfig+0x22a>
 80042bc:	231f      	movs	r3, #31
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2210      	movs	r2, #16
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e035      	b.n	8004332 <UART_SetConfig+0x22a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a60      	ldr	r2, [pc, #384]	@ (800444c <UART_SetConfig+0x344>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d104      	bne.n	80042da <UART_SetConfig+0x1d2>
 80042d0:	231f      	movs	r3, #31
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	e02b      	b.n	8004332 <UART_SetConfig+0x22a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a5c      	ldr	r2, [pc, #368]	@ (8004450 <UART_SetConfig+0x348>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d104      	bne.n	80042ee <UART_SetConfig+0x1e6>
 80042e4:	231f      	movs	r3, #31
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	e021      	b.n	8004332 <UART_SetConfig+0x22a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a58      	ldr	r2, [pc, #352]	@ (8004454 <UART_SetConfig+0x34c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d104      	bne.n	8004302 <UART_SetConfig+0x1fa>
 80042f8:	231f      	movs	r3, #31
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	e017      	b.n	8004332 <UART_SetConfig+0x22a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a54      	ldr	r2, [pc, #336]	@ (8004458 <UART_SetConfig+0x350>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d104      	bne.n	8004316 <UART_SetConfig+0x20e>
 800430c:	231f      	movs	r3, #31
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e00d      	b.n	8004332 <UART_SetConfig+0x22a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a50      	ldr	r2, [pc, #320]	@ (800445c <UART_SetConfig+0x354>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d104      	bne.n	800432a <UART_SetConfig+0x222>
 8004320:	231f      	movs	r3, #31
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e003      	b.n	8004332 <UART_SetConfig+0x22a>
 800432a:	231f      	movs	r3, #31
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	2210      	movs	r2, #16
 8004330:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	429a      	cmp	r2, r3
 800433c:	d15c      	bne.n	80043f8 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 800433e:	231f      	movs	r3, #31
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d015      	beq.n	8004374 <UART_SetConfig+0x26c>
 8004348:	dc18      	bgt.n	800437c <UART_SetConfig+0x274>
 800434a:	2b04      	cmp	r3, #4
 800434c:	d00d      	beq.n	800436a <UART_SetConfig+0x262>
 800434e:	dc15      	bgt.n	800437c <UART_SetConfig+0x274>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <UART_SetConfig+0x252>
 8004354:	2b02      	cmp	r3, #2
 8004356:	d005      	beq.n	8004364 <UART_SetConfig+0x25c>
 8004358:	e010      	b.n	800437c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800435a:	f7fe fdcd 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 800435e:	0003      	movs	r3, r0
 8004360:	61bb      	str	r3, [r7, #24]
        break;
 8004362:	e012      	b.n	800438a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004364:	4b3e      	ldr	r3, [pc, #248]	@ (8004460 <UART_SetConfig+0x358>)
 8004366:	61bb      	str	r3, [r7, #24]
        break;
 8004368:	e00f      	b.n	800438a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436a:	f7fe fd49 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 800436e:	0003      	movs	r3, r0
 8004370:	61bb      	str	r3, [r7, #24]
        break;
 8004372:	e00a      	b.n	800438a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004374:	2380      	movs	r3, #128	@ 0x80
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	61bb      	str	r3, [r7, #24]
        break;
 800437a:	e006      	b.n	800438a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004380:	231e      	movs	r3, #30
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
        break;
 8004388:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d100      	bne.n	8004392 <UART_SetConfig+0x28a>
 8004390:	e095      	b.n	80044be <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	005a      	lsls	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	18d2      	adds	r2, r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	0019      	movs	r1, r3
 80043a4:	0010      	movs	r0, r2
 80043a6:	f7fb febf 	bl	8000128 <__udivsi3>
 80043aa:	0003      	movs	r3, r0
 80043ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b0f      	cmp	r3, #15
 80043b2:	d91c      	bls.n	80043ee <UART_SetConfig+0x2e6>
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	2380      	movs	r3, #128	@ 0x80
 80043b8:	025b      	lsls	r3, r3, #9
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d217      	bcs.n	80043ee <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	200e      	movs	r0, #14
 80043c4:	183b      	adds	r3, r7, r0
 80043c6:	210f      	movs	r1, #15
 80043c8:	438a      	bics	r2, r1
 80043ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2207      	movs	r2, #7
 80043d4:	4013      	ands	r3, r2
 80043d6:	b299      	uxth	r1, r3
 80043d8:	183b      	adds	r3, r7, r0
 80043da:	183a      	adds	r2, r7, r0
 80043dc:	8812      	ldrh	r2, [r2, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	183a      	adds	r2, r7, r0
 80043e8:	8812      	ldrh	r2, [r2, #0]
 80043ea:	60da      	str	r2, [r3, #12]
 80043ec:	e067      	b.n	80044be <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80043ee:	231e      	movs	r3, #30
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e062      	b.n	80044be <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043f8:	231f      	movs	r3, #31
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d030      	beq.n	8004464 <UART_SetConfig+0x35c>
 8004402:	dc33      	bgt.n	800446c <UART_SetConfig+0x364>
 8004404:	2b04      	cmp	r3, #4
 8004406:	d00d      	beq.n	8004424 <UART_SetConfig+0x31c>
 8004408:	dc30      	bgt.n	800446c <UART_SetConfig+0x364>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <UART_SetConfig+0x30c>
 800440e:	2b02      	cmp	r3, #2
 8004410:	d005      	beq.n	800441e <UART_SetConfig+0x316>
 8004412:	e02b      	b.n	800446c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004414:	f7fe fd70 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 8004418:	0003      	movs	r3, r0
 800441a:	61bb      	str	r3, [r7, #24]
        break;
 800441c:	e02d      	b.n	800447a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800441e:	4b10      	ldr	r3, [pc, #64]	@ (8004460 <UART_SetConfig+0x358>)
 8004420:	61bb      	str	r3, [r7, #24]
        break;
 8004422:	e02a      	b.n	800447a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004424:	f7fe fcec 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8004428:	0003      	movs	r3, r0
 800442a:	61bb      	str	r3, [r7, #24]
        break;
 800442c:	e025      	b.n	800447a <UART_SetConfig+0x372>
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	efff69f3 	.word	0xefff69f3
 8004434:	ffffcfff 	.word	0xffffcfff
 8004438:	fffff4ff 	.word	0xfffff4ff
 800443c:	40013800 	.word	0x40013800
 8004440:	40021000 	.word	0x40021000
 8004444:	40004400 	.word	0x40004400
 8004448:	40004800 	.word	0x40004800
 800444c:	40004c00 	.word	0x40004c00
 8004450:	40005000 	.word	0x40005000
 8004454:	40011400 	.word	0x40011400
 8004458:	40011800 	.word	0x40011800
 800445c:	40011c00 	.word	0x40011c00
 8004460:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	61bb      	str	r3, [r7, #24]
        break;
 800446a:	e006      	b.n	800447a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004470:	231e      	movs	r3, #30
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
        break;
 8004478:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01e      	beq.n	80044be <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	085a      	lsrs	r2, r3, #1
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	18d2      	adds	r2, r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	0019      	movs	r1, r3
 8004490:	0010      	movs	r0, r2
 8004492:	f7fb fe49 	bl	8000128 <__udivsi3>
 8004496:	0003      	movs	r3, r0
 8004498:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b0f      	cmp	r3, #15
 800449e:	d90a      	bls.n	80044b6 <UART_SetConfig+0x3ae>
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	2380      	movs	r3, #128	@ 0x80
 80044a4:	025b      	lsls	r3, r3, #9
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d205      	bcs.n	80044b6 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	e003      	b.n	80044be <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80044b6:	231e      	movs	r3, #30
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044ca:	231e      	movs	r3, #30
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	781b      	ldrb	r3, [r3, #0]
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b008      	add	sp, #32
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	2208      	movs	r2, #8
 80044e6:	4013      	ands	r3, r2
 80044e8:	d00b      	beq.n	8004502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a4a      	ldr	r2, [pc, #296]	@ (800461c <UART_AdvFeatureConfig+0x144>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	0019      	movs	r1, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	2201      	movs	r2, #1
 8004508:	4013      	ands	r3, r2
 800450a:	d00b      	beq.n	8004524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4a43      	ldr	r2, [pc, #268]	@ (8004620 <UART_AdvFeatureConfig+0x148>)
 8004514:	4013      	ands	r3, r2
 8004516:	0019      	movs	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	2202      	movs	r2, #2
 800452a:	4013      	ands	r3, r2
 800452c:	d00b      	beq.n	8004546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4a3b      	ldr	r2, [pc, #236]	@ (8004624 <UART_AdvFeatureConfig+0x14c>)
 8004536:	4013      	ands	r3, r2
 8004538:	0019      	movs	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	2204      	movs	r2, #4
 800454c:	4013      	ands	r3, r2
 800454e:	d00b      	beq.n	8004568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4a34      	ldr	r2, [pc, #208]	@ (8004628 <UART_AdvFeatureConfig+0x150>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	2210      	movs	r2, #16
 800456e:	4013      	ands	r3, r2
 8004570:	d00b      	beq.n	800458a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a2c      	ldr	r2, [pc, #176]	@ (800462c <UART_AdvFeatureConfig+0x154>)
 800457a:	4013      	ands	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	2220      	movs	r2, #32
 8004590:	4013      	ands	r3, r2
 8004592:	d00b      	beq.n	80045ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4a25      	ldr	r2, [pc, #148]	@ (8004630 <UART_AdvFeatureConfig+0x158>)
 800459c:	4013      	ands	r3, r2
 800459e:	0019      	movs	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	2240      	movs	r2, #64	@ 0x40
 80045b2:	4013      	ands	r3, r2
 80045b4:	d01d      	beq.n	80045f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004634 <UART_AdvFeatureConfig+0x15c>)
 80045be:	4013      	ands	r3, r2
 80045c0:	0019      	movs	r1, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	035b      	lsls	r3, r3, #13
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d10b      	bne.n	80045f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <UART_AdvFeatureConfig+0x160>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	2280      	movs	r2, #128	@ 0x80
 80045f8:	4013      	ands	r3, r2
 80045fa:	d00b      	beq.n	8004614 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4a0e      	ldr	r2, [pc, #56]	@ (800463c <UART_AdvFeatureConfig+0x164>)
 8004604:	4013      	ands	r3, r2
 8004606:	0019      	movs	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }
}
 8004614:	46c0      	nop			@ (mov r8, r8)
 8004616:	46bd      	mov	sp, r7
 8004618:	b002      	add	sp, #8
 800461a:	bd80      	pop	{r7, pc}
 800461c:	ffff7fff 	.word	0xffff7fff
 8004620:	fffdffff 	.word	0xfffdffff
 8004624:	fffeffff 	.word	0xfffeffff
 8004628:	fffbffff 	.word	0xfffbffff
 800462c:	ffffefff 	.word	0xffffefff
 8004630:	ffffdfff 	.word	0xffffdfff
 8004634:	ffefffff 	.word	0xffefffff
 8004638:	ff9fffff 	.word	0xff9fffff
 800463c:	fff7ffff 	.word	0xfff7ffff

08004640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b092      	sub	sp, #72	@ 0x48
 8004644:	af02      	add	r7, sp, #8
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2284      	movs	r2, #132	@ 0x84
 800464c:	2100      	movs	r1, #0
 800464e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004650:	f7fc fe86 	bl	8001360 <HAL_GetTick>
 8004654:	0003      	movs	r3, r0
 8004656:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2208      	movs	r2, #8
 8004660:	4013      	ands	r3, r2
 8004662:	2b08      	cmp	r3, #8
 8004664:	d12c      	bne.n	80046c0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004668:	2280      	movs	r2, #128	@ 0x80
 800466a:	0391      	lsls	r1, r2, #14
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4a46      	ldr	r2, [pc, #280]	@ (8004788 <UART_CheckIdleState+0x148>)
 8004670:	9200      	str	r2, [sp, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	f000 f88c 	bl	8004790 <UART_WaitOnFlagUntilTimeout>
 8004678:	1e03      	subs	r3, r0, #0
 800467a:	d021      	beq.n	80046c0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800467c:	f3ef 8310 	mrs	r3, PRIMASK
 8004680:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004684:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004686:	2301      	movs	r3, #1
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	f383 8810 	msr	PRIMASK, r3
}
 8004690:	46c0      	nop			@ (mov r8, r8)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2180      	movs	r1, #128	@ 0x80
 800469e:	438a      	bics	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a8:	f383 8810 	msr	PRIMASK, r3
}
 80046ac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2278      	movs	r2, #120	@ 0x78
 80046b8:	2100      	movs	r1, #0
 80046ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e05f      	b.n	8004780 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2204      	movs	r2, #4
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d146      	bne.n	800475c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d0:	2280      	movs	r2, #128	@ 0x80
 80046d2:	03d1      	lsls	r1, r2, #15
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004788 <UART_CheckIdleState+0x148>)
 80046d8:	9200      	str	r2, [sp, #0]
 80046da:	2200      	movs	r2, #0
 80046dc:	f000 f858 	bl	8004790 <UART_WaitOnFlagUntilTimeout>
 80046e0:	1e03      	subs	r3, r0, #0
 80046e2:	d03b      	beq.n	800475c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e4:	f3ef 8310 	mrs	r3, PRIMASK
 80046e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80046ea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ee:	2301      	movs	r3, #1
 80046f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f383 8810 	msr	PRIMASK, r3
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4921      	ldr	r1, [pc, #132]	@ (800478c <UART_CheckIdleState+0x14c>)
 8004706:	400a      	ands	r2, r1
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f383 8810 	msr	PRIMASK, r3
}
 8004714:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004716:	f3ef 8310 	mrs	r3, PRIMASK
 800471a:	61bb      	str	r3, [r7, #24]
  return(result);
 800471c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004720:	2301      	movs	r3, #1
 8004722:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f383 8810 	msr	PRIMASK, r3
}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2101      	movs	r1, #1
 8004738:	438a      	bics	r2, r1
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f383 8810 	msr	PRIMASK, r3
}
 8004746:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2280      	movs	r2, #128	@ 0x80
 800474c:	2120      	movs	r1, #32
 800474e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2278      	movs	r2, #120	@ 0x78
 8004754:	2100      	movs	r1, #0
 8004756:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e011      	b.n	8004780 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2280      	movs	r2, #128	@ 0x80
 8004766:	2120      	movs	r1, #32
 8004768:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2278      	movs	r2, #120	@ 0x78
 800477a:	2100      	movs	r1, #0
 800477c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b010      	add	sp, #64	@ 0x40
 8004786:	bd80      	pop	{r7, pc}
 8004788:	01ffffff 	.word	0x01ffffff
 800478c:	fffffedf 	.word	0xfffffedf

08004790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	1dfb      	adds	r3, r7, #7
 800479e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a0:	e051      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	3301      	adds	r3, #1
 80047a6:	d04e      	beq.n	8004846 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a8:	f7fc fdda 	bl	8001360 <HAL_GetTick>
 80047ac:	0002      	movs	r2, r0
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d302      	bcc.n	80047be <UART_WaitOnFlagUntilTimeout+0x2e>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e051      	b.n	8004866 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2204      	movs	r2, #4
 80047ca:	4013      	ands	r3, r2
 80047cc:	d03b      	beq.n	8004846 <UART_WaitOnFlagUntilTimeout+0xb6>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b80      	cmp	r3, #128	@ 0x80
 80047d2:	d038      	beq.n	8004846 <UART_WaitOnFlagUntilTimeout+0xb6>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b40      	cmp	r3, #64	@ 0x40
 80047d8:	d035      	beq.n	8004846 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	2208      	movs	r2, #8
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d111      	bne.n	800480c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2208      	movs	r2, #8
 80047ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f000 f83c 	bl	8004870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2284      	movs	r2, #132	@ 0x84
 80047fc:	2108      	movs	r1, #8
 80047fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2278      	movs	r2, #120	@ 0x78
 8004804:	2100      	movs	r1, #0
 8004806:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e02c      	b.n	8004866 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	2380      	movs	r3, #128	@ 0x80
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	401a      	ands	r2, r3
 8004818:	2380      	movs	r3, #128	@ 0x80
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	429a      	cmp	r2, r3
 800481e:	d112      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2280      	movs	r2, #128	@ 0x80
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	0018      	movs	r0, r3
 800482e:	f000 f81f 	bl	8004870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2284      	movs	r2, #132	@ 0x84
 8004836:	2120      	movs	r1, #32
 8004838:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2278      	movs	r2, #120	@ 0x78
 800483e:	2100      	movs	r1, #0
 8004840:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e00f      	b.n	8004866 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	425a      	negs	r2, r3
 8004856:	4153      	adcs	r3, r2
 8004858:	b2db      	uxtb	r3, r3
 800485a:	001a      	movs	r2, r3
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d09e      	beq.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	0018      	movs	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	b004      	add	sp, #16
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08e      	sub	sp, #56	@ 0x38
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004878:	f3ef 8310 	mrs	r3, PRIMASK
 800487c:	617b      	str	r3, [r7, #20]
  return(result);
 800487e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004880:	637b      	str	r3, [r7, #52]	@ 0x34
 8004882:	2301      	movs	r3, #1
 8004884:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f383 8810 	msr	PRIMASK, r3
}
 800488c:	46c0      	nop			@ (mov r8, r8)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4926      	ldr	r1, [pc, #152]	@ (8004934 <UART_EndRxTransfer+0xc4>)
 800489a:	400a      	ands	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f383 8810 	msr	PRIMASK, r3
}
 80048a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048aa:	f3ef 8310 	mrs	r3, PRIMASK
 80048ae:	623b      	str	r3, [r7, #32]
  return(result);
 80048b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048b4:	2301      	movs	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	f383 8810 	msr	PRIMASK, r3
}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2101      	movs	r1, #1
 80048cc:	438a      	bics	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d6:	f383 8810 	msr	PRIMASK, r3
}
 80048da:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d118      	bne.n	8004916 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e4:	f3ef 8310 	mrs	r3, PRIMASK
 80048e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ee:	2301      	movs	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f383 8810 	msr	PRIMASK, r3
}
 80048f8:	46c0      	nop			@ (mov r8, r8)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2110      	movs	r1, #16
 8004906:	438a      	bics	r2, r1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f383 8810 	msr	PRIMASK, r3
}
 8004914:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2280      	movs	r2, #128	@ 0x80
 800491a:	2120      	movs	r1, #32
 800491c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	b00e      	add	sp, #56	@ 0x38
 8004930:	bd80      	pop	{r7, pc}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	fffffedf 	.word	0xfffffedf

08004938 <siprintf>:
 8004938:	b40e      	push	{r1, r2, r3}
 800493a:	b510      	push	{r4, lr}
 800493c:	2400      	movs	r4, #0
 800493e:	490c      	ldr	r1, [pc, #48]	@ (8004970 <siprintf+0x38>)
 8004940:	b09d      	sub	sp, #116	@ 0x74
 8004942:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004944:	9002      	str	r0, [sp, #8]
 8004946:	9006      	str	r0, [sp, #24]
 8004948:	9107      	str	r1, [sp, #28]
 800494a:	9104      	str	r1, [sp, #16]
 800494c:	4809      	ldr	r0, [pc, #36]	@ (8004974 <siprintf+0x3c>)
 800494e:	490a      	ldr	r1, [pc, #40]	@ (8004978 <siprintf+0x40>)
 8004950:	cb04      	ldmia	r3!, {r2}
 8004952:	9105      	str	r1, [sp, #20]
 8004954:	6800      	ldr	r0, [r0, #0]
 8004956:	a902      	add	r1, sp, #8
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800495c:	f000 f99e 	bl	8004c9c <_svfiprintf_r>
 8004960:	9b02      	ldr	r3, [sp, #8]
 8004962:	701c      	strb	r4, [r3, #0]
 8004964:	b01d      	add	sp, #116	@ 0x74
 8004966:	bc10      	pop	{r4}
 8004968:	bc08      	pop	{r3}
 800496a:	b003      	add	sp, #12
 800496c:	4718      	bx	r3
 800496e:	46c0      	nop			@ (mov r8, r8)
 8004970:	7fffffff 	.word	0x7fffffff
 8004974:	2000000c 	.word	0x2000000c
 8004978:	ffff0208 	.word	0xffff0208

0800497c <memset>:
 800497c:	0003      	movs	r3, r0
 800497e:	1882      	adds	r2, r0, r2
 8004980:	4293      	cmp	r3, r2
 8004982:	d100      	bne.n	8004986 <memset+0xa>
 8004984:	4770      	bx	lr
 8004986:	7019      	strb	r1, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	e7f9      	b.n	8004980 <memset+0x4>

0800498c <__errno>:
 800498c:	4b01      	ldr	r3, [pc, #4]	@ (8004994 <__errno+0x8>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	4770      	bx	lr
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	2000000c 	.word	0x2000000c

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	2600      	movs	r6, #0
 800499c:	4c0c      	ldr	r4, [pc, #48]	@ (80049d0 <__libc_init_array+0x38>)
 800499e:	4d0d      	ldr	r5, [pc, #52]	@ (80049d4 <__libc_init_array+0x3c>)
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	42a6      	cmp	r6, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	2600      	movs	r6, #0
 80049aa:	f000 fc61 	bl	8005270 <_init>
 80049ae:	4c0a      	ldr	r4, [pc, #40]	@ (80049d8 <__libc_init_array+0x40>)
 80049b0:	4d0a      	ldr	r5, [pc, #40]	@ (80049dc <__libc_init_array+0x44>)
 80049b2:	1b64      	subs	r4, r4, r5
 80049b4:	10a4      	asrs	r4, r4, #2
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	00b3      	lsls	r3, r6, #2
 80049be:	58eb      	ldr	r3, [r5, r3]
 80049c0:	4798      	blx	r3
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	00b3      	lsls	r3, r6, #2
 80049c8:	58eb      	ldr	r3, [r5, r3]
 80049ca:	4798      	blx	r3
 80049cc:	3601      	adds	r6, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	08005334 	.word	0x08005334
 80049d4:	08005334 	.word	0x08005334
 80049d8:	08005338 	.word	0x08005338
 80049dc:	08005334 	.word	0x08005334

080049e0 <__retarget_lock_acquire_recursive>:
 80049e0:	4770      	bx	lr

080049e2 <__retarget_lock_release_recursive>:
 80049e2:	4770      	bx	lr

080049e4 <_free_r>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	0005      	movs	r5, r0
 80049e8:	1e0c      	subs	r4, r1, #0
 80049ea:	d010      	beq.n	8004a0e <_free_r+0x2a>
 80049ec:	3c04      	subs	r4, #4
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	da00      	bge.n	80049f6 <_free_r+0x12>
 80049f4:	18e4      	adds	r4, r4, r3
 80049f6:	0028      	movs	r0, r5
 80049f8:	f000 f8e0 	bl	8004bbc <__malloc_lock>
 80049fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <_free_r+0x90>)
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <_free_r+0x2c>
 8004a04:	6063      	str	r3, [r4, #4]
 8004a06:	6014      	str	r4, [r2, #0]
 8004a08:	0028      	movs	r0, r5
 8004a0a:	f000 f8df 	bl	8004bcc <__malloc_unlock>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	d908      	bls.n	8004a26 <_free_r+0x42>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	1821      	adds	r1, r4, r0
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	d1f3      	bne.n	8004a04 <_free_r+0x20>
 8004a1c:	6819      	ldr	r1, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	1809      	adds	r1, r1, r0
 8004a22:	6021      	str	r1, [r4, #0]
 8004a24:	e7ee      	b.n	8004a04 <_free_r+0x20>
 8004a26:	001a      	movs	r2, r3
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <_free_r+0x4e>
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	d9f9      	bls.n	8004a26 <_free_r+0x42>
 8004a32:	6811      	ldr	r1, [r2, #0]
 8004a34:	1850      	adds	r0, r2, r1
 8004a36:	42a0      	cmp	r0, r4
 8004a38:	d10b      	bne.n	8004a52 <_free_r+0x6e>
 8004a3a:	6820      	ldr	r0, [r4, #0]
 8004a3c:	1809      	adds	r1, r1, r0
 8004a3e:	1850      	adds	r0, r2, r1
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	4283      	cmp	r3, r0
 8004a44:	d1e0      	bne.n	8004a08 <_free_r+0x24>
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	1841      	adds	r1, r0, r1
 8004a4c:	6011      	str	r1, [r2, #0]
 8004a4e:	6053      	str	r3, [r2, #4]
 8004a50:	e7da      	b.n	8004a08 <_free_r+0x24>
 8004a52:	42a0      	cmp	r0, r4
 8004a54:	d902      	bls.n	8004a5c <_free_r+0x78>
 8004a56:	230c      	movs	r3, #12
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	e7d5      	b.n	8004a08 <_free_r+0x24>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	1821      	adds	r1, r4, r0
 8004a60:	428b      	cmp	r3, r1
 8004a62:	d103      	bne.n	8004a6c <_free_r+0x88>
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	1809      	adds	r1, r1, r0
 8004a6a:	6021      	str	r1, [r4, #0]
 8004a6c:	6063      	str	r3, [r4, #4]
 8004a6e:	6054      	str	r4, [r2, #4]
 8004a70:	e7ca      	b.n	8004a08 <_free_r+0x24>
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	2000040c 	.word	0x2000040c

08004a78 <sbrk_aligned>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ab8 <sbrk_aligned+0x40>)
 8004a7c:	000d      	movs	r5, r1
 8004a7e:	6831      	ldr	r1, [r6, #0]
 8004a80:	0004      	movs	r4, r0
 8004a82:	2900      	cmp	r1, #0
 8004a84:	d102      	bne.n	8004a8c <sbrk_aligned+0x14>
 8004a86:	f000 fb95 	bl	80051b4 <_sbrk_r>
 8004a8a:	6030      	str	r0, [r6, #0]
 8004a8c:	0029      	movs	r1, r5
 8004a8e:	0020      	movs	r0, r4
 8004a90:	f000 fb90 	bl	80051b4 <_sbrk_r>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d103      	bne.n	8004aa0 <sbrk_aligned+0x28>
 8004a98:	2501      	movs	r5, #1
 8004a9a:	426d      	negs	r5, r5
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	1cc5      	adds	r5, r0, #3
 8004aa4:	439d      	bics	r5, r3
 8004aa6:	42a8      	cmp	r0, r5
 8004aa8:	d0f8      	beq.n	8004a9c <sbrk_aligned+0x24>
 8004aaa:	1a29      	subs	r1, r5, r0
 8004aac:	0020      	movs	r0, r4
 8004aae:	f000 fb81 	bl	80051b4 <_sbrk_r>
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d1f2      	bne.n	8004a9c <sbrk_aligned+0x24>
 8004ab6:	e7ef      	b.n	8004a98 <sbrk_aligned+0x20>
 8004ab8:	20000408 	.word	0x20000408

08004abc <_malloc_r>:
 8004abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004abe:	2203      	movs	r2, #3
 8004ac0:	1ccb      	adds	r3, r1, #3
 8004ac2:	4393      	bics	r3, r2
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	0005      	movs	r5, r0
 8004ac8:	001f      	movs	r7, r3
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d234      	bcs.n	8004b38 <_malloc_r+0x7c>
 8004ace:	270c      	movs	r7, #12
 8004ad0:	42b9      	cmp	r1, r7
 8004ad2:	d833      	bhi.n	8004b3c <_malloc_r+0x80>
 8004ad4:	0028      	movs	r0, r5
 8004ad6:	f000 f871 	bl	8004bbc <__malloc_lock>
 8004ada:	4e37      	ldr	r6, [pc, #220]	@ (8004bb8 <_malloc_r+0xfc>)
 8004adc:	6833      	ldr	r3, [r6, #0]
 8004ade:	001c      	movs	r4, r3
 8004ae0:	2c00      	cmp	r4, #0
 8004ae2:	d12f      	bne.n	8004b44 <_malloc_r+0x88>
 8004ae4:	0039      	movs	r1, r7
 8004ae6:	0028      	movs	r0, r5
 8004ae8:	f7ff ffc6 	bl	8004a78 <sbrk_aligned>
 8004aec:	0004      	movs	r4, r0
 8004aee:	1c43      	adds	r3, r0, #1
 8004af0:	d15f      	bne.n	8004bb2 <_malloc_r+0xf6>
 8004af2:	6834      	ldr	r4, [r6, #0]
 8004af4:	9400      	str	r4, [sp, #0]
 8004af6:	9b00      	ldr	r3, [sp, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d14a      	bne.n	8004b92 <_malloc_r+0xd6>
 8004afc:	2c00      	cmp	r4, #0
 8004afe:	d052      	beq.n	8004ba6 <_malloc_r+0xea>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	0028      	movs	r0, r5
 8004b04:	18e3      	adds	r3, r4, r3
 8004b06:	9900      	ldr	r1, [sp, #0]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	f000 fb53 	bl	80051b4 <_sbrk_r>
 8004b0e:	9b01      	ldr	r3, [sp, #4]
 8004b10:	4283      	cmp	r3, r0
 8004b12:	d148      	bne.n	8004ba6 <_malloc_r+0xea>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	0028      	movs	r0, r5
 8004b18:	1aff      	subs	r7, r7, r3
 8004b1a:	0039      	movs	r1, r7
 8004b1c:	f7ff ffac 	bl	8004a78 <sbrk_aligned>
 8004b20:	3001      	adds	r0, #1
 8004b22:	d040      	beq.n	8004ba6 <_malloc_r+0xea>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	19db      	adds	r3, r3, r7
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	6833      	ldr	r3, [r6, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	2a00      	cmp	r2, #0
 8004b30:	d133      	bne.n	8004b9a <_malloc_r+0xde>
 8004b32:	9b00      	ldr	r3, [sp, #0]
 8004b34:	6033      	str	r3, [r6, #0]
 8004b36:	e019      	b.n	8004b6c <_malloc_r+0xb0>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	dac9      	bge.n	8004ad0 <_malloc_r+0x14>
 8004b3c:	230c      	movs	r3, #12
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	2000      	movs	r0, #0
 8004b42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b44:	6821      	ldr	r1, [r4, #0]
 8004b46:	1bc9      	subs	r1, r1, r7
 8004b48:	d420      	bmi.n	8004b8c <_malloc_r+0xd0>
 8004b4a:	290b      	cmp	r1, #11
 8004b4c:	d90a      	bls.n	8004b64 <_malloc_r+0xa8>
 8004b4e:	19e2      	adds	r2, r4, r7
 8004b50:	6027      	str	r7, [r4, #0]
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	d104      	bne.n	8004b60 <_malloc_r+0xa4>
 8004b56:	6032      	str	r2, [r6, #0]
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	6011      	str	r1, [r2, #0]
 8004b5c:	6053      	str	r3, [r2, #4]
 8004b5e:	e005      	b.n	8004b6c <_malloc_r+0xb0>
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	e7f9      	b.n	8004b58 <_malloc_r+0x9c>
 8004b64:	6862      	ldr	r2, [r4, #4]
 8004b66:	42a3      	cmp	r3, r4
 8004b68:	d10e      	bne.n	8004b88 <_malloc_r+0xcc>
 8004b6a:	6032      	str	r2, [r6, #0]
 8004b6c:	0028      	movs	r0, r5
 8004b6e:	f000 f82d 	bl	8004bcc <__malloc_unlock>
 8004b72:	0020      	movs	r0, r4
 8004b74:	2207      	movs	r2, #7
 8004b76:	300b      	adds	r0, #11
 8004b78:	1d23      	adds	r3, r4, #4
 8004b7a:	4390      	bics	r0, r2
 8004b7c:	1ac2      	subs	r2, r0, r3
 8004b7e:	4298      	cmp	r0, r3
 8004b80:	d0df      	beq.n	8004b42 <_malloc_r+0x86>
 8004b82:	1a1b      	subs	r3, r3, r0
 8004b84:	50a3      	str	r3, [r4, r2]
 8004b86:	e7dc      	b.n	8004b42 <_malloc_r+0x86>
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	e7ef      	b.n	8004b6c <_malloc_r+0xb0>
 8004b8c:	0023      	movs	r3, r4
 8004b8e:	6864      	ldr	r4, [r4, #4]
 8004b90:	e7a6      	b.n	8004ae0 <_malloc_r+0x24>
 8004b92:	9c00      	ldr	r4, [sp, #0]
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	e7ad      	b.n	8004af6 <_malloc_r+0x3a>
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	d1fb      	bne.n	8004b9a <_malloc_r+0xde>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e7da      	b.n	8004b5c <_malloc_r+0xa0>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	0028      	movs	r0, r5
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	f000 f80e 	bl	8004bcc <__malloc_unlock>
 8004bb0:	e7c6      	b.n	8004b40 <_malloc_r+0x84>
 8004bb2:	6007      	str	r7, [r0, #0]
 8004bb4:	e7da      	b.n	8004b6c <_malloc_r+0xb0>
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	2000040c 	.word	0x2000040c

08004bbc <__malloc_lock>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	4802      	ldr	r0, [pc, #8]	@ (8004bc8 <__malloc_lock+0xc>)
 8004bc0:	f7ff ff0e 	bl	80049e0 <__retarget_lock_acquire_recursive>
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	20000404 	.word	0x20000404

08004bcc <__malloc_unlock>:
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4802      	ldr	r0, [pc, #8]	@ (8004bd8 <__malloc_unlock+0xc>)
 8004bd0:	f7ff ff07 	bl	80049e2 <__retarget_lock_release_recursive>
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	20000404 	.word	0x20000404

08004bdc <__ssputs_r>:
 8004bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bde:	688e      	ldr	r6, [r1, #8]
 8004be0:	b085      	sub	sp, #20
 8004be2:	001f      	movs	r7, r3
 8004be4:	000c      	movs	r4, r1
 8004be6:	680b      	ldr	r3, [r1, #0]
 8004be8:	9002      	str	r0, [sp, #8]
 8004bea:	9203      	str	r2, [sp, #12]
 8004bec:	42be      	cmp	r6, r7
 8004bee:	d830      	bhi.n	8004c52 <__ssputs_r+0x76>
 8004bf0:	210c      	movs	r1, #12
 8004bf2:	5e62      	ldrsh	r2, [r4, r1]
 8004bf4:	2190      	movs	r1, #144	@ 0x90
 8004bf6:	00c9      	lsls	r1, r1, #3
 8004bf8:	420a      	tst	r2, r1
 8004bfa:	d028      	beq.n	8004c4e <__ssputs_r+0x72>
 8004bfc:	2003      	movs	r0, #3
 8004bfe:	6921      	ldr	r1, [r4, #16]
 8004c00:	1a5b      	subs	r3, r3, r1
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	6963      	ldr	r3, [r4, #20]
 8004c06:	4343      	muls	r3, r0
 8004c08:	9801      	ldr	r0, [sp, #4]
 8004c0a:	0fdd      	lsrs	r5, r3, #31
 8004c0c:	18ed      	adds	r5, r5, r3
 8004c0e:	1c7b      	adds	r3, r7, #1
 8004c10:	181b      	adds	r3, r3, r0
 8004c12:	106d      	asrs	r5, r5, #1
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	d900      	bls.n	8004c1a <__ssputs_r+0x3e>
 8004c18:	001d      	movs	r5, r3
 8004c1a:	0552      	lsls	r2, r2, #21
 8004c1c:	d528      	bpl.n	8004c70 <__ssputs_r+0x94>
 8004c1e:	0029      	movs	r1, r5
 8004c20:	9802      	ldr	r0, [sp, #8]
 8004c22:	f7ff ff4b 	bl	8004abc <_malloc_r>
 8004c26:	1e06      	subs	r6, r0, #0
 8004c28:	d02c      	beq.n	8004c84 <__ssputs_r+0xa8>
 8004c2a:	9a01      	ldr	r2, [sp, #4]
 8004c2c:	6921      	ldr	r1, [r4, #16]
 8004c2e:	f000 fade 	bl	80051ee <memcpy>
 8004c32:	89a2      	ldrh	r2, [r4, #12]
 8004c34:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <__ssputs_r+0xbc>)
 8004c36:	401a      	ands	r2, r3
 8004c38:	2380      	movs	r3, #128	@ 0x80
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	81a3      	strh	r3, [r4, #12]
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	6126      	str	r6, [r4, #16]
 8004c42:	18f6      	adds	r6, r6, r3
 8004c44:	6026      	str	r6, [r4, #0]
 8004c46:	003e      	movs	r6, r7
 8004c48:	6165      	str	r5, [r4, #20]
 8004c4a:	1aed      	subs	r5, r5, r3
 8004c4c:	60a5      	str	r5, [r4, #8]
 8004c4e:	42be      	cmp	r6, r7
 8004c50:	d900      	bls.n	8004c54 <__ssputs_r+0x78>
 8004c52:	003e      	movs	r6, r7
 8004c54:	0032      	movs	r2, r6
 8004c56:	9903      	ldr	r1, [sp, #12]
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	f000 fa99 	bl	8005190 <memmove>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	68a3      	ldr	r3, [r4, #8]
 8004c62:	1b9b      	subs	r3, r3, r6
 8004c64:	60a3      	str	r3, [r4, #8]
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	199b      	adds	r3, r3, r6
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	b005      	add	sp, #20
 8004c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c70:	002a      	movs	r2, r5
 8004c72:	9802      	ldr	r0, [sp, #8]
 8004c74:	f000 fac4 	bl	8005200 <_realloc_r>
 8004c78:	1e06      	subs	r6, r0, #0
 8004c7a:	d1e0      	bne.n	8004c3e <__ssputs_r+0x62>
 8004c7c:	6921      	ldr	r1, [r4, #16]
 8004c7e:	9802      	ldr	r0, [sp, #8]
 8004c80:	f7ff feb0 	bl	80049e4 <_free_r>
 8004c84:	230c      	movs	r3, #12
 8004c86:	2001      	movs	r0, #1
 8004c88:	9a02      	ldr	r2, [sp, #8]
 8004c8a:	4240      	negs	r0, r0
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	89a2      	ldrh	r2, [r4, #12]
 8004c90:	3334      	adds	r3, #52	@ 0x34
 8004c92:	4313      	orrs	r3, r2
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	e7e9      	b.n	8004c6c <__ssputs_r+0x90>
 8004c98:	fffffb7f 	.word	0xfffffb7f

08004c9c <_svfiprintf_r>:
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b0a1      	sub	sp, #132	@ 0x84
 8004ca0:	9003      	str	r0, [sp, #12]
 8004ca2:	001d      	movs	r5, r3
 8004ca4:	898b      	ldrh	r3, [r1, #12]
 8004ca6:	000f      	movs	r7, r1
 8004ca8:	0016      	movs	r6, r2
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	d511      	bpl.n	8004cd2 <_svfiprintf_r+0x36>
 8004cae:	690b      	ldr	r3, [r1, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10e      	bne.n	8004cd2 <_svfiprintf_r+0x36>
 8004cb4:	2140      	movs	r1, #64	@ 0x40
 8004cb6:	f7ff ff01 	bl	8004abc <_malloc_r>
 8004cba:	6038      	str	r0, [r7, #0]
 8004cbc:	6138      	str	r0, [r7, #16]
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d105      	bne.n	8004cce <_svfiprintf_r+0x32>
 8004cc2:	230c      	movs	r3, #12
 8004cc4:	9a03      	ldr	r2, [sp, #12]
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	2001      	movs	r0, #1
 8004cca:	4240      	negs	r0, r0
 8004ccc:	e0cf      	b.n	8004e6e <_svfiprintf_r+0x1d2>
 8004cce:	2340      	movs	r3, #64	@ 0x40
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	ac08      	add	r4, sp, #32
 8004cd6:	6163      	str	r3, [r4, #20]
 8004cd8:	3320      	adds	r3, #32
 8004cda:	7663      	strb	r3, [r4, #25]
 8004cdc:	3310      	adds	r3, #16
 8004cde:	76a3      	strb	r3, [r4, #26]
 8004ce0:	9507      	str	r5, [sp, #28]
 8004ce2:	0035      	movs	r5, r6
 8004ce4:	782b      	ldrb	r3, [r5, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <_svfiprintf_r+0x52>
 8004cea:	2b25      	cmp	r3, #37	@ 0x25
 8004cec:	d148      	bne.n	8004d80 <_svfiprintf_r+0xe4>
 8004cee:	1bab      	subs	r3, r5, r6
 8004cf0:	9305      	str	r3, [sp, #20]
 8004cf2:	42b5      	cmp	r5, r6
 8004cf4:	d00b      	beq.n	8004d0e <_svfiprintf_r+0x72>
 8004cf6:	0032      	movs	r2, r6
 8004cf8:	0039      	movs	r1, r7
 8004cfa:	9803      	ldr	r0, [sp, #12]
 8004cfc:	f7ff ff6e 	bl	8004bdc <__ssputs_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d100      	bne.n	8004d06 <_svfiprintf_r+0x6a>
 8004d04:	e0ae      	b.n	8004e64 <_svfiprintf_r+0x1c8>
 8004d06:	6963      	ldr	r3, [r4, #20]
 8004d08:	9a05      	ldr	r2, [sp, #20]
 8004d0a:	189b      	adds	r3, r3, r2
 8004d0c:	6163      	str	r3, [r4, #20]
 8004d0e:	782b      	ldrb	r3, [r5, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d100      	bne.n	8004d16 <_svfiprintf_r+0x7a>
 8004d14:	e0a6      	b.n	8004e64 <_svfiprintf_r+0x1c8>
 8004d16:	2201      	movs	r2, #1
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4252      	negs	r2, r2
 8004d1c:	6062      	str	r2, [r4, #4]
 8004d1e:	a904      	add	r1, sp, #16
 8004d20:	3254      	adds	r2, #84	@ 0x54
 8004d22:	1852      	adds	r2, r2, r1
 8004d24:	1c6e      	adds	r6, r5, #1
 8004d26:	6023      	str	r3, [r4, #0]
 8004d28:	60e3      	str	r3, [r4, #12]
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	7013      	strb	r3, [r2, #0]
 8004d2e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004d30:	4b54      	ldr	r3, [pc, #336]	@ (8004e84 <_svfiprintf_r+0x1e8>)
 8004d32:	2205      	movs	r2, #5
 8004d34:	0018      	movs	r0, r3
 8004d36:	7831      	ldrb	r1, [r6, #0]
 8004d38:	9305      	str	r3, [sp, #20]
 8004d3a:	f000 fa4d 	bl	80051d8 <memchr>
 8004d3e:	1c75      	adds	r5, r6, #1
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d11f      	bne.n	8004d84 <_svfiprintf_r+0xe8>
 8004d44:	6822      	ldr	r2, [r4, #0]
 8004d46:	06d3      	lsls	r3, r2, #27
 8004d48:	d504      	bpl.n	8004d54 <_svfiprintf_r+0xb8>
 8004d4a:	2353      	movs	r3, #83	@ 0x53
 8004d4c:	a904      	add	r1, sp, #16
 8004d4e:	185b      	adds	r3, r3, r1
 8004d50:	2120      	movs	r1, #32
 8004d52:	7019      	strb	r1, [r3, #0]
 8004d54:	0713      	lsls	r3, r2, #28
 8004d56:	d504      	bpl.n	8004d62 <_svfiprintf_r+0xc6>
 8004d58:	2353      	movs	r3, #83	@ 0x53
 8004d5a:	a904      	add	r1, sp, #16
 8004d5c:	185b      	adds	r3, r3, r1
 8004d5e:	212b      	movs	r1, #43	@ 0x2b
 8004d60:	7019      	strb	r1, [r3, #0]
 8004d62:	7833      	ldrb	r3, [r6, #0]
 8004d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d66:	d016      	beq.n	8004d96 <_svfiprintf_r+0xfa>
 8004d68:	0035      	movs	r5, r6
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	200a      	movs	r0, #10
 8004d6e:	68e3      	ldr	r3, [r4, #12]
 8004d70:	782a      	ldrb	r2, [r5, #0]
 8004d72:	1c6e      	adds	r6, r5, #1
 8004d74:	3a30      	subs	r2, #48	@ 0x30
 8004d76:	2a09      	cmp	r2, #9
 8004d78:	d950      	bls.n	8004e1c <_svfiprintf_r+0x180>
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d111      	bne.n	8004da2 <_svfiprintf_r+0x106>
 8004d7e:	e017      	b.n	8004db0 <_svfiprintf_r+0x114>
 8004d80:	3501      	adds	r5, #1
 8004d82:	e7af      	b.n	8004ce4 <_svfiprintf_r+0x48>
 8004d84:	9b05      	ldr	r3, [sp, #20]
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	1ac0      	subs	r0, r0, r3
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4083      	lsls	r3, r0
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	002e      	movs	r6, r5
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	e7cc      	b.n	8004d30 <_svfiprintf_r+0x94>
 8004d96:	9b07      	ldr	r3, [sp, #28]
 8004d98:	1d19      	adds	r1, r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	9107      	str	r1, [sp, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	db01      	blt.n	8004da6 <_svfiprintf_r+0x10a>
 8004da2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004da4:	e004      	b.n	8004db0 <_svfiprintf_r+0x114>
 8004da6:	425b      	negs	r3, r3
 8004da8:	60e3      	str	r3, [r4, #12]
 8004daa:	2302      	movs	r3, #2
 8004dac:	4313      	orrs	r3, r2
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	782b      	ldrb	r3, [r5, #0]
 8004db2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004db4:	d10c      	bne.n	8004dd0 <_svfiprintf_r+0x134>
 8004db6:	786b      	ldrb	r3, [r5, #1]
 8004db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dba:	d134      	bne.n	8004e26 <_svfiprintf_r+0x18a>
 8004dbc:	9b07      	ldr	r3, [sp, #28]
 8004dbe:	3502      	adds	r5, #2
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	9207      	str	r2, [sp, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da01      	bge.n	8004dce <_svfiprintf_r+0x132>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	425b      	negs	r3, r3
 8004dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dd0:	4e2d      	ldr	r6, [pc, #180]	@ (8004e88 <_svfiprintf_r+0x1ec>)
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	0030      	movs	r0, r6
 8004dd6:	7829      	ldrb	r1, [r5, #0]
 8004dd8:	f000 f9fe 	bl	80051d8 <memchr>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d006      	beq.n	8004dee <_svfiprintf_r+0x152>
 8004de0:	2340      	movs	r3, #64	@ 0x40
 8004de2:	1b80      	subs	r0, r0, r6
 8004de4:	4083      	lsls	r3, r0
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	3501      	adds	r5, #1
 8004dea:	4313      	orrs	r3, r2
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	7829      	ldrb	r1, [r5, #0]
 8004df0:	2206      	movs	r2, #6
 8004df2:	4826      	ldr	r0, [pc, #152]	@ (8004e8c <_svfiprintf_r+0x1f0>)
 8004df4:	1c6e      	adds	r6, r5, #1
 8004df6:	7621      	strb	r1, [r4, #24]
 8004df8:	f000 f9ee 	bl	80051d8 <memchr>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d038      	beq.n	8004e72 <_svfiprintf_r+0x1d6>
 8004e00:	4b23      	ldr	r3, [pc, #140]	@ (8004e90 <_svfiprintf_r+0x1f4>)
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d122      	bne.n	8004e4c <_svfiprintf_r+0x1b0>
 8004e06:	2207      	movs	r2, #7
 8004e08:	9b07      	ldr	r3, [sp, #28]
 8004e0a:	3307      	adds	r3, #7
 8004e0c:	4393      	bics	r3, r2
 8004e0e:	3308      	adds	r3, #8
 8004e10:	9307      	str	r3, [sp, #28]
 8004e12:	6963      	ldr	r3, [r4, #20]
 8004e14:	9a04      	ldr	r2, [sp, #16]
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	6163      	str	r3, [r4, #20]
 8004e1a:	e762      	b.n	8004ce2 <_svfiprintf_r+0x46>
 8004e1c:	4343      	muls	r3, r0
 8004e1e:	0035      	movs	r5, r6
 8004e20:	2101      	movs	r1, #1
 8004e22:	189b      	adds	r3, r3, r2
 8004e24:	e7a4      	b.n	8004d70 <_svfiprintf_r+0xd4>
 8004e26:	2300      	movs	r3, #0
 8004e28:	200a      	movs	r0, #10
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	3501      	adds	r5, #1
 8004e2e:	6063      	str	r3, [r4, #4]
 8004e30:	782a      	ldrb	r2, [r5, #0]
 8004e32:	1c6e      	adds	r6, r5, #1
 8004e34:	3a30      	subs	r2, #48	@ 0x30
 8004e36:	2a09      	cmp	r2, #9
 8004e38:	d903      	bls.n	8004e42 <_svfiprintf_r+0x1a6>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0c8      	beq.n	8004dd0 <_svfiprintf_r+0x134>
 8004e3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e40:	e7c6      	b.n	8004dd0 <_svfiprintf_r+0x134>
 8004e42:	4341      	muls	r1, r0
 8004e44:	0035      	movs	r5, r6
 8004e46:	2301      	movs	r3, #1
 8004e48:	1889      	adds	r1, r1, r2
 8004e4a:	e7f1      	b.n	8004e30 <_svfiprintf_r+0x194>
 8004e4c:	aa07      	add	r2, sp, #28
 8004e4e:	9200      	str	r2, [sp, #0]
 8004e50:	0021      	movs	r1, r4
 8004e52:	003a      	movs	r2, r7
 8004e54:	4b0f      	ldr	r3, [pc, #60]	@ (8004e94 <_svfiprintf_r+0x1f8>)
 8004e56:	9803      	ldr	r0, [sp, #12]
 8004e58:	e000      	b.n	8004e5c <_svfiprintf_r+0x1c0>
 8004e5a:	bf00      	nop
 8004e5c:	9004      	str	r0, [sp, #16]
 8004e5e:	9b04      	ldr	r3, [sp, #16]
 8004e60:	3301      	adds	r3, #1
 8004e62:	d1d6      	bne.n	8004e12 <_svfiprintf_r+0x176>
 8004e64:	89bb      	ldrh	r3, [r7, #12]
 8004e66:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e68:	065b      	lsls	r3, r3, #25
 8004e6a:	d500      	bpl.n	8004e6e <_svfiprintf_r+0x1d2>
 8004e6c:	e72c      	b.n	8004cc8 <_svfiprintf_r+0x2c>
 8004e6e:	b021      	add	sp, #132	@ 0x84
 8004e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e72:	aa07      	add	r2, sp, #28
 8004e74:	9200      	str	r2, [sp, #0]
 8004e76:	0021      	movs	r1, r4
 8004e78:	003a      	movs	r2, r7
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <_svfiprintf_r+0x1f8>)
 8004e7c:	9803      	ldr	r0, [sp, #12]
 8004e7e:	f000 f87b 	bl	8004f78 <_printf_i>
 8004e82:	e7eb      	b.n	8004e5c <_svfiprintf_r+0x1c0>
 8004e84:	08005300 	.word	0x08005300
 8004e88:	08005306 	.word	0x08005306
 8004e8c:	0800530a 	.word	0x0800530a
 8004e90:	00000000 	.word	0x00000000
 8004e94:	08004bdd 	.word	0x08004bdd

08004e98 <_printf_common>:
 8004e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9a:	0016      	movs	r6, r2
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	688a      	ldr	r2, [r1, #8]
 8004ea0:	690b      	ldr	r3, [r1, #16]
 8004ea2:	000c      	movs	r4, r1
 8004ea4:	9000      	str	r0, [sp, #0]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	da00      	bge.n	8004eac <_printf_common+0x14>
 8004eaa:	0013      	movs	r3, r2
 8004eac:	0022      	movs	r2, r4
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	3243      	adds	r2, #67	@ 0x43
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d001      	beq.n	8004ebc <_printf_common+0x24>
 8004eb8:	3301      	adds	r3, #1
 8004eba:	6033      	str	r3, [r6, #0]
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	069b      	lsls	r3, r3, #26
 8004ec0:	d502      	bpl.n	8004ec8 <_printf_common+0x30>
 8004ec2:	6833      	ldr	r3, [r6, #0]
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	2306      	movs	r3, #6
 8004ecc:	0015      	movs	r5, r2
 8004ece:	401d      	ands	r5, r3
 8004ed0:	421a      	tst	r2, r3
 8004ed2:	d027      	beq.n	8004f24 <_printf_common+0x8c>
 8004ed4:	0023      	movs	r3, r4
 8004ed6:	3343      	adds	r3, #67	@ 0x43
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	1e5a      	subs	r2, r3, #1
 8004edc:	4193      	sbcs	r3, r2
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	0692      	lsls	r2, r2, #26
 8004ee2:	d430      	bmi.n	8004f46 <_printf_common+0xae>
 8004ee4:	0022      	movs	r2, r4
 8004ee6:	9901      	ldr	r1, [sp, #4]
 8004ee8:	9800      	ldr	r0, [sp, #0]
 8004eea:	9d08      	ldr	r5, [sp, #32]
 8004eec:	3243      	adds	r2, #67	@ 0x43
 8004eee:	47a8      	blx	r5
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d025      	beq.n	8004f40 <_printf_common+0xa8>
 8004ef4:	2206      	movs	r2, #6
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	2500      	movs	r5, #0
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d105      	bne.n	8004f0c <_printf_common+0x74>
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	68e5      	ldr	r5, [r4, #12]
 8004f04:	1aed      	subs	r5, r5, r3
 8004f06:	43eb      	mvns	r3, r5
 8004f08:	17db      	asrs	r3, r3, #31
 8004f0a:	401d      	ands	r5, r3
 8004f0c:	68a3      	ldr	r3, [r4, #8]
 8004f0e:	6922      	ldr	r2, [r4, #16]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	dd01      	ble.n	8004f18 <_printf_common+0x80>
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	18ed      	adds	r5, r5, r3
 8004f18:	2600      	movs	r6, #0
 8004f1a:	42b5      	cmp	r5, r6
 8004f1c:	d120      	bne.n	8004f60 <_printf_common+0xc8>
 8004f1e:	2000      	movs	r0, #0
 8004f20:	e010      	b.n	8004f44 <_printf_common+0xac>
 8004f22:	3501      	adds	r5, #1
 8004f24:	68e3      	ldr	r3, [r4, #12]
 8004f26:	6832      	ldr	r2, [r6, #0]
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	42ab      	cmp	r3, r5
 8004f2c:	ddd2      	ble.n	8004ed4 <_printf_common+0x3c>
 8004f2e:	0022      	movs	r2, r4
 8004f30:	2301      	movs	r3, #1
 8004f32:	9901      	ldr	r1, [sp, #4]
 8004f34:	9800      	ldr	r0, [sp, #0]
 8004f36:	9f08      	ldr	r7, [sp, #32]
 8004f38:	3219      	adds	r2, #25
 8004f3a:	47b8      	blx	r7
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d1f0      	bne.n	8004f22 <_printf_common+0x8a>
 8004f40:	2001      	movs	r0, #1
 8004f42:	4240      	negs	r0, r0
 8004f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f46:	2030      	movs	r0, #48	@ 0x30
 8004f48:	18e1      	adds	r1, r4, r3
 8004f4a:	3143      	adds	r1, #67	@ 0x43
 8004f4c:	7008      	strb	r0, [r1, #0]
 8004f4e:	0021      	movs	r1, r4
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	3145      	adds	r1, #69	@ 0x45
 8004f54:	7809      	ldrb	r1, [r1, #0]
 8004f56:	18a2      	adds	r2, r4, r2
 8004f58:	3243      	adds	r2, #67	@ 0x43
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	7011      	strb	r1, [r2, #0]
 8004f5e:	e7c1      	b.n	8004ee4 <_printf_common+0x4c>
 8004f60:	0022      	movs	r2, r4
 8004f62:	2301      	movs	r3, #1
 8004f64:	9901      	ldr	r1, [sp, #4]
 8004f66:	9800      	ldr	r0, [sp, #0]
 8004f68:	9f08      	ldr	r7, [sp, #32]
 8004f6a:	321a      	adds	r2, #26
 8004f6c:	47b8      	blx	r7
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d0e6      	beq.n	8004f40 <_printf_common+0xa8>
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7d1      	b.n	8004f1a <_printf_common+0x82>
	...

08004f78 <_printf_i>:
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	b08b      	sub	sp, #44	@ 0x2c
 8004f7c:	9206      	str	r2, [sp, #24]
 8004f7e:	000a      	movs	r2, r1
 8004f80:	3243      	adds	r2, #67	@ 0x43
 8004f82:	9307      	str	r3, [sp, #28]
 8004f84:	9005      	str	r0, [sp, #20]
 8004f86:	9203      	str	r2, [sp, #12]
 8004f88:	7e0a      	ldrb	r2, [r1, #24]
 8004f8a:	000c      	movs	r4, r1
 8004f8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f8e:	2a78      	cmp	r2, #120	@ 0x78
 8004f90:	d809      	bhi.n	8004fa6 <_printf_i+0x2e>
 8004f92:	2a62      	cmp	r2, #98	@ 0x62
 8004f94:	d80b      	bhi.n	8004fae <_printf_i+0x36>
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	d100      	bne.n	8004f9c <_printf_i+0x24>
 8004f9a:	e0ba      	b.n	8005112 <_printf_i+0x19a>
 8004f9c:	497a      	ldr	r1, [pc, #488]	@ (8005188 <_printf_i+0x210>)
 8004f9e:	9104      	str	r1, [sp, #16]
 8004fa0:	2a58      	cmp	r2, #88	@ 0x58
 8004fa2:	d100      	bne.n	8004fa6 <_printf_i+0x2e>
 8004fa4:	e08e      	b.n	80050c4 <_printf_i+0x14c>
 8004fa6:	0025      	movs	r5, r4
 8004fa8:	3542      	adds	r5, #66	@ 0x42
 8004faa:	702a      	strb	r2, [r5, #0]
 8004fac:	e022      	b.n	8004ff4 <_printf_i+0x7c>
 8004fae:	0010      	movs	r0, r2
 8004fb0:	3863      	subs	r0, #99	@ 0x63
 8004fb2:	2815      	cmp	r0, #21
 8004fb4:	d8f7      	bhi.n	8004fa6 <_printf_i+0x2e>
 8004fb6:	f7fb f8ad 	bl	8000114 <__gnu_thumb1_case_shi>
 8004fba:	0016      	.short	0x0016
 8004fbc:	fff6001f 	.word	0xfff6001f
 8004fc0:	fff6fff6 	.word	0xfff6fff6
 8004fc4:	001ffff6 	.word	0x001ffff6
 8004fc8:	fff6fff6 	.word	0xfff6fff6
 8004fcc:	fff6fff6 	.word	0xfff6fff6
 8004fd0:	0036009f 	.word	0x0036009f
 8004fd4:	fff6007e 	.word	0xfff6007e
 8004fd8:	00b0fff6 	.word	0x00b0fff6
 8004fdc:	0036fff6 	.word	0x0036fff6
 8004fe0:	fff6fff6 	.word	0xfff6fff6
 8004fe4:	0082      	.short	0x0082
 8004fe6:	0025      	movs	r5, r4
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	3542      	adds	r5, #66	@ 0x42
 8004fec:	1d11      	adds	r1, r2, #4
 8004fee:	6019      	str	r1, [r3, #0]
 8004ff0:	6813      	ldr	r3, [r2, #0]
 8004ff2:	702b      	strb	r3, [r5, #0]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e09e      	b.n	8005136 <_printf_i+0x1be>
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	6809      	ldr	r1, [r1, #0]
 8004ffc:	1d02      	adds	r2, r0, #4
 8004ffe:	060d      	lsls	r5, r1, #24
 8005000:	d50b      	bpl.n	800501a <_printf_i+0xa2>
 8005002:	6806      	ldr	r6, [r0, #0]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	2e00      	cmp	r6, #0
 8005008:	da03      	bge.n	8005012 <_printf_i+0x9a>
 800500a:	232d      	movs	r3, #45	@ 0x2d
 800500c:	9a03      	ldr	r2, [sp, #12]
 800500e:	4276      	negs	r6, r6
 8005010:	7013      	strb	r3, [r2, #0]
 8005012:	4b5d      	ldr	r3, [pc, #372]	@ (8005188 <_printf_i+0x210>)
 8005014:	270a      	movs	r7, #10
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	e018      	b.n	800504c <_printf_i+0xd4>
 800501a:	6806      	ldr	r6, [r0, #0]
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	0649      	lsls	r1, r1, #25
 8005020:	d5f1      	bpl.n	8005006 <_printf_i+0x8e>
 8005022:	b236      	sxth	r6, r6
 8005024:	e7ef      	b.n	8005006 <_printf_i+0x8e>
 8005026:	6808      	ldr	r0, [r1, #0]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	c940      	ldmia	r1!, {r6}
 800502c:	0605      	lsls	r5, r0, #24
 800502e:	d402      	bmi.n	8005036 <_printf_i+0xbe>
 8005030:	0640      	lsls	r0, r0, #25
 8005032:	d500      	bpl.n	8005036 <_printf_i+0xbe>
 8005034:	b2b6      	uxth	r6, r6
 8005036:	6019      	str	r1, [r3, #0]
 8005038:	4b53      	ldr	r3, [pc, #332]	@ (8005188 <_printf_i+0x210>)
 800503a:	270a      	movs	r7, #10
 800503c:	9304      	str	r3, [sp, #16]
 800503e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005040:	d100      	bne.n	8005044 <_printf_i+0xcc>
 8005042:	3f02      	subs	r7, #2
 8005044:	0023      	movs	r3, r4
 8005046:	2200      	movs	r2, #0
 8005048:	3343      	adds	r3, #67	@ 0x43
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	60a3      	str	r3, [r4, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	db06      	blt.n	8005062 <_printf_i+0xea>
 8005054:	2104      	movs	r1, #4
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	9d03      	ldr	r5, [sp, #12]
 800505a:	438a      	bics	r2, r1
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	4333      	orrs	r3, r6
 8005060:	d00c      	beq.n	800507c <_printf_i+0x104>
 8005062:	9d03      	ldr	r5, [sp, #12]
 8005064:	0030      	movs	r0, r6
 8005066:	0039      	movs	r1, r7
 8005068:	f7fb f8e4 	bl	8000234 <__aeabi_uidivmod>
 800506c:	9b04      	ldr	r3, [sp, #16]
 800506e:	3d01      	subs	r5, #1
 8005070:	5c5b      	ldrb	r3, [r3, r1]
 8005072:	702b      	strb	r3, [r5, #0]
 8005074:	0033      	movs	r3, r6
 8005076:	0006      	movs	r6, r0
 8005078:	429f      	cmp	r7, r3
 800507a:	d9f3      	bls.n	8005064 <_printf_i+0xec>
 800507c:	2f08      	cmp	r7, #8
 800507e:	d109      	bne.n	8005094 <_printf_i+0x11c>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	07db      	lsls	r3, r3, #31
 8005084:	d506      	bpl.n	8005094 <_printf_i+0x11c>
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	429a      	cmp	r2, r3
 800508c:	dc02      	bgt.n	8005094 <_printf_i+0x11c>
 800508e:	2330      	movs	r3, #48	@ 0x30
 8005090:	3d01      	subs	r5, #1
 8005092:	702b      	strb	r3, [r5, #0]
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	1b5b      	subs	r3, r3, r5
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	9b07      	ldr	r3, [sp, #28]
 800509c:	0021      	movs	r1, r4
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	9805      	ldr	r0, [sp, #20]
 80050a2:	9b06      	ldr	r3, [sp, #24]
 80050a4:	aa09      	add	r2, sp, #36	@ 0x24
 80050a6:	f7ff fef7 	bl	8004e98 <_printf_common>
 80050aa:	3001      	adds	r0, #1
 80050ac:	d148      	bne.n	8005140 <_printf_i+0x1c8>
 80050ae:	2001      	movs	r0, #1
 80050b0:	4240      	negs	r0, r0
 80050b2:	b00b      	add	sp, #44	@ 0x2c
 80050b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b6:	2220      	movs	r2, #32
 80050b8:	6809      	ldr	r1, [r1, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	6022      	str	r2, [r4, #0]
 80050be:	2278      	movs	r2, #120	@ 0x78
 80050c0:	4932      	ldr	r1, [pc, #200]	@ (800518c <_printf_i+0x214>)
 80050c2:	9104      	str	r1, [sp, #16]
 80050c4:	0021      	movs	r1, r4
 80050c6:	3145      	adds	r1, #69	@ 0x45
 80050c8:	700a      	strb	r2, [r1, #0]
 80050ca:	6819      	ldr	r1, [r3, #0]
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	c940      	ldmia	r1!, {r6}
 80050d0:	0610      	lsls	r0, r2, #24
 80050d2:	d402      	bmi.n	80050da <_printf_i+0x162>
 80050d4:	0650      	lsls	r0, r2, #25
 80050d6:	d500      	bpl.n	80050da <_printf_i+0x162>
 80050d8:	b2b6      	uxth	r6, r6
 80050da:	6019      	str	r1, [r3, #0]
 80050dc:	07d3      	lsls	r3, r2, #31
 80050de:	d502      	bpl.n	80050e6 <_printf_i+0x16e>
 80050e0:	2320      	movs	r3, #32
 80050e2:	4313      	orrs	r3, r2
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	2e00      	cmp	r6, #0
 80050e8:	d001      	beq.n	80050ee <_printf_i+0x176>
 80050ea:	2710      	movs	r7, #16
 80050ec:	e7aa      	b.n	8005044 <_printf_i+0xcc>
 80050ee:	2220      	movs	r2, #32
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	4393      	bics	r3, r2
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	e7f8      	b.n	80050ea <_printf_i+0x172>
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	680d      	ldr	r5, [r1, #0]
 80050fc:	1d10      	adds	r0, r2, #4
 80050fe:	6949      	ldr	r1, [r1, #20]
 8005100:	6018      	str	r0, [r3, #0]
 8005102:	6813      	ldr	r3, [r2, #0]
 8005104:	062e      	lsls	r6, r5, #24
 8005106:	d501      	bpl.n	800510c <_printf_i+0x194>
 8005108:	6019      	str	r1, [r3, #0]
 800510a:	e002      	b.n	8005112 <_printf_i+0x19a>
 800510c:	066d      	lsls	r5, r5, #25
 800510e:	d5fb      	bpl.n	8005108 <_printf_i+0x190>
 8005110:	8019      	strh	r1, [r3, #0]
 8005112:	2300      	movs	r3, #0
 8005114:	9d03      	ldr	r5, [sp, #12]
 8005116:	6123      	str	r3, [r4, #16]
 8005118:	e7bf      	b.n	800509a <_printf_i+0x122>
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	1d11      	adds	r1, r2, #4
 800511e:	6019      	str	r1, [r3, #0]
 8005120:	6815      	ldr	r5, [r2, #0]
 8005122:	2100      	movs	r1, #0
 8005124:	0028      	movs	r0, r5
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	f000 f856 	bl	80051d8 <memchr>
 800512c:	2800      	cmp	r0, #0
 800512e:	d001      	beq.n	8005134 <_printf_i+0x1bc>
 8005130:	1b40      	subs	r0, r0, r5
 8005132:	6060      	str	r0, [r4, #4]
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	2300      	movs	r3, #0
 800513a:	9a03      	ldr	r2, [sp, #12]
 800513c:	7013      	strb	r3, [r2, #0]
 800513e:	e7ac      	b.n	800509a <_printf_i+0x122>
 8005140:	002a      	movs	r2, r5
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	9906      	ldr	r1, [sp, #24]
 8005146:	9805      	ldr	r0, [sp, #20]
 8005148:	9d07      	ldr	r5, [sp, #28]
 800514a:	47a8      	blx	r5
 800514c:	3001      	adds	r0, #1
 800514e:	d0ae      	beq.n	80050ae <_printf_i+0x136>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	079b      	lsls	r3, r3, #30
 8005154:	d415      	bmi.n	8005182 <_printf_i+0x20a>
 8005156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005158:	68e0      	ldr	r0, [r4, #12]
 800515a:	4298      	cmp	r0, r3
 800515c:	daa9      	bge.n	80050b2 <_printf_i+0x13a>
 800515e:	0018      	movs	r0, r3
 8005160:	e7a7      	b.n	80050b2 <_printf_i+0x13a>
 8005162:	0022      	movs	r2, r4
 8005164:	2301      	movs	r3, #1
 8005166:	9906      	ldr	r1, [sp, #24]
 8005168:	9805      	ldr	r0, [sp, #20]
 800516a:	9e07      	ldr	r6, [sp, #28]
 800516c:	3219      	adds	r2, #25
 800516e:	47b0      	blx	r6
 8005170:	3001      	adds	r0, #1
 8005172:	d09c      	beq.n	80050ae <_printf_i+0x136>
 8005174:	3501      	adds	r5, #1
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	42ab      	cmp	r3, r5
 800517e:	dcf0      	bgt.n	8005162 <_printf_i+0x1ea>
 8005180:	e7e9      	b.n	8005156 <_printf_i+0x1de>
 8005182:	2500      	movs	r5, #0
 8005184:	e7f7      	b.n	8005176 <_printf_i+0x1fe>
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	08005311 	.word	0x08005311
 800518c:	08005322 	.word	0x08005322

08005190 <memmove>:
 8005190:	b510      	push	{r4, lr}
 8005192:	4288      	cmp	r0, r1
 8005194:	d902      	bls.n	800519c <memmove+0xc>
 8005196:	188b      	adds	r3, r1, r2
 8005198:	4298      	cmp	r0, r3
 800519a:	d308      	bcc.n	80051ae <memmove+0x1e>
 800519c:	2300      	movs	r3, #0
 800519e:	429a      	cmp	r2, r3
 80051a0:	d007      	beq.n	80051b2 <memmove+0x22>
 80051a2:	5ccc      	ldrb	r4, [r1, r3]
 80051a4:	54c4      	strb	r4, [r0, r3]
 80051a6:	3301      	adds	r3, #1
 80051a8:	e7f9      	b.n	800519e <memmove+0xe>
 80051aa:	5c8b      	ldrb	r3, [r1, r2]
 80051ac:	5483      	strb	r3, [r0, r2]
 80051ae:	3a01      	subs	r2, #1
 80051b0:	d2fb      	bcs.n	80051aa <memmove+0x1a>
 80051b2:	bd10      	pop	{r4, pc}

080051b4 <_sbrk_r>:
 80051b4:	2300      	movs	r3, #0
 80051b6:	b570      	push	{r4, r5, r6, lr}
 80051b8:	4d06      	ldr	r5, [pc, #24]	@ (80051d4 <_sbrk_r+0x20>)
 80051ba:	0004      	movs	r4, r0
 80051bc:	0008      	movs	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7fc f80e 	bl	80011e0 <_sbrk>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d103      	bne.n	80051d0 <_sbrk_r+0x1c>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d000      	beq.n	80051d0 <_sbrk_r+0x1c>
 80051ce:	6023      	str	r3, [r4, #0]
 80051d0:	bd70      	pop	{r4, r5, r6, pc}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	20000400 	.word	0x20000400

080051d8 <memchr>:
 80051d8:	b2c9      	uxtb	r1, r1
 80051da:	1882      	adds	r2, r0, r2
 80051dc:	4290      	cmp	r0, r2
 80051de:	d101      	bne.n	80051e4 <memchr+0xc>
 80051e0:	2000      	movs	r0, #0
 80051e2:	4770      	bx	lr
 80051e4:	7803      	ldrb	r3, [r0, #0]
 80051e6:	428b      	cmp	r3, r1
 80051e8:	d0fb      	beq.n	80051e2 <memchr+0xa>
 80051ea:	3001      	adds	r0, #1
 80051ec:	e7f6      	b.n	80051dc <memchr+0x4>

080051ee <memcpy>:
 80051ee:	2300      	movs	r3, #0
 80051f0:	b510      	push	{r4, lr}
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d100      	bne.n	80051f8 <memcpy+0xa>
 80051f6:	bd10      	pop	{r4, pc}
 80051f8:	5ccc      	ldrb	r4, [r1, r3]
 80051fa:	54c4      	strb	r4, [r0, r3]
 80051fc:	3301      	adds	r3, #1
 80051fe:	e7f8      	b.n	80051f2 <memcpy+0x4>

08005200 <_realloc_r>:
 8005200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005202:	0006      	movs	r6, r0
 8005204:	000c      	movs	r4, r1
 8005206:	0015      	movs	r5, r2
 8005208:	2900      	cmp	r1, #0
 800520a:	d105      	bne.n	8005218 <_realloc_r+0x18>
 800520c:	0011      	movs	r1, r2
 800520e:	f7ff fc55 	bl	8004abc <_malloc_r>
 8005212:	0004      	movs	r4, r0
 8005214:	0020      	movs	r0, r4
 8005216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005218:	2a00      	cmp	r2, #0
 800521a:	d103      	bne.n	8005224 <_realloc_r+0x24>
 800521c:	f7ff fbe2 	bl	80049e4 <_free_r>
 8005220:	002c      	movs	r4, r5
 8005222:	e7f7      	b.n	8005214 <_realloc_r+0x14>
 8005224:	f000 f81c 	bl	8005260 <_malloc_usable_size_r>
 8005228:	0007      	movs	r7, r0
 800522a:	4285      	cmp	r5, r0
 800522c:	d802      	bhi.n	8005234 <_realloc_r+0x34>
 800522e:	0843      	lsrs	r3, r0, #1
 8005230:	42ab      	cmp	r3, r5
 8005232:	d3ef      	bcc.n	8005214 <_realloc_r+0x14>
 8005234:	0029      	movs	r1, r5
 8005236:	0030      	movs	r0, r6
 8005238:	f7ff fc40 	bl	8004abc <_malloc_r>
 800523c:	9001      	str	r0, [sp, #4]
 800523e:	2800      	cmp	r0, #0
 8005240:	d101      	bne.n	8005246 <_realloc_r+0x46>
 8005242:	9c01      	ldr	r4, [sp, #4]
 8005244:	e7e6      	b.n	8005214 <_realloc_r+0x14>
 8005246:	002a      	movs	r2, r5
 8005248:	42bd      	cmp	r5, r7
 800524a:	d900      	bls.n	800524e <_realloc_r+0x4e>
 800524c:	003a      	movs	r2, r7
 800524e:	0021      	movs	r1, r4
 8005250:	9801      	ldr	r0, [sp, #4]
 8005252:	f7ff ffcc 	bl	80051ee <memcpy>
 8005256:	0021      	movs	r1, r4
 8005258:	0030      	movs	r0, r6
 800525a:	f7ff fbc3 	bl	80049e4 <_free_r>
 800525e:	e7f0      	b.n	8005242 <_realloc_r+0x42>

08005260 <_malloc_usable_size_r>:
 8005260:	1f0b      	subs	r3, r1, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	1f18      	subs	r0, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	da01      	bge.n	800526e <_malloc_usable_size_r+0xe>
 800526a:	580b      	ldr	r3, [r1, r0]
 800526c:	18c0      	adds	r0, r0, r3
 800526e:	4770      	bx	lr

08005270 <_init>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr

0800527c <_fini>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr
